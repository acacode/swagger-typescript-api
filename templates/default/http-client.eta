<%
const { apiConfig, generateResponses } = it;
%>

export type RequestParams = Omit<RequestInit, "body" | "method"> & {
    secure?: boolean;
}

export type RequestQueryParamsType = Record<string | number, any>;


interface ApiConfig<<%~ apiConfig.generic.map(g => g.name).join(', ') %>> {
    baseUrl?: string;
    baseApiParams?: RequestParams;
    securityWorker?: (securityData: SecurityDataType) => RequestParams;
}

<% if (generateResponses) {%>
/** Overrided Promise type. Needs for additional typings of `.catch` callback */
type TPromise<ResolveType, RejectType = any> = Omit<Promise<ResolveType>, "then" | "catch"> & {
    then<TResult1 = ResolveType, TResult2 = never>(onfulfilled?: ((value: ResolveType) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: RejectType) => TResult2 | PromiseLike<TResult2>) | undefined | null): TPromise<TResult1 | TResult2, RejectType>;
    catch<TResult = never>(onrejected?: ((reason: RejectType) => TResult | PromiseLike<TResult>) | undefined | null): TPromise<ResolveType | TResult, RejectType>;
}
<% } %>

interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
    data: D;
    error: E;
}

enum BodyType {
    Json,
    FormData,
    UrlEncoded,
}

export class HttpClient<<%~ apiConfig.generic.map(g => `${g.name} = unknown`).join(', ') %>> {
    public baseUrl: string = "<%~ apiConfig.baseUrl %>";
    private securityData: SecurityDataType = (null as any);
    private securityWorker: null | ApiConfig<<%~ apiConfig.generic.map(g => g.name).join(', ') %>>["securityWorker"] = null;

    private baseApiParams: RequestParams = {
        credentials: 'same-origin',
        headers: {
            'Content-Type': 'application/json'
        },
        redirect: 'follow',
        referrerPolicy: 'no-referrer',
    }

    constructor(apiConfig: ApiConfig<<%~ apiConfig.generic.map(g => g.name).join(', ') %>> = {}) {
        Object.assign(this, apiConfig);
    }

    public setSecurityData = (data: SecurityDataType) => {
        this.securityData = data
    }

    private addQueryParam(query: RequestQueryParamsType, key: string) {
        return encodeURIComponent(key) + "=" + encodeURIComponent(Array.isArray(query[key]) ? query[key].join(",") : query[key])
    }

    protected toQueryString(rawQuery?: RequestQueryParamsType): string {
        const query = rawQuery || {};
        const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
        return keys
                .map((key) =>
                    typeof query[key] === "object" && !Array.isArray(query[key])
                    ? this.toQueryString(query[key] as object)
                    : this.addQueryParam(query, key),
                )
                .join("&");
    }

    protected addQueryParams(rawQuery?: RequestQueryParamsType): string {
        const queryString = this.toQueryString(rawQuery);
        return queryString ? `?${queryString}` : "";
    }

    private bodyFormatters: Record<BodyType, (input: any) => any> = {
        [BodyType.Json]: JSON.stringify,
        [BodyType.FormData]: (input: any) =>
            Object.keys(input).reduce((data, key) => {
            data.append(key, input[key]);
            return data;
        }, new FormData()),
        [BodyType.UrlEncoded]: (input: any) => this.toQueryString(input),
    }

    private mergeRequestOptions(params: RequestParams, securityParams?: RequestParams): RequestParams {
        return {
            ...this.baseApiParams,
            ...params,
            ...(securityParams || {}),
            headers: {
                ...(this.baseApiParams.headers || {}),
                ...(params.headers || {}),
                ...((securityParams && securityParams.headers) || {})
            }
        }
    }

    private safeParseResponse = <T = any, E = any>(response: Response): Promise<HttpResponse<T, E>> => {
        const r = response as HttpResponse<T, E>;
        r.data = null as unknown as T;
        r.error = null as unknown as E;

        return response
            .json()
            .then((data) => {
                if (r.ok) {
                    r.data = data;
                } else {
                    r.error = data;
                }
                return r;
            })
            .catch((e) => {
                r.error = e;
                return r;
            });
    }

    public request = <T = any, E = any>(
        path: string,
        method: string,
        { secure, ...params }: RequestParams = {},
        body?: any,
        bodyType?: BodyType,
        secureByDefault?: boolean,
    ): <% if (generateResponses) { %>TPromise<HttpResponse<T, E>><% } else { %>Promise<HttpResponse<T>><% } %> => {
        const requestUrl = `${this.baseUrl}${path}`;
        const secureOptions = (secureByDefault || secure) && this.securityWorker ? this.securityWorker(this.securityData) : {};
        const requestOptions = {
            ...this.mergeRequestOptions(params, secureOptions),
            method,
            body: body ? this.bodyFormatters[bodyType || BodyType.Json](body) : null,
        }

        return fetch(requestUrl, requestOptions).then(async response => {
            const data = await this.safeParseResponse<T, E>(response);
            if (!response.ok) throw data
            return data
        })
    }
}
