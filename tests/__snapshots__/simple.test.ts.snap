// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`simple > 'adafruit' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Activity {
  action?: string;
  /** @format dateTime */
  created_at?: string;
  data?: object;
  id?: number;
  model?: string;
  /** @format dateTime */
  updated_at?: string;
  user_id?: number;
}

export interface Block {
  block_feeds?: BlockFeed[];
  column?: number;
  description?: string;
  key?: string;
  name?: string;
  row?: number;
  size_x?: number;
  size_y?: number;
  visual_type?: string;
}

export interface BlockFeed {
  feed?: Feed;
  group?: Group;
  id?: string;
}

export interface Dashboard {
  blocks?: Block[];
  description?: string;
  key?: string;
  name?: string;
}

export interface Data {
  completed_at?: string;
  created_at?: string;
  created_epoch?: number;
  ele?: number;
  expiration?: string;
  feed_id?: number;
  group_id?: number;
  id?: string;
  lat?: number;
  lon?: number;
  updated_at?: string;
  value?: string;
}

export interface DataResponse {
  completed_at?: string;
  created_at?: string;
  created_epoch?: number;
  ele?: number;
  expiration?: string;
  feed_id?: number;
  group_id?: number;
  id?: string;
  lat?: number;
  lon?: number;
  updated_at?: string;
  value?: string;
}

export interface Error {
  code?: string;
  message?: string;
}

export interface Feed {
  created_at?: string;
  description?: string;
  /** Additional details about this feed. */
  details?: {
    data?: {
      /** Number of data points stored by this feed. */
      count?: number;
      first?: Record<string, Data>;
      last?: Record<string, Data>;
    };
    /** Access control list for this feed */
    shared_with?: object[];
  };
  enabled?: boolean;
  group?: Record<string, ShallowGroup>;
  groups?: ShallowGroup[];
  history?: boolean;
  id?: number;
  key?: string;
  last_value?: string;
  license?: string;
  name?: string;
  status?: string;
  /** Is status notification active? */
  status_notify?: boolean;
  /** Status notification timeout in minutes. */
  status_timeout?: number;
  unit_symbol?: string;
  unit_type?: string;
  updated_at?: string;
  /** @default "private" */
  visibility?: "private" | "public" | "in progress" | "out of access";
}

export interface Group {
  created_at?: string;
  description?: string;
  feeds?: Feed[];
  id?: number;
  name?: string;
  updated_at?: string;
}

export interface Permission {
  created_at?: string;
  id?: number;
  /** @default "feed" */
  model?: "feed" | "group" | "dashboard";
  object_id?: number;
  /** @default "public" */
  scope?: "secret" | "public" | "user" | "organization";
  scope_value?: string;
  updated_at?: string;
  user_id?: number;
}

export interface ShallowGroup {
  created_at?: string;
  description?: string;
  id?: number;
  name?: string;
  updated_at?: string;
}

export interface Token {
  token?: string;
}

export interface Trigger {
  name?: string;
}

export interface User {
  color?: string;
  /** @format dateTime */
  created_at?: string;
  id?: number;
  name?: string;
  time_zone?: string;
  /** @format dateTime */
  updated_at?: string;
  username?: string;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "https://io.adafruit.com/api/v2";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Adafruit IO
 * @version 2.0.0
 * @baseUrl https://io.adafruit.com/api/v2
 *
 * ### The Internet of Things for Everyone
 *
 * The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).
 *
 * This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).
 *
 * #### Authentication
 *
 * Authentication for every API request happens through the \`X-AIO-Key\` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username "io_username" and the key "io_key_12345" could look like this:
 *
 *     $ curl -H "X-AIO-Key: io_key_12345" https://io.adafruit.com/api/v2/io_username/feeds
 *
 * Or like this:
 *
 *     $ curl "https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345
 *
 * Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:
 *
 * \`\`\`js
 * var request = require('request');
 *
 * var options = {
 *   url: 'https://io.adafruit.com/api/v2/io_username/feeds',
 *   headers: {
 *     'X-AIO-Key': 'io_key_12345',
 *     'Content-Type': 'application/json'
 *   }
 * };
 *
 * function callback(error, response, body) {
 *   if (!error && response.statusCode == 200) {
 *     var feeds = JSON.parse(body);
 *     console.log(feeds.length + " FEEDS AVAILABLE");
 *
 *     feeds.forEach(function (feed) {
 *       console.log(feed.name, feed.key);
 *     })
 *   }
 * }
 *
 * request(options, callback);
 * \`\`\`
 *
 * Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing \`---\` with your own values in the appropriate locations):
 *
 * \`\`\`arduino
 * /// based on
 * /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino
 *
 * #include <Arduino.h>
 * #include <ESP8266WiFi.h>
 * #include <ESP8266WiFiMulti.h>
 * #include <ESP8266HTTPClient.h>
 *
 * ESP8266WiFiMulti WiFiMulti;
 *
 * const char* ssid = "---";
 * const char* password = "---";
 *
 * const char* host = "io.adafruit.com";
 *
 * const char* io_key = "---";
 * const char* path_with_username = "/api/v2/---/dashboards";
 *
 * // Use web browser to view and copy
 * // SHA1 fingerprint of the certificate
 * const char* fingerprint = "77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18";
 *
 * void setup() {
 *   Serial.begin(115200);
 *
 *   for(uint8_t t = 4; t > 0; t--) {
 *     Serial.printf("[SETUP] WAIT %d...\\n", t);
 *     Serial.flush();
 *     delay(1000);
 *   }
 *
 *   WiFi.mode(WIFI_STA);
 *   WiFiMulti.addAP(ssid, password);
 *
 *   // wait for WiFi connection
 *   while(WiFiMulti.run() != WL_CONNECTED) {
 *     Serial.print('.');
 *     delay(1000);
 *   }
 *
 *   Serial.println("[WIFI] connected!");
 *
 *   HTTPClient http;
 *
 *   // start request with URL and TLS cert fingerprint for verification
 *   http.begin("https://" + String(host) + String(path_with_username), fingerprint);
 *
 *   // IO API authentication
 *   http.addHeader("X-AIO-Key", io_key);
 *
 *   // start connection and send HTTP header
 *   int httpCode = http.GET();
 *
 *   // httpCode will be negative on error
 *   if(httpCode > 0) {
 *     // HTTP header has been send and Server response header has been handled
 *     Serial.printf("[HTTP] GET response: %d\\n", httpCode);
 *
 *     // HTTP 200 OK
 *     if(httpCode == HTTP_CODE_OK) {
 *       String payload = http.getString();
 *       Serial.println(payload);
 *     }
 *
 *     http.end();
 *   }
 * }
 *
 * void loop() {}
 * \`\`\`
 *
 * #### Client Libraries
 *
 * We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.
 *
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  user = {
    /**
     * No description
     *
     * @tags Users
     * @name CurrentUser
     * @summary Get information about the current user
     * @request GET:/user
     * @secure
     */
    currentUser: (params: RequestParams = {}) =>
      this.request<User, void>({
        path: \`/user\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),
  };
  webhooks = {
    /**
     * No description
     *
     * @tags Webhooks, Data
     * @name CreateWebhookFeedData
     * @summary Send data to a feed via webhook URL.
     * @request POST:/webhooks/feed/:token
     * @secure
     */
    createWebhookFeedData: (
      token: string,
      payload: {
        value?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Data, void>({
        path: \`/webhooks/feed/\${token}\`,
        method: "POST",
        body: payload,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description The raw data webhook receiver accepts POST requests and stores the raw request body on your feed. This is useful when you don't have control of the webhook sender. If feed history is turned on, payloads will be truncated at 1024 bytes. If feed history is turned off, payloads will be truncated at 100KB.
     *
     * @tags Webhooks, Data
     * @name CreateRawWebhookFeedData
     * @summary Send arbitrary data to a feed via webhook URL.
     * @request POST:/webhooks/feed/:token/raw
     * @secure
     */
    createRawWebhookFeedData: (token: string, params: RequestParams = {}) =>
      this.request<Data, void>({
        path: \`/webhooks/feed/\${token}/raw\`,
        method: "POST",
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),
  };
  username = {
    /**
     * @description Delete all your activities.
     *
     * @tags Activities
     * @name DestroyActivities
     * @summary All activities for current user
     * @request DELETE:/{username}/activities
     * @secure
     */
    destroyActivities: (username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: \`/\${username}/activities\`,
        method: "DELETE",
        secure: true,
        ...params,
      }),

    /**
     * @description The Activities endpoint returns information about the user's activities.
     *
     * @tags Activities
     * @name AllActivities
     * @summary All activities for current user
     * @request GET:/{username}/activities
     * @secure
     */
    allActivities: (
      username: string,
      query?: {
        /**
         * End time for filtering, returns records created before give time.
         * @format date-time
         */
        end_time?: string;
        /** Limit the number of records returned. */
        limit?: number;
        /**
         * Start time for filtering, returns records created after given time.
         * @format date-time
         */
        start_time?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Activity[], void>({
        path: \`/\${username}/activities\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description The Activities endpoint returns information about the user's activities.
     *
     * @tags Activities
     * @name GetActivity
     * @summary Get activities by type for current user
     * @request GET:/{username}/activities/{type}
     * @secure
     */
    getActivity: (
      username: string,
      type: string,
      query?: {
        /**
         * End time for filtering, returns records created before give time.
         * @format date-time
         */
        end_time?: string;
        /** Limit the number of records returned. */
        limit?: number;
        /**
         * Start time for filtering, returns records created after given time.
         * @format date-time
         */
        start_time?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Activity[], void>({
        path: \`/\${username}/activities/\${type}\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description The Dashboards endpoint returns information about the user's dashboards.
     *
     * @tags Dashboards
     * @name AllDashboards
     * @summary All dashboards for current user
     * @request GET:/{username}/dashboards
     * @secure
     */
    allDashboards: (username: string, params: RequestParams = {}) =>
      this.request<Dashboard[], void>({
        path: \`/\${username}/dashboards\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Dashboards
     * @name CreateDashboard
     * @summary Create a new Dashboard
     * @request POST:/{username}/dashboards
     * @secure
     */
    createDashboard: (
      username: string,
      dashboard: {
        description?: string;
        key?: string;
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Dashboard, void>({
        path: \`/\${username}/dashboards\`,
        method: "POST",
        body: dashboard,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description The Blocks endpoint returns information about the user's blocks.
     *
     * @tags Blocks
     * @name AllBlocks
     * @summary All blocks for current user
     * @request GET:/{username}/dashboards/{dashboard_id}/blocks
     * @secure
     */
    allBlocks: (username: string, dashboardId: string, params: RequestParams = {}) =>
      this.request<Block[], void>({
        path: \`/\${username}/dashboards/\${dashboardId}/blocks\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Blocks
     * @name CreateBlock
     * @summary Create a new Block
     * @request POST:/{username}/dashboards/{dashboard_id}/blocks
     * @secure
     */
    createBlock: (
      username: string,
      dashboardId: string,
      block: {
        block_feeds?: {
          feed_id?: string;
          group_id?: string;
        }[];
        column?: number;
        dashboard_id?: number;
        description?: string;
        key?: string;
        name?: string;
        properties?: object;
        row?: number;
        size_x?: number;
        size_y?: number;
        visual_type?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Block, void>({
        path: \`/\${username}/dashboards/\${dashboardId}/blocks\`,
        method: "POST",
        body: block,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Blocks
     * @name DestroyBlock
     * @summary Delete an existing Block
     * @request DELETE:/{username}/dashboards/{dashboard_id}/blocks/{id}
     * @secure
     */
    destroyBlock: (username: string, dashboardId: string, id: string, params: RequestParams = {}) =>
      this.request<string, void>({
        path: \`/\${username}/dashboards/\${dashboardId}/blocks/\${id}\`,
        method: "DELETE",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Blocks
     * @name GetBlock
     * @summary Returns Block based on ID
     * @request GET:/{username}/dashboards/{dashboard_id}/blocks/{id}
     * @secure
     */
    getBlock: (username: string, dashboardId: string, id: string, params: RequestParams = {}) =>
      this.request<Block, void>({
        path: \`/\${username}/dashboards/\${dashboardId}/blocks/\${id}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Blocks
     * @name UpdateBlock
     * @summary Update properties of an existing Block
     * @request PATCH:/{username}/dashboards/{dashboard_id}/blocks/{id}
     * @secure
     */
    updateBlock: (
      username: string,
      dashboardId: string,
      id: string,
      block: {
        block_feeds?: {
          feed_id?: string;
          group_id?: string;
        }[];
        column?: number;
        dashboard_id?: number;
        description?: string;
        key?: string;
        name?: string;
        properties?: object;
        row?: number;
        size_x?: number;
        size_y?: number;
        visual_type?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Block, void>({
        path: \`/\${username}/dashboards/\${dashboardId}/blocks/\${id}\`,
        method: "PATCH",
        body: block,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Blocks
     * @name ReplaceBlock
     * @summary Replace an existing Block
     * @request PUT:/{username}/dashboards/{dashboard_id}/blocks/{id}
     * @secure
     */
    replaceBlock: (
      username: string,
      dashboardId: string,
      id: string,
      block: {
        block_feeds?: {
          feed_id?: string;
          group_id?: string;
        }[];
        column?: number;
        dashboard_id?: number;
        description?: string;
        key?: string;
        name?: string;
        properties?: object;
        row?: number;
        size_x?: number;
        size_y?: number;
        visual_type?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Block, void>({
        path: \`/\${username}/dashboards/\${dashboardId}/blocks/\${id}\`,
        method: "PUT",
        body: block,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Dashboards
     * @name DestroyDashboard
     * @summary Delete an existing Dashboard
     * @request DELETE:/{username}/dashboards/{id}
     * @secure
     */
    destroyDashboard: (username: string, id: string, params: RequestParams = {}) =>
      this.request<string, void>({
        path: \`/\${username}/dashboards/\${id}\`,
        method: "DELETE",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Dashboards
     * @name GetDashboard
     * @summary Returns Dashboard based on ID
     * @request GET:/{username}/dashboards/{id}
     * @secure
     */
    getDashboard: (username: string, id: string, params: RequestParams = {}) =>
      this.request<Dashboard, void>({
        path: \`/\${username}/dashboards/\${id}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Dashboards
     * @name UpdateDashboard
     * @summary Update properties of an existing Dashboard
     * @request PATCH:/{username}/dashboards/{id}
     * @secure
     */
    updateDashboard: (
      username: string,
      id: string,
      dashboard: {
        description?: string;
        key?: string;
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Dashboard, void>({
        path: \`/\${username}/dashboards/\${id}\`,
        method: "PATCH",
        body: dashboard,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Dashboards
     * @name ReplaceDashboard
     * @summary Replace an existing Dashboard
     * @request PUT:/{username}/dashboards/{id}
     * @secure
     */
    replaceDashboard: (
      username: string,
      id: string,
      dashboard: {
        description?: string;
        key?: string;
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Dashboard, void>({
        path: \`/\${username}/dashboards/\${id}\`,
        method: "PUT",
        body: dashboard,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description The Feeds endpoint returns information about the user's feeds. The response includes the latest value of each feed, and other metadata about each feed.
     *
     * @tags Feeds
     * @name AllFeeds
     * @summary All feeds for current user
     * @request GET:/{username}/feeds
     * @secure
     */
    allFeeds: (username: string, params: RequestParams = {}) =>
      this.request<Feed[], void>({
        path: \`/\${username}/feeds\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Feeds
     * @name CreateFeed
     * @summary Create a new Feed
     * @request POST:/{username}/feeds
     * @secure
     */
    createFeed: (
      username: string,
      feed: {
        description?: string;
        key?: string;
        license?: string;
        name?: string;
      },
      query?: {
        group_key?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Feed, void>({
        path: \`/\${username}/feeds\`,
        method: "POST",
        query: query,
        body: feed,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Feeds
     * @name DestroyFeed
     * @summary Delete an existing Feed
     * @request DELETE:/{username}/feeds/{feed_key}
     * @secure
     */
    destroyFeed: (username: string, feedKey: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: \`/\${username}/feeds/\${feedKey}\`,
        method: "DELETE",
        secure: true,
        ...params,
      }),

    /**
     * @description Returns feed based on the feed key
     *
     * @tags Feeds
     * @name GetFeed
     * @summary Get feed by feed key
     * @request GET:/{username}/feeds/{feed_key}
     * @secure
     */
    getFeed: (username: string, feedKey: string, params: RequestParams = {}) =>
      this.request<Feed, void>({
        path: \`/\${username}/feeds/\${feedKey}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Feeds
     * @name UpdateFeed
     * @summary Update properties of an existing Feed
     * @request PATCH:/{username}/feeds/{feed_key}
     * @secure
     */
    updateFeed: (
      username: string,
      feedKey: string,
      feed: {
        description?: string;
        key?: string;
        license?: string;
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Feed, void>({
        path: \`/\${username}/feeds/\${feedKey}\`,
        method: "PATCH",
        body: feed,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Feeds
     * @name ReplaceFeed
     * @summary Replace an existing Feed
     * @request PUT:/{username}/feeds/{feed_key}
     * @secure
     */
    replaceFeed: (
      username: string,
      feedKey: string,
      feed: {
        description?: string;
        key?: string;
        license?: string;
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Feed, void>({
        path: \`/\${username}/feeds/\${feedKey}\`,
        method: "PUT",
        body: feed,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Data
     * @name AllData
     * @summary Get all data for the given feed
     * @request GET:/{username}/feeds/{feed_key}/data
     * @secure
     */
    allData: (
      username: string,
      feedKey: string,
      query?: {
        /**
         * End time for filtering, returns records created before give time.
         * @format date-time
         */
        end_time?: string;
        /** List of Data record fields to include in response as comma separated list. Acceptable values are: \`value\`, \`lat\`, \`lon\`, \`ele\`, \`id\`, and \`created_at\`.  */
        include?: string;
        /** Limit the number of records returned. */
        limit?: number;
        /**
         * Start time for filtering, returns records created after given time.
         * @format date-time
         */
        start_time?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<DataResponse[], void>({
        path: \`/\${username}/feeds/\${feedKey}/data\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Create new data records on the given feed. **NOTE:** when feed history is on, data \`value\` size is limited to 1KB, when feed history is turned off data value size is limited to 100KB.
     *
     * @tags Data
     * @name CreateData
     * @summary Create new Data
     * @request POST:/{username}/feeds/{feed_key}/data
     * @secure
     */
    createData: (
      username: string,
      feedKey: string,
      datum: {
        /** @format dateTime */
        created_at?: string;
        ele?: string;
        epoch?: number;
        lat?: string;
        lon?: string;
        value?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Data, void>({
        path: \`/\${username}/feeds/\${feedKey}/data\`,
        method: "POST",
        body: datum,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Data
     * @name BatchCreateData
     * @summary Create multiple new Data records
     * @request POST:/{username}/feeds/{feed_key}/data/batch
     * @secure
     */
    batchCreateData: (
      username: string,
      feedKey: string,
      data: {
        /** @format dateTime */
        created_at?: string;
        ele?: string;
        epoch?: number;
        lat?: string;
        lon?: string;
        value?: string;
      }[],
      params: RequestParams = {},
    ) =>
      this.request<DataResponse[], void>({
        path: \`/\${username}/feeds/\${feedKey}/data/batch\`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description The Chart API is what we use on io.adafruit.com to populate charts over varying timespans with a consistent number of data points. The maximum number of points returned is 480. This API works by aggregating slices of time into a single value by averaging. All time-based parameters are optional, if none are given it will default to 1 hour at the finest-grained resolution possible.
     *
     * @tags Data
     * @name ChartData
     * @summary Chart data for current feed
     * @request GET:/{username}/feeds/{feed_key}/data/chart
     * @secure
     */
    chartData: (
      username: string,
      feedKey: string,
      query?: {
        /**
         * End time for filtering, returns records created before give time.
         * @format date-time
         */
        end_time?: string;
        /**
         * The number of hours the chart should cover.
         * @format int32
         */
        hours?: number;
        /**
         * A resolution size in minutes. By giving a resolution value you will get back grouped data points aggregated over resolution-sized intervals. NOTE: time span is preferred over resolution, so if you request a span of time that includes more than max limit points you may get a larger resolution than you requested. Valid resolutions are 1, 5, 10, 30, 60, and 120.
         * @format int32
         */
        resolution?: number;
        /**
         * Start time for filtering, returns records created after given time.
         * @format date-time
         */
        start_time?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** The names of the columns returned as data. */
          columns?: string[];
          /** The actual chart data. */
          data?: string[][];
          feed?: {
            id?: number;
            key?: string;
            name?: string;
          };
          parameters?: object;
        },
        void
      >({
        path: \`/\${username}/feeds/\${feedKey}/data/chart\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Get the oldest data point in the feed. This request sets the queue pointer to the beginning of the feed.
     *
     * @tags Data
     * @name FirstData
     * @summary First Data in Queue
     * @request GET:/{username}/feeds/{feed_key}/data/first
     * @secure
     */
    firstData: (
      username: string,
      feedKey: string,
      query?: {
        /** List of Data record fields to include in response as comma separated list. Acceptable values are: \`value\`, \`lat\`, \`lon\`, \`ele\`, \`id\`, and \`created_at\`.  */
        include?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<DataResponse, void>({
        path: \`/\${username}/feeds/\${feedKey}/data/first\`,
        method: "GET",
        query: query,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Get the most recent data point in the feed. This request sets the queue pointer to the end of the feed.
     *
     * @tags Data
     * @name LastData
     * @summary Last Data in Queue
     * @request GET:/{username}/feeds/{feed_key}/data/last
     * @secure
     */
    lastData: (
      username: string,
      feedKey: string,
      query?: {
        /** List of Data record fields to include in response as comma separated list. Acceptable values are: \`value\`, \`lat\`, \`lon\`, \`ele\`, \`id\`, and \`created_at\`.  */
        include?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<DataResponse, void>({
        path: \`/\${username}/feeds/\${feedKey}/data/last\`,
        method: "GET",
        query: query,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Get the next newest data point in the feed. If queue processing hasn't been started, the first data point in the feed will be returned.
     *
     * @tags Data
     * @name NextData
     * @summary Next Data in Queue
     * @request GET:/{username}/feeds/{feed_key}/data/next
     * @secure
     */
    nextData: (
      username: string,
      feedKey: string,
      query?: {
        /** List of Data record fields to include in response as comma separated list. Acceptable values are: \`value\`, \`lat\`, \`lon\`, \`ele\`, \`id\`, and \`created_at\`.  */
        include?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<DataResponse, void>({
        path: \`/\${username}/feeds/\${feedKey}/data/next\`,
        method: "GET",
        query: query,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Get the previously processed data point in the feed. NOTE: this method doesn't move the processing queue pointer.
     *
     * @tags Data
     * @name PreviousData
     * @summary Previous Data in Queue
     * @request GET:/{username}/feeds/{feed_key}/data/previous
     * @secure
     */
    previousData: (
      username: string,
      feedKey: string,
      query?: {
        /** List of Data record fields to include in response as comma separated list. Acceptable values are: \`value\`, \`lat\`, \`lon\`, \`ele\`, \`id\`, and \`created_at\`.  */
        include?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<DataResponse, void>({
        path: \`/\${username}/feeds/\${feedKey}/data/previous\`,
        method: "GET",
        query: query,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Get the most recent data point in the feed in an MQTT compatible CSV format: \`value,lat,lon,ele\`
     *
     * @tags Data
     * @name RetainData
     * @summary Last Data in MQTT CSV format
     * @request GET:/{username}/feeds/{feed_key}/data/retain
     * @secure
     */
    retainData: (username: string, feedKey: string, params: RequestParams = {}) =>
      this.request<string, void>({
        path: \`/\${username}/feeds/\${feedKey}/data/retain\`,
        method: "GET",
        secure: true,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * No description
     *
     * @tags Data
     * @name DestroyData
     * @summary Delete existing Data
     * @request DELETE:/{username}/feeds/{feed_key}/data/{id}
     * @secure
     */
    destroyData: (username: string, feedKey: string, id: string, params: RequestParams = {}) =>
      this.request<string, void>({
        path: \`/\${username}/feeds/\${feedKey}/data/\${id}\`,
        method: "DELETE",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Data
     * @name GetData
     * @summary Returns data based on feed key
     * @request GET:/{username}/feeds/{feed_key}/data/{id}
     * @secure
     */
    getData: (
      username: string,
      feedKey: string,
      id: string,
      query?: {
        /** List of Data record fields to include in response as comma separated list. Acceptable values are: \`value\`, \`lat\`, \`lon\`, \`ele\`, \`id\`, and \`created_at\`.  */
        include?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<DataResponse, void>({
        path: \`/\${username}/feeds/\${feedKey}/data/\${id}\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Data
     * @name UpdateData
     * @summary Update properties of existing Data
     * @request PATCH:/{username}/feeds/{feed_key}/data/{id}
     * @secure
     */
    updateData: (
      username: string,
      feedKey: string,
      id: string,
      datum: {
        /** @format dateTime */
        created_at?: string;
        ele?: string;
        epoch?: number;
        lat?: string;
        lon?: string;
        value?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<DataResponse, void>({
        path: \`/\${username}/feeds/\${feedKey}/data/\${id}\`,
        method: "PATCH",
        body: datum,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Data
     * @name ReplaceData
     * @summary Replace existing Data
     * @request PUT:/{username}/feeds/{feed_key}/data/{id}
     * @secure
     */
    replaceData: (
      username: string,
      feedKey: string,
      id: string,
      datum: {
        /** @format dateTime */
        created_at?: string;
        ele?: string;
        epoch?: number;
        lat?: string;
        lon?: string;
        value?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<DataResponse, void>({
        path: \`/\${username}/feeds/\${feedKey}/data/\${id}\`,
        method: "PUT",
        body: datum,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns more detailed feed record based on the feed key
     *
     * @tags Feeds
     * @name GetFeedDetails
     * @summary Get detailed feed by feed key
     * @request GET:/{username}/feeds/{feed_key}/details
     * @secure
     */
    getFeedDetails: (username: string, feedKey: string, params: RequestParams = {}) =>
      this.request<Feed, void>({
        path: \`/\${username}/feeds/\${feedKey}/details\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description The Groups endpoint returns information about the user's groups. The response includes the latest value of each feed in the group, and other metadata about the group.
     *
     * @tags Groups
     * @name AllGroups
     * @summary All groups for current user
     * @request GET:/{username}/groups
     * @secure
     */
    allGroups: (username: string, params: RequestParams = {}) =>
      this.request<Group[], void>({
        path: \`/\${username}/groups\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Groups
     * @name CreateGroup
     * @summary Create a new Group
     * @request POST:/{username}/groups
     * @secure
     */
    createGroup: (
      username: string,
      group: {
        description?: string;
        key?: string;
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Group, void>({
        path: \`/\${username}/groups\`,
        method: "POST",
        body: group,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Groups
     * @name DestroyGroup
     * @summary Delete an existing Group
     * @request DELETE:/{username}/groups/{group_key}
     * @secure
     */
    destroyGroup: (username: string, groupKey: string, params: RequestParams = {}) =>
      this.request<string, void>({
        path: \`/\${username}/groups/\${groupKey}\`,
        method: "DELETE",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Groups
     * @name GetGroup
     * @summary Returns Group based on ID
     * @request GET:/{username}/groups/{group_key}
     * @secure
     */
    getGroup: (username: string, groupKey: string, params: RequestParams = {}) =>
      this.request<Group, void>({
        path: \`/\${username}/groups/\${groupKey}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Groups
     * @name UpdateGroup
     * @summary Update properties of an existing Group
     * @request PATCH:/{username}/groups/{group_key}
     * @secure
     */
    updateGroup: (
      username: string,
      groupKey: string,
      group: {
        description?: string;
        key?: string;
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Group, void>({
        path: \`/\${username}/groups/\${groupKey}\`,
        method: "PATCH",
        body: group,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Groups
     * @name ReplaceGroup
     * @summary Replace an existing Group
     * @request PUT:/{username}/groups/{group_key}
     * @secure
     */
    replaceGroup: (
      username: string,
      groupKey: string,
      group: {
        description?: string;
        key?: string;
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Group, void>({
        path: \`/\${username}/groups/\${groupKey}\`,
        method: "PUT",
        body: group,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Groups, Feeds
     * @name AddFeedToGroup
     * @summary Add an existing Feed to a Group
     * @request POST:/{username}/groups/{group_key}/add
     * @secure
     */
    addFeedToGroup: (
      groupKey: string,
      username: string,
      query?: {
        feed_key?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Group, void>({
        path: \`/\${username}/groups/\${groupKey}/add\`,
        method: "POST",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Data
     * @name CreateGroupData
     * @summary Create new data for multiple feeds in a group
     * @request POST:/{username}/groups/{group_key}/data
     * @secure
     */
    createGroupData: (
      username: string,
      groupKey: string,
      group_feed_data: {
        /** Optional created_at timestamp which will be applied to all feed values created. */
        created_at?: string;
        /** An array of feed data records with \`key\` and \`value\` properties. */
        feeds: {
          key: string;
          value: string;
        }[];
        /** A location record with \`lat\`, \`lon\`, and [optional] \`ele\` properties. */
        location?: {
          ele?: number;
          lat: number;
          lon: number;
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<DataResponse[], void>({
        path: \`/\${username}/groups/\${groupKey}/data\`,
        method: "POST",
        body: group_feed_data,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description The Group Feeds endpoint returns information about the user's feeds. The response includes the latest value of each feed, and other metadata about each feed, but only for feeds within the given group.
     *
     * @tags Groups, Feeds
     * @name AllGroupFeeds
     * @summary All feeds for current user in a given group
     * @request GET:/{username}/groups/{group_key}/feeds
     * @secure
     */
    allGroupFeeds: (groupKey: string, username: string, params: RequestParams = {}) =>
      this.request<Feed[], void>({
        path: \`/\${username}/groups/\${groupKey}/feeds\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Feeds
     * @name CreateGroupFeed
     * @summary Create a new Feed in a Group
     * @request POST:/{username}/groups/{group_key}/feeds
     * @secure
     */
    createGroupFeed: (
      username: string,
      groupKey: string,
      feed: {
        description?: string;
        key?: string;
        license?: string;
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Feed, void>({
        path: \`/\${username}/groups/\${groupKey}/feeds\`,
        method: "POST",
        body: feed,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Data
     * @name AllGroupFeedData
     * @summary All data for current feed in a specific group
     * @request GET:/{username}/groups/{group_key}/feeds/{feed_key}/data
     * @secure
     */
    allGroupFeedData: (
      username: string,
      groupKey: string,
      feedKey: string,
      query?: {
        /**
         * End time for filtering data. Returns data created before give time.
         * @format date-time
         */
        end_time?: string;
        /** Limit the number of records returned. */
        limit?: number;
        /**
         * Start time for filtering data. Returns data created after given time.
         * @format date-time
         */
        start_time?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<DataResponse[], void>({
        path: \`/\${username}/groups/\${groupKey}/feeds/\${feedKey}/data\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Data
     * @name CreateGroupFeedData
     * @summary Create new Data in a feed belonging to a particular group
     * @request POST:/{username}/groups/{group_key}/feeds/{feed_key}/data
     * @secure
     */
    createGroupFeedData: (
      username: string,
      groupKey: string,
      feedKey: string,
      datum: {
        /** @format dateTime */
        created_at?: string;
        ele?: string;
        epoch?: number;
        lat?: string;
        lon?: string;
        value?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<DataResponse, void>({
        path: \`/\${username}/groups/\${groupKey}/feeds/\${feedKey}/data\`,
        method: "POST",
        body: datum,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Data
     * @name BatchCreateGroupFeedData
     * @summary Create multiple new Data records in a feed belonging to a particular group
     * @request POST:/{username}/groups/{group_key}/feeds/{feed_key}/data/batch
     * @secure
     */
    batchCreateGroupFeedData: (
      username: string,
      groupKey: string,
      feedKey: string,
      data: {
        /** @format dateTime */
        created_at?: string;
        ele?: string;
        epoch?: number;
        lat?: string;
        lon?: string;
        value?: string;
      }[],
      params: RequestParams = {},
    ) =>
      this.request<DataResponse[], void>({
        path: \`/\${username}/groups/\${groupKey}/feeds/\${feedKey}/data/batch\`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Groups, Feeds
     * @name RemoveFeedFromGroup
     * @summary Remove a Feed from a Group
     * @request POST:/{username}/groups/{group_key}/remove
     * @secure
     */
    removeFeedFromGroup: (
      groupKey: string,
      username: string,
      query?: {
        feed_key?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Group, void>({
        path: \`/\${username}/groups/\${groupKey}/remove\`,
        method: "POST",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Users
     * @name GetCurrentUserThrottle
     * @summary Get the user's data rate limit and current activity level.
     * @request GET:/{username}/throttle
     * @secure
     */
    getCurrentUserThrottle: (username: string, params: RequestParams = {}) =>
      this.request<
        {
          /** Actions taken inside the time window. */
          active_data_rate?: number;
          /** Max possible actions inside the time window (usually 1 minute). */
          data_rate_limit?: number;
        },
        void
      >({
        path: \`/\${username}/throttle\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description The Tokens endpoint returns information about the user's tokens.
     *
     * @tags Tokens
     * @name AllTokens
     * @summary All tokens for current user
     * @request GET:/{username}/tokens
     * @secure
     */
    allTokens: (username: string, params: RequestParams = {}) =>
      this.request<Token[], void>({
        path: \`/\${username}/tokens\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Tokens
     * @name CreateToken
     * @summary Create a new Token
     * @request POST:/{username}/tokens
     * @secure
     */
    createToken: (
      username: string,
      token: {
        token?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Token, void>({
        path: \`/\${username}/tokens\`,
        method: "POST",
        body: token,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Tokens
     * @name DestroyToken
     * @summary Delete an existing Token
     * @request DELETE:/{username}/tokens/{id}
     * @secure
     */
    destroyToken: (username: string, id: string, params: RequestParams = {}) =>
      this.request<string, void>({
        path: \`/\${username}/tokens/\${id}\`,
        method: "DELETE",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Tokens
     * @name GetToken
     * @summary Returns Token based on ID
     * @request GET:/{username}/tokens/{id}
     * @secure
     */
    getToken: (username: string, id: string, params: RequestParams = {}) =>
      this.request<Token, void>({
        path: \`/\${username}/tokens/\${id}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Tokens
     * @name UpdateToken
     * @summary Update properties of an existing Token
     * @request PATCH:/{username}/tokens/{id}
     * @secure
     */
    updateToken: (
      username: string,
      id: string,
      token: {
        token?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Token, void>({
        path: \`/\${username}/tokens/\${id}\`,
        method: "PATCH",
        body: token,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Tokens
     * @name ReplaceToken
     * @summary Replace an existing Token
     * @request PUT:/{username}/tokens/{id}
     * @secure
     */
    replaceToken: (
      username: string,
      id: string,
      token: {
        token?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Token, void>({
        path: \`/\${username}/tokens/\${id}\`,
        method: "PUT",
        body: token,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description The Triggers endpoint returns information about the user's triggers.
     *
     * @tags Triggers
     * @name AllTriggers
     * @summary All triggers for current user
     * @request GET:/{username}/triggers
     * @secure
     */
    allTriggers: (username: string, params: RequestParams = {}) =>
      this.request<Trigger[], void>({
        path: \`/\${username}/triggers\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Triggers
     * @name CreateTrigger
     * @summary Create a new Trigger
     * @request POST:/{username}/triggers
     * @secure
     */
    createTrigger: (
      username: string,
      trigger: {
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Trigger, void>({
        path: \`/\${username}/triggers\`,
        method: "POST",
        body: trigger,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Triggers
     * @name DestroyTrigger
     * @summary Delete an existing Trigger
     * @request DELETE:/{username}/triggers/{id}
     * @secure
     */
    destroyTrigger: (username: string, id: string, params: RequestParams = {}) =>
      this.request<string, void>({
        path: \`/\${username}/triggers/\${id}\`,
        method: "DELETE",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Triggers
     * @name GetTrigger
     * @summary Returns Trigger based on ID
     * @request GET:/{username}/triggers/{id}
     * @secure
     */
    getTrigger: (username: string, id: string, params: RequestParams = {}) =>
      this.request<Trigger, void>({
        path: \`/\${username}/triggers/\${id}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Triggers
     * @name UpdateTrigger
     * @summary Update properties of an existing Trigger
     * @request PATCH:/{username}/triggers/{id}
     * @secure
     */
    updateTrigger: (
      username: string,
      id: string,
      trigger: {
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Trigger, void>({
        path: \`/\${username}/triggers/\${id}\`,
        method: "PATCH",
        body: trigger,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Triggers
     * @name ReplaceTrigger
     * @summary Replace an existing Trigger
     * @request PUT:/{username}/triggers/{id}
     * @secure
     */
    replaceTrigger: (
      username: string,
      id: string,
      trigger: {
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Trigger, void>({
        path: \`/\${username}/triggers/\${id}\`,
        method: "PUT",
        body: trigger,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description The Permissions endpoint returns information about the user's permissions.
     *
     * @tags Permissions
     * @name AllPermissions
     * @summary All permissions for current user and type
     * @request GET:/{username}/{type}/{type_id}/acl
     * @secure
     */
    allPermissions: (username: string, type: string, typeId: string, params: RequestParams = {}) =>
      this.request<Permission[], void>({
        path: \`/\${username}/\${type}/\${typeId}/acl\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Permissions
     * @name CreatePermission
     * @summary Create a new Permission
     * @request POST:/{username}/{type}/{type_id}/acl
     * @secure
     */
    createPermission: (
      username: string,
      type: string,
      typeId: string,
      permission: {
        /** @default "r" */
        mode?: "r" | "w" | "rw";
        /** @default "public" */
        scope?: "secret" | "public" | "user" | "organization";
        scope_value?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Permission, void>({
        path: \`/\${username}/\${type}/\${typeId}/acl\`,
        method: "POST",
        body: permission,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Permissions
     * @name DestroyPermission
     * @summary Delete an existing Permission
     * @request DELETE:/{username}/{type}/{type_id}/acl/{id}
     * @secure
     */
    destroyPermission: (username: string, type: string, typeId: string, id: string, params: RequestParams = {}) =>
      this.request<string, void>({
        path: \`/\${username}/\${type}/\${typeId}/acl/\${id}\`,
        method: "DELETE",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Permissions
     * @name GetPermission
     * @summary Returns Permission based on ID
     * @request GET:/{username}/{type}/{type_id}/acl/{id}
     * @secure
     */
    getPermission: (username: string, type: string, typeId: string, id: string, params: RequestParams = {}) =>
      this.request<Permission, void>({
        path: \`/\${username}/\${type}/\${typeId}/acl/\${id}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Permissions
     * @name UpdatePermission
     * @summary Update properties of an existing Permission
     * @request PATCH:/{username}/{type}/{type_id}/acl/{id}
     * @secure
     */
    updatePermission: (
      username: string,
      type: string,
      typeId: string,
      id: string,
      permission: {
        /** @default "r" */
        mode?: "r" | "w" | "rw";
        /** @default "public" */
        scope?: "secret" | "public" | "user" | "organization";
        scope_value?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Permission, void>({
        path: \`/\${username}/\${type}/\${typeId}/acl/\${id}\`,
        method: "PATCH",
        body: permission,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Permissions
     * @name ReplacePermission
     * @summary Replace an existing Permission
     * @request PUT:/{username}/{type}/{type_id}/acl/{id}
     * @secure
     */
    replacePermission: (
      username: string,
      type: string,
      typeId: string,
      id: string,
      permission: {
        /** @default "r" */
        mode?: "r" | "w" | "rw";
        /** @default "public" */
        scope?: "secret" | "public" | "user" | "organization";
        scope_value?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Permission, void>({
        path: \`/\${username}/\${type}/\${typeId}/acl/\${id}\`,
        method: "PUT",
        body: permission,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'additional-properties' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Message {
  code?: number;
  text?: string;
}

export type Messages = Record<string, Message>;

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Additional properties Example
 * @version 1.0.0
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {}
"
`;

exports[`simple > 'additional-properties2' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export type Primitive = string | number | boolean | null;

export type PrimitiveMap = Record<string, Primitive>;

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title No title
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {}
"
`;

exports[`simple > 'allof-example' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export type Cat = Pet & {
  age?: number;
  hunts?: boolean;
};

export type Dog = Pet & {
  bark?: boolean;
  breed: "Dingo" | "Husky" | "Retriever" | "Shepherd";
};

export interface Pet {
  pet_type: string;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Allof Example
 * @version 1.0.0
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  pets = {
    /**
     * No description
     *
     * @name PetsPartialUpdate
     * @request PATCH:/pets
     */
    petsPartialUpdate: (data: Cat | Dog, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/pets\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'another-example' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

/** some description */
export interface Amount {
  /** some description */
  currency: Currency;
  /**
   * some description
   * @format double
   * @min 0.01
   * @max 1000000000000000
   */
  value: number;
}

/**
 * An uploaded response
 * Describes the result of uploading an image resource
 * @example {"code":0,"type":"type","message":"message"}
 */
export interface ApiResponse {
  /** @format int32 */
  code?: number;
  message?: string;
  type?: string;
}

/**
 * Pet category
 * A category for a pet
 * @example {"name":"name","id":6}
 */
export interface Category {
  /** @format int64 */
  id?: number;
  name?: string;
}

/**
 * some description
 * @pattern ^[A-Z]{3,3}$
 */
export type Currency = string;

/**
 * Pet Order
 * An order for a pets from the pet store
 * @example {"petId":6,"quantity":1,"id":0,"shipDate":"2000-01-23T04:56:07.000+00:00","complete":false,"status":"placed"}
 */
export interface Order {
  /** @default false */
  complete?: boolean;
  /** @format int64 */
  id?: number;
  /** @format int64 */
  petId?: number;
  /** @format int32 */
  quantity?: number;
  /** @format date-time */
  shipDate?: string;
  /** Order Status */
  status?: "placed" | "approved" | "delivered" | null;
}

/**
 * a Pet
 * A pet for sale in the pet store
 * @example {"photoUrls":["photoUrls","photoUrls"],"name":"doggie","id":0,"category":{"name":"name","id":6},"tags":[{"name":"name","id":1},{"name":"name","id":1}],"status":"available"}
 */
export interface Pet {
  /** A category for a pet */
  category?: Category;
  /** @format int64 */
  id?: number;
  /** @example "doggie" */
  name: string;
  photoUrls: string[];
  /** pet status in the store */
  status?: "available" | "pending" | "sold";
  tags?: Tag[];
}

export enum PetIds {
  Value10 = 10,
  Value20 = 20,
  Value30 = 30,
  Value40 = 40,
}

export enum PetIdsWithWrongEnum {
  Value10 = 10,
  Value20 = 20,
  Value30 = 30,
  Value40 = 40,
}

export enum PetNames {
  FluffyHero = "Fluffy Hero",
  PiggyPo = "Piggy Po",
  SwaggerTypescriptApi = "Swagger Typescript Api",
  UPPER_CASE = "UPPER_CASE",
}

/**
 * Pet Tag
 * A tag for a pet
 * @example {"name":"name","id":1}
 */
export interface Tag {
  /** @format int64 */
  id?: number;
  name?: string;
}

/**
 * a User
 * A User who is purchasing from the pet store
 * @example {"firstName":"firstName","lastName":"lastName","password":"password","userStatus":6,"phone":"phone","id":0,"email":"email","username":"username"}
 */
export interface User {
  email?: string;
  firstName?: string;
  /** @format int64 */
  id?: number;
  lastName?: string;
  password?: string;
  phone?: string;
  /**
   * User Status
   * @format int32
   */
  userStatus?: number;
  username?: string;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "http://petstore.swagger.io/v2";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Swagger Petstore
 * @version 1.0.0
 * @license Apache-2.0 (http://www.apache.org/licenses/LICENSE-2.0.html)
 * @termsOfService http://swagger.io/terms/
 * @baseUrl http://petstore.swagger.io/v2
 * @externalDocs http://swagger.io
 * @contact <apiteam@swagger.io>
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  pet = {
    /**
     * No description
     *
     * @tags pet
     * @name AddPet
     * @summary Add a new pet to the store
     * @request POST:/pet
     * @secure
     */
    addPet: (body: Pet, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/pet\`,
        method: "POST",
        body: body,
        secure: true,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * No description
     *
     * @tags pet
     * @name UpdatePet
     * @summary Update an existing pet
     * @request PUT:/pet
     * @secure
     */
    updatePet: (body: Pet, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/pet\`,
        method: "PUT",
        body: body,
        secure: true,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Multiple status values can be provided with comma separated strings
     *
     * @tags pet
     * @name FindPetsByStatus
     * @summary Finds Pets by status
     * @request GET:/pet/findByStatus
     * @secure
     */
    findPetsByStatus: (
      query: {
        /** Status values that need to be considered for filter */
        status: ("available" | "pending" | "sold")[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Pet[], void>({
        path: \`/pet/findByStatus\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags pet
     * @name SingleFormUrlEncodedRequest
     * @summary summary
     * @request POST:/pet/single-form-url-encoded
     */
    singleFormUrlEncodedRequest: (
      data: {
        /** @format string */
        param1: string;
        param2: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: \`/pet/single-form-url-encoded\`,
        method: "POST",
        body: data,
        type: ContentType.UrlEncoded,
        ...params,
      }),

    /**
     * No description
     *
     * @tags pet
     * @name FormUrlEncodedRequest
     * @summary summary
     * @request POST:/pet/form-url-encoded
     */
    formUrlEncodedRequest: (
      data: {
        /** @format string */
        param1: string;
        param2: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: \`/pet/form-url-encoded\`,
        method: "POST",
        body: data,
        type: ContentType.UrlEncoded,
        ...params,
      }),

    /**
     * No description
     *
     * @tags pet
     * @name FormUrlEncodedRequest2
     * @summary summary
     * @request POST:/pet/end-form-url-encoded
     * @originalName formUrlEncodedRequest
     * @duplicate
     */
    formUrlEncodedRequest2: (
      data: {
        /** @format string */
        param1: string;
        param2: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: \`/pet/end-form-url-encoded\`,
        method: "POST",
        body: data,
        type: ContentType.UrlEncoded,
        ...params,
      }),

    /**
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @tags pet
     * @name FindPetsByTags
     * @summary Finds Pets by tags
     * @request GET:/pet/findByTags
     * @deprecated
     * @secure
     */
    findPetsByTags: (
      query: {
        /** Tags to filter by */
        tags: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Pet[], void>({
        path: \`/pet/findByTags\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a single pet
     *
     * @tags pet
     * @name GetPetById
     * @summary Find pet by ID
     * @request GET:/pet/{petId}
     * @secure
     */
    getPetById: (petId: number, params: RequestParams = {}) =>
      this.request<Pet, void>({
        path: \`/pet/\${petId}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags pet
     * @name UpdatePetWithForm
     * @summary Updates a pet in the store with form data
     * @request POST:/pet/{petId}
     * @secure
     */
    updatePetWithForm: (
      petId: number,
      data: {
        /** Updated name of the pet */
        name?: string;
        /** Updated status of the pet */
        status?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<any, void>({
        path: \`/pet/\${petId}\`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.FormData,
        ...params,
      }),

    /**
     * No description
     *
     * @tags pet
     * @name DeletePet
     * @summary Deletes a pet
     * @request DELETE:/pet/{petId}
     * @secure
     */
    deletePet: (petId: number, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/pet/\${petId}\`,
        method: "DELETE",
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags pet
     * @name UploadFile
     * @summary uploads an image
     * @request POST:/pet/{petId}/uploadImage
     * @secure
     */
    uploadFile: (
      petId: number,
      data: {
        /** Additional data to pass to server */
        additionalMetadata?: string;
        /** file to upload */
        file?: File;
      },
      params: RequestParams = {},
    ) =>
      this.request<ApiResponse, any>({
        path: \`/pet/\${petId}/uploadImage\`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.FormData,
        format: "json",
        ...params,
      }),
  };
  store = {
    /**
     * @description Returns a map of status codes to quantities
     *
     * @tags store
     * @name GetInventory
     * @summary Returns pet inventories by status
     * @request GET:/store/inventory
     * @secure
     */
    getInventory: (params: RequestParams = {}) =>
      this.request<Record<string, number>, any>({
        path: \`/store/inventory\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags store
     * @name PlaceOrder
     * @summary Place an order for a pet
     * @request POST:/store/order
     */
    placeOrder: (body: Order, params: RequestParams = {}) =>
      this.request<Order, void>({
        path: \`/store/order\`,
        method: "POST",
        body: body,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
     *
     * @tags store
     * @name GetOrderById
     * @summary Find purchase order by ID
     * @request GET:/store/order/{orderId}
     */
    getOrderById: (orderId: number, params: RequestParams = {}) =>
      this.request<Order, void>({
        path: \`/store/order/\${orderId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     *
     * @tags store
     * @name DeleteOrder
     * @summary Delete purchase order by ID
     * @request DELETE:/store/order/{orderId}
     */
    deleteOrder: (orderId: string, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/store/order/\${orderId}\`,
        method: "DELETE",
        ...params,
      }),
  };
  user = {
    /**
     * @description This can only be done by the logged in user.
     *
     * @tags user
     * @name CreateUser
     * @summary Create user
     * @request POST:/user
     */
    createUser: (body: User, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/user\`,
        method: "POST",
        body: body,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * No description
     *
     * @tags user
     * @name CreateUsersWithArrayInput
     * @summary Creates list of users with given input array
     * @request POST:/user/createWithArray
     */
    createUsersWithArrayInput: (body: User[], params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/user/createWithArray\`,
        method: "POST",
        body: body,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * No description
     *
     * @tags user
     * @name CreateUsersWithListInput
     * @summary Creates list of users with given input array
     * @request POST:/user/createWithList
     */
    createUsersWithListInput: (body: User[], params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/user/createWithList\`,
        method: "POST",
        body: body,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * No description
     *
     * @tags user
     * @name LoginUser
     * @summary Logs user into the system
     * @request GET:/user/login
     */
    loginUser: (
      query: {
        /** The password for login in clear text */
        password: string;
        /** The user name for login */
        username: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Currency, void>({
        path: \`/user/login\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags user
     * @name LogoutUser
     * @summary Logs out current logged in user session
     * @request GET:/user/logout
     */
    logoutUser: (params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/user/logout\`,
        method: "GET",
        ...params,
      }),

    /**
     * No description
     *
     * @tags user
     * @name GetUserByName
     * @summary Get user by user name
     * @request GET:/user/{username}
     */
    getUserByName: (username: string, params: RequestParams = {}) =>
      this.request<User, void>({
        path: \`/user/\${username}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description This can only be done by the logged in user.
     *
     * @tags user
     * @name UpdateUser
     * @summary Updated user
     * @request PUT:/user/{username}
     */
    updateUser: (username: string, body: User, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/user/\${username}\`,
        method: "PUT",
        body: body,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description This can only be done by the logged in user.
     *
     * @tags user
     * @name DeleteUser
     * @summary Delete user
     * @request DELETE:/user/{username}
     */
    deleteUser: (username: string, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/user/\${username}\`,
        method: "DELETE",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'another-schema' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Bar {
  A?: string;
  /** @format int32 */
  B: number;
  Baz?: Baz;
  /** @format date-time */
  C: string;
}

export interface Baz {
  Color: Color;
  /** @format decimal */
  D: number;
}

export enum Color {
  RED = 0,
  GREEN = 1,
  BLUE = 2,
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title No title
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  api = {
    /**
     * No description
     *
     * @tags Foo
     * @name FooGetBarDescriptions
     * @request GET:/api/Foo/GetBarDescriptions
     */
    fooGetBarDescriptions: (params: RequestParams = {}) =>
      this.request<string[] | null, any>({
        path: \`/api/Foo/GetBarDescriptions\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Foo
     * @name FooGetBar
     * @request GET:/api/Foo/GetBar
     */
    fooGetBar: (
      query: {
        /** @format int32 */
        id: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Bar | null, any>({
        path: \`/api/Foo/GetBar\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Foo
     * @name FooSetBar
     * @request POST:/api/Foo/SetBar
     */
    fooSetBar: (value: Bar | null, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/api/Foo/SetBar\`,
        method: "POST",
        body: value,
        type: ContentType.Json,
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'anyof-example' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface PetByAge {
  age: number;
  nickname?: string;
}

export interface PetByType {
  hunts?: boolean;
  pet_type: "Cat" | "Dog";
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Anyof Example
 * @version 1.0.0
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  pets = {
    /**
     * No description
     *
     * @name PetsPartialUpdate
     * @request PATCH:/pets
     */
    petsPartialUpdate: (data: PetByAge | PetByType, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/pets\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'api-with-examples' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Simple API overview
 * @version 2.0.0
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  /**
   * No description
   *
   * @name ListVersionsv2
   * @summary List API versions
   * @request GET:/
   */
  listVersionsv2 = (params: RequestParams = {}) =>
    this.request<void, void>({
      path: \`/\`,
      method: "GET",
      format: "json",
      ...params,
    });

  v2 = {
    /**
     * No description
     *
     * @name GetVersionDetailsv2
     * @summary Show API version details
     * @request GET:/v2
     */
    getVersionDetailsv2: (params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/v2\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'api-with-examples' 2`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Simple API overview
 * @version v2
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  /**
   * @description multiple line 1 multiple line 2 multiple line 3
   *
   * @name ListVersionsv2
   * @summary List API versions
   * @request GET:/
   */
  listVersionsv2 = (params: RequestParams = {}) =>
    this.request<void, void>({
      path: \`/\`,
      method: "GET",
      format: "json",
      ...params,
    });

  v2 = {
    /**
     * No description
     *
     * @name GetVersionDetailsv2
     * @summary Show API version details
     * @request GET:/v2
     */
    getVersionDetailsv2: (params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/v2\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  withCharset = {
    /**
     * @description consumes contains charset
     *
     * @name WithCharset
     * @summary consumes contains charset
     * @request POST:/with-charset/
     */
    withCharset: (someParm: string, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/with-charset/\`,
        method: "POST",
        body: someParm,
        type: ContentType.Json,
        ...params,
      }),
  };
  consumesPlainText = {
    /**
     * @description consumes plain text
     *
     * @name ConsumesPlainText
     * @summary consumes plain text
     * @request POST:/consumes-plain-text/
     */
    consumesPlainText: (someParm: string, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/consumes-plain-text/\`,
        method: "POST",
        body: someParm,
        type: ContentType.Text,
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'authentiq' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

/** Authentiq ID in JWT format, self-signed. */
export interface AuthentiqID {
  /** device token for push messages */
  devtoken?: string;
  /** UUID and public signing key */
  sub: string;
}

/** Claim in JWT format, self- or issuer-signed.  */
export interface Claims {
  email?: string;
  phone?: string;
  /** claim scope */
  scope: string;
  /** UUID */
  sub: string;
  type?: string;
}

export interface Error {
  detail?: string;
  error: number;
  title?: string;
  /** unique uri for this error */
  type?: string;
}

/** PushToken in JWT format, self-signed.  */
export interface PushToken {
  /** audience (URI) */
  aud: string;
  exp?: number;
  iat?: number;
  /** issuer (URI) */
  iss: string;
  nbf: number;
  /** UUID and public signing key */
  sub: string;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "https://6-dot-authentiqio.appspot.com";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Authentiq
 * @version 6
 * @license Apache 2.0 (http://www.apache.org/licenses/LICENSE-2.0.html)
 * @termsOfService http://authentiq.com/terms/
 * @baseUrl https://6-dot-authentiqio.appspot.com
 * @contact Authentiq team <hello@authentiq.com> (http://authentiq.io/support)
 *
 * Strong authentication, without the passwords.
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  wrongPathParams1 = {
    /**
     * @description DDD
     *
     * @tags key, delete
     * @name WrongPathParams1
     * @request DELETE:/wrong-path-params1/{pathParam1}/{path_param2}/{path_param3}/:pathParam4
     */
    wrongPathParams1: (
      pathParam1: string,
      pathParam2: string,
      pathParam3: string,
      pathParam4: string,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/wrong-path-params1/\${pathParam1}/\${pathParam2}/\${pathParam3}/\${pathParam4}\`,
        method: "DELETE",
        ...params,
      }),
  };
  wrongPathParams2 = {
    /**
     * @description DDD
     *
     * @tags key, delete
     * @name WrongPathParams2
     * @request DELETE:/wrong-path-params2
     */
    wrongPathParams2: (pathParam1: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/wrong-path-params2\`,
        method: "DELETE",
        ...params,
      }),
  };
  key = {
    /**
     * @description Revoke an Authentiq ID using email & phone. If called with \`email\` and \`phone\` only, a verification code will be sent by email. Do a second call adding \`code\` to complete the revocation.
     *
     * @tags key, delete
     * @name KeyRevokeNosecret
     * @request DELETE:/key
     */
    keyRevokeNosecret: (
      query: {
        /** verification code sent by email */
        code?: string;
        /** primary email associated to Key (ID) */
        email: string;
        /** primary phone number, international representation */
        phone: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** pending or done */
          status?: string;
        },
        Error
      >({
        path: \`/key\`,
        method: "DELETE",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Register a new ID \`JWT(sub, devtoken)\` v5: \`JWT(sub, pk, devtoken, ...)\` See: https://github.com/skion/authentiq/wiki/JWT-Examples
     *
     * @tags key, post
     * @name KeyRegister
     * @request POST:/key
     */
    keyRegister: (body: AuthentiqID, params: RequestParams = {}) =>
      this.request<
        {
          /** revoke key */
          secret?: string;
          /** registered */
          status?: string;
        },
        Error
      >({
        path: \`/key\`,
        method: "POST",
        body: body,
        format: "json",
        ...params,
      }),

    /**
     * @description Revoke an Identity (Key) with a revocation secret
     *
     * @tags key, delete
     * @name KeyRevoke
     * @request DELETE:/key/{PK}
     */
    keyRevoke: (
      pk: string,
      query: {
        /** revokation secret */
        secret: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** done */
          status?: string;
        },
        Error
      >({
        path: \`/key/\${pk}\`,
        method: "DELETE",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get public details of an Authentiq ID.
     *
     * @tags key, get
     * @name GetKey
     * @request GET:/key/{PK}
     */
    getKey: (pk: string, params: RequestParams = {}) =>
      this.request<
        {
          /** @format date-time */
          since?: string;
          status?: string;
          /** base64safe encoded public signing key */
          sub?: string;
        },
        Error
      >({
        path: \`/key/\${pk}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description HEAD info on Authentiq ID
     *
     * @tags key, head
     * @name HeadKey
     * @request HEAD:/key/{PK}
     */
    headKey: (pk: string, params: RequestParams = {}) =>
      this.request<void, Error>({
        path: \`/key/\${pk}\`,
        method: "HEAD",
        ...params,
      }),

    /**
     * @description update properties of an Authentiq ID. (not operational in v4; use PUT for now) v5: POST issuer-signed email & phone scopes in a self-signed JWT See: https://github.com/skion/authentiq/wiki/JWT-Examples
     *
     * @tags key, post
     * @name KeyUpdate
     * @request POST:/key/{PK}
     */
    keyUpdate: (pk: string, body: AuthentiqID, params: RequestParams = {}) =>
      this.request<
        {
          /** confirmed */
          status?: string;
        },
        Error
      >({
        path: \`/key/\${pk}\`,
        method: "POST",
        body: body,
        format: "json",
        ...params,
      }),

    /**
     * @description Update Authentiq ID by replacing the object. v4: \`JWT(sub,email,phone)\` to bind email/phone hash; v5: POST issuer-signed email & phone scopes and PUT to update registration \`JWT(sub, pk, devtoken, ...)\` See: https://github.com/skion/authentiq/wiki/JWT-Examples
     *
     * @tags key, put
     * @name KeyBind
     * @request PUT:/key/{PK}
     */
    keyBind: (pk: string, body: AuthentiqID, params: RequestParams = {}) =>
      this.request<
        {
          /** confirmed */
          status?: string;
        },
        Error
      >({
        path: \`/key/\${pk}\`,
        method: "PUT",
        body: body,
        format: "json",
        ...params,
      }),
  };
  login = {
    /**
     * @description push sign-in request See: https://github.com/skion/authentiq/wiki/JWT-Examples
     *
     * @tags login, post
     * @name PushLoginRequest
     * @request POST:/login
     */
    pushLoginRequest: (
      query: {
        /** URI App will connect to */
        callback: string;
      },
      body: PushToken,
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** sent */
          status?: string;
        },
        Error
      >({
        path: \`/login\`,
        method: "POST",
        query: query,
        body: body,
        format: "json",
        ...params,
      }),
  };
  scope = {
    /**
     * @description scope verification request See: https://github.com/skion/authentiq/wiki/JWT-Examples
     *
     * @tags scope, post
     * @name SignRequest
     * @request POST:/scope
     */
    signRequest: (
      body: Claims,
      query?: {
        /** test only mode, using test issuer */
        test?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /** 20-character ID */
          job?: string;
          /** waiting */
          status?: string;
        },
        Error
      >({
        path: \`/scope\`,
        method: "POST",
        query: query,
        body: body,
        format: "json",
        ...params,
      }),

    /**
     * @description delete a verification job
     *
     * @tags scope, delete
     * @name SignDelete
     * @request DELETE:/scope/{job}
     */
    signDelete: (job: string, params: RequestParams = {}) =>
      this.request<
        {
          /** done */
          status?: string;
        },
        Error
      >({
        path: \`/scope/\${job}\`,
        method: "DELETE",
        format: "json",
        ...params,
      }),

    /**
     * @description get the status / current content of a verification job
     *
     * @tags scope, get
     * @name SignRetrieve
     * @request GET:/scope/{job}
     */
    signRetrieve: (job: string, params: RequestParams = {}) =>
      this.request<
        {
          exp?: number;
          field?: string;
          /** base64safe encoded public signing key */
          sub?: string;
        },
        Error
      >({
        path: \`/scope/\${job}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description HEAD to get the status of a verification job
     *
     * @tags scope, head
     * @name SignRetrieveHead
     * @request HEAD:/scope/{job}
     */
    signRetrieveHead: (job: string, params: RequestParams = {}) =>
      this.request<void, Error>({
        path: \`/scope/\${job}\`,
        method: "HEAD",
        ...params,
      }),

    /**
     * @description this is a scope confirmation
     *
     * @tags scope, post
     * @name SignConfirm
     * @request POST:/scope/{job}
     */
    signConfirm: (job: string, params: RequestParams = {}) =>
      this.request<
        {
          /** confirmed */
          status?: string;
        },
        Error
      >({
        path: \`/scope/\${job}\`,
        method: "POST",
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description authority updates a JWT with its signature See: https://github.com/skion/authentiq/wiki/JWT-Examples
     *
     * @tags scope, put
     * @name SignUpdate
     * @request PUT:/scope/{job}
     */
    signUpdate: (job: string, params: RequestParams = {}) =>
      this.request<
        {
          /** result is JWT or JSON?? */
          jwt?: string;
          /** ready */
          status?: string;
        },
        Error
      >({
        path: \`/scope/\${job}\`,
        method: "PUT",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'callback-example' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Callback Example
 * @version 1.0.0
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  streams = {
    /**
     * @description subscribes a client to receive out-of-band data
     *
     * @name StreamsCreate
     * @request POST:/streams
     */
    streamsCreate: (
      query: {
        /**
         * the location where data will be sent.  Must be network accessible
         * by the source server
         * @format uri
         * @example "https://tonys-server.com"
         */
        callbackUrl: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          /**
           * this unique identifier allows management of the subscription
           * @example "2531329f-fb09-4ef7-887e-84e648214436"
           */
          subscriptionId: string;
        },
        any
      >({
        path: \`/streams\`,
        method: "POST",
        query: query,
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'components-responses' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Title
 * @version latest
 *
 * Description
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  api = {
    /**
     * No description
     *
     * @name GetData
     * @request GET:/api
     */
    getData: (params: RequestParams = {}) =>
      this.request<
        {
          data?: string;
        },
        any
      >({
        path: \`/api\`,
        method: "GET",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'enums' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

/** @format int32 */
export enum EmptyEnum {
  Bla = "Bla",
  Blabla = "Blabla",
  Boiler = "Boiler",
}

/** @format int32 */
export enum EnumWithMoreNames {
  Bla = 1,
  Blabla = "Blabla",
  Boiler = "Boiler",
}

export enum OnlyEnumNames {
  Bla = "Bla",
  Blabla = "Blabla",
  Boiler = "Boiler",
}

/** @format int32 */
export enum SomeInterestEnum {
  Bla = 6,
  Blabla = 2,
  Boiler = 1,
  Bbabab = 67,
  Nowadays = 88,
  FAIL = 122,
  Vvvvv = 88,
  ASdasAS = 0,
  ASDsacZX = 213,
  Zook = 12378,
  EnumMm = 123125,
  VCsa = 32452,
  Yuuu = 1111,
  ASddd = 66666,
  ASdsdsa = "ASdsdsa",
  ASDds = "ASDds",
  HSDFDS = "HSDFDS",
}

export enum StringCompleteEnums {
  Bla = "foo",
  Blabla = "bar",
  Boiler = "baz",
}

export enum StringEnums {
  Bla = "foo",
  Blabla = "bar",
  Boiler = "Boiler",
}

export enum StringOnlyEnumNames {
  Bla = "Bla",
  Blabla = "Blabla",
  Boiler = "Boiler",
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "https://ffff.com";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title No title
 * @baseUrl https://ffff.com
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {}
"
`;

exports[`simple > 'example1' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

/**
 * some description
 * @pattern ^[A-Z]{3,3}$
 */
export type Currency = string;

/** A TDE certificate that can be uploaded into a server. */
export type TdeCertificate = {
  /** Resource ID. */
  id?: string;
  /** Resource name. */
  name?: string;
  /** Resource type. */
  type?: string;
} & {
  /** Resource properties. */
  properties?: TdeCertificateProperties;
};

/** A TDE certificate that can be uploaded into a server. */
export type TdeCertificate2 = {
  /** Resource ID. */
  id?: string;
  /** Resource name. */
  name?: string;
  /** Resource type. */
  type?: string;
};

/** Properties of a TDE certificate. */
export interface TdeCertificateProperties {
  /** The certificate password. */
  certPassword?: string;
  /** The base64 encoded certificate private blob. */
  privateBlob: string;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "https://management.azure.com";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title SqlManagementClient
 * @version 2017-10-01-preview
 * @baseUrl https://management.azure.com
 *
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  subscriptions = {
    /**
     * @description Creates a TDE certificate for a given server.
     *
     * @tags ManagedInstanceTdeCertificates
     * @name ManagedInstanceTdeCertificatesCreate
     * @request POST:/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/tdeCertificates
     */
    managedInstanceTdeCertificatesCreate: (
      resourceGroupName: string,
      managedInstanceName: string,
      subscriptionId: string,
      query: {
        /** The API version to use for the request. */
        "api-version": string;
      },
      parameters: TdeCertificate,
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: \`/subscriptions/\${subscriptionId}/resourceGroups/\${resourceGroupName}/providers/Microsoft.Sql/managedInstances/\${managedInstanceName}/tdeCertificates\`,
        method: "POST",
        query: query,
        body: parameters,
        type: ContentType.Json,
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'explode-param-3' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Floop {
  info?: string;
}

export interface QueryParams {
  /**
   * Page size
   * @format int32
   * @min 0
   */
  "page-size"?: number | null;
  /**
   * Page number
   * @format int32
   * @min 0
   */
  page?: number | null;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title API
 * @version 0.1
 *
 * Documentation
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  user = {
    /**
     * No description
     *
     * @name CreateFile
     * @summary Some summary
     * @request POST:/{user}/foos
     */
    createFile: (
      user: string,
      data: {
        /** @default "" */
        meme: string;
        memeType?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Floop, any>({
        path: \`/\${user}/foos\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),
  };
  something = {
    /**
     * No description
     *
     * @name Gets
     * @request GET:/something/
     */
    gets: (
      query?: {
        params?: QueryParams;
      },
      params: RequestParams = {},
    ) =>
      this.request<any, any>({
        path: \`/something/\`,
        method: "GET",
        query: query,
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'file-formdata-example' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Title
 * @version v0.1
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  uploadFile = {
    /**
     * No description
     *
     * @tags tag
     * @name UploadFile
     * @summary Upload file
     * @request POST:/upload-file
     */
    uploadFile: (
      data: {
        /**
         * File description
         * @format binary
         */
        file?: File;
        /** Boolean flag */
        someFlag?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/upload-file\`,
        method: "POST",
        body: data,
        type: ContentType.FormData,
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'full-swagger-scheme' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface ActionsBillingUsage {
  /** The amount of free GitHub Actions minutes available. */
  included_minutes: number;
  minutes_used_breakdown: {
    /** Total minutes used on macOS runner machines. */
    MACOS?: number;
    /** Total minutes used on Ubuntu runner machines. */
    UBUNTU?: number;
    /** Total minutes used on Windows runner machines. */
    WINDOWS?: number;
  };
  /** The sum of the free and paid GitHub Actions minutes used. */
  total_minutes_used: number;
  /** The total paid GitHub Actions minutes used. */
  total_paid_minutes_used: number;
}

/** Whether GitHub Actions is enabled on the repository. */
export type ActionsEnabled = boolean;

export interface ActionsEnterprisePermissions {
  /** The permissions policy that controls the actions that are allowed to run. Can be one of: \`all\`, \`local_only\`, or \`selected\`. */
  allowed_actions: AllowedActions;
  /** The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: \`all\`, \`none\`, or \`selected\`. */
  enabled_organizations: EnabledOrganizations;
  /** The API URL to use to get or set the actions that are allowed to run, when \`allowed_actions\` is set to \`selected\`. */
  selected_actions_url?: SelectedActionsUrl;
  /** The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when \`enabled_organizations\` is set to \`selected\`. */
  selected_organizations_url?: string;
}

export interface ActionsOrganizationPermissions {
  /** The permissions policy that controls the actions that are allowed to run. Can be one of: \`all\`, \`local_only\`, or \`selected\`. */
  allowed_actions: AllowedActions;
  /** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: \`all\`, \`none\`, or \`selected\`. */
  enabled_repositories: EnabledRepositories;
  /** The API URL to use to get or set the actions that are allowed to run, when \`allowed_actions\` is set to \`selected\`. */
  selected_actions_url?: SelectedActionsUrl;
  /** The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when \`enabled_repositories\` is set to \`selected\`. */
  selected_repositories_url?: string;
}

/**
 * ActionsPublicKey
 * The public key used for setting Actions Secrets.
 */
export interface ActionsPublicKey {
  /** @example "2011-01-26T19:01:12Z" */
  created_at?: string;
  /** @example 2 */
  id?: number;
  /**
   * The Base64 encoded public key.
   * @example "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="
   */
  key: string;
  /**
   * The identifier for the key.
   * @example "1234567"
   */
  key_id: string;
  /** @example "ssh-rsa AAAAB3NzaC1yc2EAAA" */
  title?: string;
  /** @example "https://api.github.com/user/keys/2" */
  url?: string;
}

export interface ActionsRepositoryPermissions {
  /** The permissions policy that controls the actions that are allowed to run. Can be one of: \`all\`, \`local_only\`, or \`selected\`. */
  allowed_actions: AllowedActions;
  /** Whether GitHub Actions is enabled on the repository. */
  enabled: ActionsEnabled;
  /** The API URL to use to get or set the actions that are allowed to run, when \`allowed_actions\` is set to \`selected\`. */
  selected_actions_url?: SelectedActionsUrl;
}

/**
 * Actions Secret
 * Set secrets for GitHub Actions.
 */
export interface ActionsSecret {
  /** @format date-time */
  created_at: string;
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   */
  name: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Actor
 * Actor
 */
export interface Actor {
  /** @format uri */
  avatar_url: string;
  display_login?: string;
  gravatar_id: string | null;
  id: number;
  login: string;
  /** @format uri */
  url: string;
}

/**
 * The time that the alert was created in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
 * @format date-time
 */
export type AlertCreatedAt = string;

/**
 * The GitHub URL of the alert resource.
 * @format uri
 */
export type AlertHtmlUrl = string;

/** The security alert number. */
export type AlertNumber = number;

/**
 * The REST API URL of the alert resource.
 * @format uri
 */
export type AlertUrl = string;

/** The permissions policy that controls the actions that are allowed to run. Can be one of: \`all\`, \`local_only\`, or \`selected\`. */
export enum AllowedActions {
  All = "all",
  LocalOnly = "local_only",
  Selected = "selected",
}

/**
 * Api Overview
 * Api Overview
 */
export interface ApiOverview {
  /** @example ["13.64.0.0/16","13.65.0.0/16"] */
  actions?: string[];
  /** @example ["127.0.0.1/32"] */
  api?: string[];
  /** @example ["127.0.0.1/32"] */
  git?: string[];
  /** @example ["127.0.0.1/32"] */
  hooks?: string[];
  /** @example ["54.158.161.132","54.226.70.38"] */
  importer?: string[];
  /** @example ["192.30.252.153/32","192.30.252.154/32"] */
  pages?: string[];
  ssh_key_fingerprints?: {
    SHA256_DSA?: string;
    SHA256_RSA?: string;
  };
  /** @example true */
  verifiable_password_authentication: boolean;
  /** @example ["127.0.0.1/32"] */
  web?: string[];
}

/**
 * App Permissions
 * The permissions granted to the user-to-server access token.
 * @example {"contents":"read","issues":"read","deployments":"write","single_file":"read"}
 */
export interface AppPermissions {
  /** The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: \`read\` or \`write\`. */
  actions?: "read" | "write";
  /** The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: \`read\` or \`write\`. */
  administration?: "read" | "write";
  /** The level of permission to grant the access token for checks on code. Can be one of: \`read\` or \`write\`. */
  checks?: "read" | "write";
  /** The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: \`read\` or \`write\`. */
  content_references?: "read" | "write";
  /** The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: \`read\` or \`write\`. */
  contents?: "read" | "write";
  /** The level of permission to grant the access token for deployments and deployment statuses. Can be one of: \`read\` or \`write\`. */
  deployments?: "read" | "write";
  /** The level of permission to grant the access token for managing repository environments. Can be one of: \`read\` or \`write\`. */
  environments?: "read" | "write";
  /** The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: \`read\` or \`write\`. */
  issues?: "read" | "write";
  /** The level of permission to grant the access token for organization teams and members. Can be one of: \`read\` or \`write\`. */
  members?: "read" | "write";
  /** The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: \`read\` or \`write\`. */
  metadata?: "read" | "write";
  /** The level of permission to grant the access token to manage access to an organization. Can be one of: \`read\` or \`write\`. */
  organization_administration?: "read" | "write";
  /** The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: \`read\` or \`write\`. */
  organization_hooks?: "read" | "write";
  /** The level of permission to grant the access token for viewing an organization's plan. Can be one of: \`read\`. */
  organization_plan?: "read";
  /** The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: \`read\`, \`write\`, or \`admin\`. */
  organization_projects?: "read" | "write" | "admin";
  /** The level of permission to grant the access token to manage organization secrets. Can be one of: \`read\` or \`write\`. */
  organization_secrets?: "read" | "write";
  /** The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: \`read\` or \`write\`. */
  organization_self_hosted_runners?: "read" | "write";
  /** The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: \`read\` or \`write\`. */
  organization_user_blocking?: "read" | "write";
  /** The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: \`read\` or \`write\`. */
  packages?: "read" | "write";
  /** The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: \`read\` or \`write\`. */
  pages?: "read" | "write";
  /** The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: \`read\` or \`write\`. */
  pull_requests?: "read" | "write";
  /** The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: \`read\` or \`write\`. */
  repository_hooks?: "read" | "write";
  /** The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: \`read\`, \`write\`, or \`admin\`. */
  repository_projects?: "read" | "write" | "admin";
  /** The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: \`read\` or \`write\`. */
  secret_scanning_alerts?: "read" | "write";
  /** The level of permission to grant the access token to manage repository secrets. Can be one of: \`read\` or \`write\`. */
  secrets?: "read" | "write";
  /** The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: \`read\` or \`write\`. */
  security_events?: "read" | "write";
  /** The level of permission to grant the access token to manage just a single file. Can be one of: \`read\` or \`write\`. */
  single_file?: "read" | "write";
  /** The level of permission to grant the access token for commit statuses. Can be one of: \`read\` or \`write\`. */
  statuses?: "read" | "write";
  /** The level of permission to grant the access token to manage team discussions and related comments. Can be one of: \`read\` or \`write\`. */
  team_discussions?: "read" | "write";
  /** The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: \`read\`. */
  vulnerability_alerts?: "read";
  /** The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: \`write\`. */
  workflows?: "write";
}

/**
 * Application Grant
 * The authorization associated with an OAuth Access.
 */
export interface ApplicationGrant {
  app: {
    client_id: string;
    name: string;
    /** @format uri */
    url: string;
  };
  /**
   * @format date-time
   * @example "2011-09-06T17:26:27Z"
   */
  created_at: string;
  /** @example 1 */
  id: number;
  /** @example ["public_repo"] */
  scopes: string[];
  /**
   * @format date-time
   * @example "2011-09-06T20:39:23Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/applications/grants/1"
   */
  url: string;
  user?: SimpleUser | null;
}

/**
 * Artifact
 * An artifact
 */
export interface Artifact {
  /** @example "https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip" */
  archive_download_url: string;
  /** @format date-time */
  created_at: string | null;
  /** Whether or not the artifact has expired. */
  expired: boolean;
  /** @format date-time */
  expires_at: string;
  /** @example 5 */
  id: number;
  /**
   * The name of the artifact.
   * @example "AdventureWorks.Framework"
   */
  name: string;
  /** @example "MDEwOkNoZWNrU3VpdGU1" */
  node_id: string;
  /**
   * The size in bytes of the artifact.
   * @example 12345
   */
  size_in_bytes: number;
  /** @format date-time */
  updated_at: string | null;
  /** @example "https://api.github.com/repos/github/hello-world/actions/artifacts/5" */
  url: string;
}

export interface AuditLogEvent {
  /** The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
  "@timestamp"?: number;
  /** The name of the action that was performed, for example \`user.login\` or \`repo.create\`. */
  action?: string;
  active?: boolean;
  active_was?: boolean;
  /** The actor who performed the action. */
  actor?: string;
  /** The username of the account being blocked. */
  blocked_user?: string;
  business?: string;
  config?: any[];
  config_was?: any[];
  content_type?: string;
  /** The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
  created_at?: number;
  deploy_key_fingerprint?: string;
  emoji?: string;
  events?: any[];
  events_were?: any[];
  explanation?: string;
  fingerprint?: string;
  hook_id?: number;
  limited_availability?: boolean;
  message?: string;
  name?: string;
  old_user?: string;
  openssh_public_key?: string;
  org?: string;
  previous_visibility?: string;
  read_only?: boolean;
  /** The name of the repository. */
  repo?: string;
  /** The name of the repository. */
  repository?: string;
  repository_public?: boolean;
  target_login?: string;
  team?: string;
  /** The type of protocol (for example, HTTP or SSH) used to transfer Git data. */
  transport_protocol?: number;
  /** A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data. */
  transport_protocol_name?: string;
  /** The user that was affected by the action performed (if available). */
  user?: string;
  /** The repository visibility, for example \`public\` or \`private\`. */
  visibility?: string;
}

/**
 * Authentication Token
 * Authentication Token
 */
export interface AuthenticationToken {
  /**
   * The time this token expires
   * @format date-time
   * @example "2016-07-11T22:14:10Z"
   */
  expires_at: string;
  /** @example {"issues":"read","deployments":"write"} */
  permissions?: object;
  /** The repositories this token has access to */
  repositories?: Repository[];
  /** Describe whether all repositories have been selected or there's a selection involved */
  repository_selection?: "all" | "selected";
  /** @example "config.yaml" */
  single_file?: string | null;
  /**
   * The token used for authentication
   * @example "v1.1f699f1069f60xxx"
   */
  token: string;
}

/**
 * author_association
 * How the author is associated with the repository.
 * @example "OWNER"
 */
export enum AuthorAssociation {
  COLLABORATOR = "COLLABORATOR",
  CONTRIBUTOR = "CONTRIBUTOR",
  FIRST_TIMER = "FIRST_TIMER",
  FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR",
  MANNEQUIN = "MANNEQUIN",
  MEMBER = "MEMBER",
  NONE = "NONE",
  OWNER = "OWNER",
}

/**
 * Authorization
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export interface Authorization {
  app: {
    client_id: string;
    name: string;
    /** @format uri */
    url: string;
  };
  /** @format date-time */
  created_at: string;
  fingerprint: string | null;
  hashed_token: string | null;
  id: number;
  installation?: ScopedInstallation | null;
  note: string | null;
  /** @format uri */
  note_url: string | null;
  /** A list of scopes that this authorization is in. */
  scopes: string[] | null;
  token: string;
  token_last_eight: string | null;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
  user?: SimpleUser | null;
}

/**
 * Auto merge
 * The status of auto merging a pull request.
 */
export type AutoMerge = {
  /** Commit message for the merge commit. */
  commit_message: string;
  /** Title for the merge commit message. */
  commit_title: string;
  /** Simple User */
  enabled_by: SimpleUser;
  /** The merge method to use. */
  merge_method: "merge" | "squash" | "rebase";
} | null;

/**
 * Base Gist
 * Base Gist
 */
export interface BaseGist {
  comments: number;
  /** @format uri */
  comments_url: string;
  /** @format uri */
  commits_url: string;
  /** @format date-time */
  created_at: string;
  description: string | null;
  files: Record<
    string,
    {
      filename?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      type?: string;
    }
  >;
  forks?: any[];
  /** @format uri */
  forks_url: string;
  /** @format uri */
  git_pull_url: string;
  /** @format uri */
  git_push_url: string;
  history?: any[];
  /** @format uri */
  html_url: string;
  id: string;
  node_id: string;
  owner?: SimpleUser | null;
  public: boolean;
  truncated?: boolean;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
  user: SimpleUser | null;
}

/**
 * Basic Error
 * Basic Error
 */
export interface BasicError {
  documentation_url?: string;
  message?: string;
}

/**
 * Blob
 * Blob
 */
export interface Blob {
  content: string;
  encoding: string;
  highlighted_content?: string;
  node_id: string;
  sha: string;
  size: number | null;
  /** @format uri */
  url: string;
}

/**
 * Branch Protection
 * Branch Protection
 */
export interface BranchProtection {
  allow_deletions?: {
    enabled?: boolean;
  };
  allow_force_pushes?: {
    enabled?: boolean;
  };
  enabled: boolean;
  /** Protected Branch Admin Enforced */
  enforce_admins?: ProtectedBranchAdminEnforced;
  /** @example ""branch/with/protection"" */
  name?: string;
  /** @example ""https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection"" */
  protection_url?: string;
  required_linear_history?: {
    enabled?: boolean;
  };
  /** Protected Branch Pull Request Review */
  required_pull_request_reviews?: ProtectedBranchPullRequestReview;
  required_status_checks: {
    contexts: string[];
    contexts_url?: string;
    enforcement_level: string;
    url?: string;
  };
  /** Branch Restriction Policy */
  restrictions?: BranchRestrictionPolicy;
  url?: string;
}

/**
 * Branch Restriction Policy
 * Branch Restriction Policy
 */
export interface BranchRestrictionPolicy {
  apps: {
    created_at?: string;
    description?: string;
    events?: string[];
    external_url?: string;
    html_url?: string;
    id?: number;
    name?: string;
    node_id?: string;
    owner?: {
      avatar_url?: string;
      description?: string;
      events_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers"" */
      followers_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}"" */
      following_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}"" */
      gists_url?: string;
      /** @example """" */
      gravatar_id?: string;
      hooks_url?: string;
      /** @example ""https://github.com/testorg-ea8ec76d71c3af4b"" */
      html_url?: string;
      id?: number;
      issues_url?: string;
      login?: string;
      members_url?: string;
      node_id?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs"" */
      organizations_url?: string;
      public_members_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events"" */
      received_events_url?: string;
      repos_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}"" */
      starred_url?: string;
      /** @example ""https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions"" */
      subscriptions_url?: string;
      /** @example ""Organization"" */
      type?: string;
      url?: string;
    };
    permissions?: {
      contents?: string;
      issues?: string;
      metadata?: string;
      single_file?: string;
    };
    slug?: string;
    updated_at?: string;
  }[];
  /** @format uri */
  apps_url: string;
  teams: {
    description?: string | null;
    html_url?: string;
    id?: number;
    members_url?: string;
    name?: string;
    node_id?: string;
    parent?: string | null;
    permission?: string;
    privacy?: string;
    repositories_url?: string;
    slug?: string;
    url?: string;
  }[];
  /** @format uri */
  teams_url: string;
  /** @format uri */
  url: string;
  users: {
    avatar_url?: string;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id?: number;
    login?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: string;
    url?: string;
  }[];
  /** @format uri */
  users_url: string;
}

/**
 * Branch Short
 * Branch Short
 */
export interface BranchShort {
  commit: {
    sha: string;
    url: string;
  };
  name: string;
  protected: boolean;
}

/**
 * Branch With Protection
 * Branch With Protection
 */
export interface BranchWithProtection {
  _links: {
    html: string;
    /** @format uri */
    self: string;
  };
  /** Commit */
  commit: Commit;
  name: string;
  /** @example ""mas*"" */
  pattern?: string;
  protected: boolean;
  /** Branch Protection */
  protection: BranchProtection;
  /** @format uri */
  protection_url: string;
  /** @example 1 */
  required_approving_review_count?: number;
}

/**
 * Check Annotation
 * Check Annotation
 */
export interface CheckAnnotation {
  /** @example "warning" */
  annotation_level: string | null;
  blob_href: string;
  /** @example 10 */
  end_column: number | null;
  /** @example 2 */
  end_line: number;
  /** @example "Check your spelling for 'banaas'." */
  message: string | null;
  /** @example "README.md" */
  path: string;
  /** @example "Do you mean 'bananas' or 'banana'?" */
  raw_details: string | null;
  /** @example 5 */
  start_column: number | null;
  /** @example 2 */
  start_line: number;
  /** @example "Spell Checker" */
  title: string | null;
}

/**
 * CheckRun
 * A check performed on the code of a given code change
 */
export interface CheckRun {
  app: Integration | null;
  check_suite: {
    id: number;
  } | null;
  /**
   * @format date-time
   * @example "2018-05-04T01:14:52Z"
   */
  completed_at: string | null;
  /** @example "neutral" */
  conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | null;
  /** @example "https://example.com" */
  details_url: string | null;
  /** @example "42" */
  external_id: string | null;
  /**
   * The SHA of the commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /** @example "https://github.com/github/hello-world/runs/4" */
  html_url: string | null;
  /**
   * The id of the check.
   * @example 21
   */
  id: number;
  /**
   * The name of the check.
   * @example "test-coverage"
   */
  name: string;
  /** @example "MDg6Q2hlY2tSdW40" */
  node_id: string;
  output: {
    annotations_count: number;
    /** @format uri */
    annotations_url: string;
    summary: string | null;
    text: string | null;
    title: string | null;
  };
  pull_requests: PullRequestMinimal[];
  /**
   * @format date-time
   * @example "2018-05-04T01:14:52Z"
   */
  started_at: string | null;
  /**
   * The phase of the lifecycle that the check is currently in.
   * @example "queued"
   */
  status: "queued" | "in_progress" | "completed";
  /** @example "https://api.github.com/repos/github/hello-world/check-runs/4" */
  url: string;
}

/**
 * CheckSuite
 * A suite of checks performed on the code of a given code change
 */
export interface CheckSuite {
  /** @example "d6fde92930d4715a2b49857d24b940956b26d2d3" */
  after: string | null;
  app: Integration | null;
  /** @example "146e867f55c26428e5f9fade55a9bbf5e95a7912" */
  before: string | null;
  check_runs_url: string;
  /** @example "neutral" */
  conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | null;
  /** @format date-time */
  created_at: string | null;
  /** @example "master" */
  head_branch: string | null;
  /** Simple Commit */
  head_commit: SimpleCommit;
  /**
   * The SHA of the head commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /** @example 5 */
  id: number;
  latest_check_runs_count: number;
  /** @example "MDEwOkNoZWNrU3VpdGU1" */
  node_id: string;
  pull_requests: PullRequestMinimal[] | null;
  /** Minimal Repository */
  repository: MinimalRepository;
  /** @example "completed" */
  status: "queued" | "in_progress" | "completed" | null;
  /** @format date-time */
  updated_at: string | null;
  /** @example "https://api.github.com/repos/github/hello-world/check-suites/5" */
  url: string | null;
}

/**
 * Check Suite Preference
 * Check suite configuration preferences for a repository.
 */
export interface CheckSuitePreference {
  preferences: {
    auto_trigger_checks?: {
      app_id: number;
      setting: boolean;
    }[];
  };
  /** A git repository */
  repository: Repository;
}

/**
 * Clone Traffic
 * Clone Traffic
 */
export interface CloneTraffic {
  clones: Traffic[];
  /** @example 173 */
  count: number;
  /** @example 128 */
  uniques: number;
}

/**
 * Code Frequency Stat
 * Code Frequency Stat
 */
export type CodeFrequencyStat = number[];

/**
 * Code Of Conduct
 * Code Of Conduct
 */
export interface CodeOfConduct {
  /**
   * @example "# Contributor Covenant Code of Conduct
   *
   * ## Our Pledge
   *
   * In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
   *
   * ## Our Standards
   *
   * Examples of behavior that contributes to creating a positive environment include:
   *
   * * Using welcoming and inclusive language
   * * Being respectful of differing viewpoints and experiences
   * * Gracefully accepting constructive criticism
   * * Focusing on what is best for the community
   * * Showing empathy towards other community members
   *
   * Examples of unacceptable behavior by participants include:
   *
   * * The use of sexualized language or imagery and unwelcome sexual attention or advances
   * * Trolling, insulting/derogatory comments, and personal or political attacks
   * * Public or private harassment
   * * Publishing others' private information, such as a physical or electronic address, without explicit permission
   * * Other conduct which could reasonably be considered inappropriate in a professional setting
   *
   * ## Our Responsibilities
   *
   * Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response
   *                   to any instances of unacceptable behavior.
   *
   * Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
   *
   * ## Scope
   *
   * This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,
   *                   posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
   *
   * ## Enforcement
   *
   * Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.
   *
   * Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.
   *
   * ## Attribution
   *
   * This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]
   *
   * [homepage]: http://contributor-covenant.org
   * [version]: http://contributor-covenant.org/version/1/4/
   * "
   */
  body?: string;
  /** @format uri */
  html_url: string | null;
  /** @example "contributor_covenant" */
  key: string;
  /** @example "Contributor Covenant" */
  name: string;
  /**
   * @format uri
   * @example "https://api.github.com/codes_of_conduct/contributor_covenant"
   */
  url: string;
}

/**
 * Code Of Conduct Simple
 * Code of Conduct Simple
 */
export interface CodeOfConductSimple {
  /** @format uri */
  html_url: string | null;
  /** @example "citizen_code_of_conduct" */
  key: string;
  /** @example "Citizen Code of Conduct" */
  name: string;
  /**
   * @format uri
   * @example "https://api.github.com/codes_of_conduct/citizen_code_of_conduct"
   */
  url: string;
}

export interface CodeScanningAlertCodeScanningAlert {
  /** The time that the alert was created in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
  created_at: AlertCreatedAt;
  /** The time that the alert was dismissed in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
  dismissed_at: CodeScanningAlertDismissedAt;
  /** Simple User */
  dismissed_by: SimpleUser;
  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: \`false positive\`, \`won't fix\`, and \`used in tests\`. */
  dismissed_reason: CodeScanningAlertDismissedReason;
  /** The GitHub URL of the alert resource. */
  html_url: AlertHtmlUrl;
  instances: CodeScanningAlertInstances;
  /** The security alert number. */
  number: AlertNumber;
  rule: CodeScanningAlertRule;
  /** State of a code scanning alert. */
  state: CodeScanningAlertState;
  tool: CodeScanningAnalysisTool;
  /** The REST API URL of the alert resource. */
  url: AlertUrl;
}

export interface CodeScanningAlertCodeScanningAlertItems {
  /** The time that the alert was created in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
  created_at: AlertCreatedAt;
  /** The time that the alert was dismissed in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
  dismissed_at: CodeScanningAlertDismissedAt;
  /** Simple User */
  dismissed_by: SimpleUser;
  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: \`false positive\`, \`won't fix\`, and \`used in tests\`. */
  dismissed_reason: CodeScanningAlertDismissedReason;
  /** The GitHub URL of the alert resource. */
  html_url: AlertHtmlUrl;
  /** The security alert number. */
  number: AlertNumber;
  rule: CodeScanningAlertRule;
  /** State of a code scanning alert. */
  state: CodeScanningAlertState;
  tool: CodeScanningAnalysisTool;
  /** The REST API URL of the alert resource. */
  url: AlertUrl;
}

/**
 * The time that the alert was dismissed in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
 * @format date-time
 */
export type CodeScanningAlertDismissedAt = string | null;

/** **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: \`false positive\`, \`won't fix\`, and \`used in tests\`. */
export type CodeScanningAlertDismissedReason = "false positive" | "won't fix" | "used in tests" | null;

/** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
export type CodeScanningAlertEnvironment = string;

export type CodeScanningAlertInstances = {
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
  analysis_key?: CodeScanningAnalysisAnalysisKey;
  /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
  environment?: CodeScanningAlertEnvironment;
  matrix_vars?: string | null;
  /** The full Git reference, formatted as \`refs/heads/<branch name>\`. */
  ref?: CodeScanningAlertRef;
  /** State of a code scanning alert. */
  state?: CodeScanningAlertState;
}[];

/** The full Git reference, formatted as \`refs/heads/<branch name>\`. */
export type CodeScanningAlertRef = string;

export interface CodeScanningAlertRule {
  /** A short description of the rule used to detect the alert. */
  description?: string;
  /** A unique identifier for the rule used to detect the alert. */
  id?: string | null;
  /** The severity of the alert. */
  severity?: "none" | "note" | "warning" | "error" | null;
}

/** Sets the state of the code scanning alert. Can be one of \`open\` or \`dismissed\`. You must provide \`dismissed_reason\` when you set the state to \`dismissed\`. */
export enum CodeScanningAlertSetState {
  Open = "open",
  Dismissed = "dismissed",
}

/** State of a code scanning alert. */
export enum CodeScanningAlertState {
  Open = "open",
  Dismissed = "dismissed",
  Fixed = "fixed",
}

/** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
export type CodeScanningAnalysisAnalysisKey = string;

export interface CodeScanningAnalysisCodeScanningAnalysis {
  /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
  analysis_key: CodeScanningAnalysisAnalysisKey;
  /** The commit SHA of the code scanning analysis file. */
  commit_sha: CodeScanningAnalysisCommitSha;
  /** The time that the analysis was created in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
  created_at: CodeScanningAnalysisCreatedAt;
  /** Identifies the variable values associated with the environment in which this analysis was performed. */
  environment: CodeScanningAnalysisEnvironment;
  /** @example "error reading field xyz" */
  error: string;
  /** The full Git reference of the code scanning analysis file, formatted as \`refs/heads/<branch name>\`. */
  ref: CodeScanningAnalysisRef;
  /** The name of the tool used to generate the code scanning analysis alert. */
  tool_name: CodeScanningAnalysisToolName;
}

/**
 * The commit SHA of the code scanning analysis file.
 * @minLength 40
 * @maxLength 40
 * @pattern ^[0-9a-fA-F]+$
 */
export type CodeScanningAnalysisCommitSha = string;

/**
 * The time that the analysis was created in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
 * @format date-time
 */
export type CodeScanningAnalysisCreatedAt = string;

/** Identifies the variable values associated with the environment in which this analysis was performed. */
export type CodeScanningAnalysisEnvironment = string;

/** The full Git reference of the code scanning analysis file, formatted as \`refs/heads/<branch name>\`. */
export type CodeScanningAnalysisRef = string;

/** A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [\`gzip\`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. */
export type CodeScanningAnalysisSarifFile = string;

export interface CodeScanningAnalysisTool {
  /** The name of the tool used to generate the code scanning analysis alert. */
  name?: CodeScanningAnalysisToolName;
  /** The version of the tool used to detect the alert. */
  version?: string | null;
}

/** The name of the tool used to generate the code scanning analysis alert. */
export type CodeScanningAnalysisToolName = string;

/**
 * Code Search Result Item
 * Code Search Result Item
 */
export interface CodeSearchResultItem {
  file_size?: number;
  /** @format uri */
  git_url: string;
  /** @format uri */
  html_url: string;
  language?: string | null;
  /** @format date-time */
  last_modified_at?: string;
  /** @example ["73..77","77..78"] */
  line_numbers?: string[];
  name: string;
  path: string;
  /** Minimal Repository */
  repository: MinimalRepository;
  score: number;
  sha: string;
  text_matches?: SearchResultTextMatches;
  /** @format uri */
  url: string;
}

/**
 * Collaborator
 * Collaborator
 */
export interface Collaborator {
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /** @example 1 */
  id: number;
  /** @example "octocat" */
  login: string;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  permissions?: {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  site_admin: boolean;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /** @example "User" */
  type: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
}

export interface CombinedBillingUsage {
  /** Numbers of days left in billing cycle. */
  days_left_in_billing_cycle: number;
  /** Estimated storage space (GB) used in billing cycle. */
  estimated_paid_storage_for_month: number;
  /** Estimated sum of free and paid storage space (GB) used in billing cycle. */
  estimated_storage_for_month: number;
}

/**
 * Combined Commit Status
 * Combined Commit Status
 */
export interface CombinedCommitStatus {
  /** @format uri */
  commit_url: string;
  /** Minimal Repository */
  repository: MinimalRepository;
  sha: string;
  state: string;
  statuses: SimpleCommitStatus[];
  total_count: number;
  /** @format uri */
  url: string;
}

/**
 * Commit
 * Commit
 */
export interface Commit {
  author: SimpleUser | null;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments"
   */
  comments_url: string;
  commit: {
    author: GitUser | null;
    /** @example 0 */
    comment_count: number;
    committer: GitUser | null;
    /** @example "Fix all the bugs" */
    message: string;
    tree: {
      /** @example "827efc6d56897b048c772eb4087f854f46256132" */
      sha: string;
      /**
       * @format uri
       * @example "https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132"
       */
      url: string;
    };
    /**
     * @format uri
     * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
     */
    url: string;
    verification?: Verification;
  };
  committer: SimpleUser | null;
  files?: {
    additions?: number;
    blob_url?: string;
    changes?: number;
    /** @example ""https://api.github.com/repos/owner-3d68404b07d25daeb2d4a6bf/AAA_Public_Repo/contents/geometry.js?ref=c3956841a7cb7e8ba4a6fd923568d86958f01573"" */
    contents_url?: string;
    deletions?: number;
    filename?: string;
    patch?: string;
    /** @example ""subdir/before_name.txt"" */
    previous_filename?: string;
    raw_url?: string;
    /** @example ""1e8e60ce9733d5283f7836fa602b6365a66b2567"" */
    sha?: string;
    status?: string;
  }[];
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  html_url: string;
  /** @example "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==" */
  node_id: string;
  parents: {
    /**
     * @format uri
     * @example "https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    html_url?: string;
    /** @example "7638417db6d59f3c431d3e1f261cc637155684cd" */
    sha: string;
    /**
     * @format uri
     * @example "https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    url: string;
  }[];
  /** @example "6dcb09b5b57875f334f61aebed695e2e4193db5e" */
  sha: string;
  stats?: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  url: string;
}

/**
 * Commit Activity
 * Commit Activity
 */
export interface CommitActivity {
  /** @example [0,3,26,20,39,1,0] */
  days: number[];
  /** @example 89 */
  total: number;
  /** @example 1336280400 */
  week: number;
}

/**
 * Commit Comment
 * Commit Comment
 */
export interface CommitComment {
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  body: string;
  commit_id: string;
  /** @format date-time */
  created_at: string;
  /** @format uri */
  html_url: string;
  id: number;
  line: number | null;
  node_id: string;
  path: string | null;
  position: number | null;
  reactions?: ReactionRollup;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
  user: SimpleUser | null;
}

/**
 * Commit Comparison
 * Commit Comparison
 */
export interface CommitComparison {
  /** @example 4 */
  ahead_by: number;
  /** Commit */
  base_commit: Commit;
  /** @example 5 */
  behind_by: number;
  commits: Commit[];
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/compare/master...topic.diff"
   */
  diff_url: string;
  files: DiffEntry[];
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/compare/master...topic"
   */
  html_url: string;
  /** Commit */
  merge_base_commit: Commit;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/compare/master...topic.patch"
   */
  patch_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17"
   */
  permalink_url: string;
  /** @example "ahead" */
  status: "diverged" | "ahead" | "behind" | "identical";
  /** @example 6 */
  total_commits: number;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/compare/master...topic"
   */
  url: string;
}

/**
 * Commit Search Result Item
 * Commit Search Result Item
 */
export interface CommitSearchResultItem {
  author: SimpleUser | null;
  /** @format uri */
  comments_url: string;
  commit: {
    author: {
      /** @format date-time */
      date: string;
      email: string;
      name: string;
    };
    comment_count: number;
    committer: GitUser | null;
    message: string;
    tree: {
      sha: string;
      /** @format uri */
      url: string;
    };
    /** @format uri */
    url: string;
    verification?: Verification;
  };
  committer: GitUser | null;
  /** @format uri */
  html_url: string;
  node_id: string;
  parents: {
    html_url?: string;
    sha?: string;
    url?: string;
  }[];
  /** Minimal Repository */
  repository: MinimalRepository;
  score: number;
  sha: string;
  text_matches?: SearchResultTextMatches;
  /** @format uri */
  url: string;
}

/** Community Health File */
export interface CommunityHealthFile {
  /** @format uri */
  html_url: string;
  /** @format uri */
  url: string;
}

/**
 * Community Profile
 * Community Profile
 */
export interface CommunityProfile {
  /** @example true */
  content_reports_enabled?: boolean;
  /** @example "My first repository on GitHub!" */
  description: string | null;
  /** @example "example.com" */
  documentation: string | null;
  files: {
    code_of_conduct: CodeOfConductSimple | null;
    contributing: CommunityHealthFile | null;
    issue_template: CommunityHealthFile | null;
    license: LicenseSimple | null;
    pull_request_template: CommunityHealthFile | null;
    readme: CommunityHealthFile | null;
  };
  /** @example 100 */
  health_percentage: number;
  /**
   * @format date-time
   * @example "2017-02-28T19:09:29Z"
   */
  updated_at: string | null;
}

/**
 * Content Directory
 * A list of directory items
 */
export type ContentDirectory = {
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
  content?: string;
  /** @format uri */
  download_url: string | null;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: string;
  /** @format uri */
  url: string;
}[];

/**
 * Content File
 * Content File
 */
export interface ContentFile {
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
  content: string;
  /** @format uri */
  download_url: string | null;
  encoding: string;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  /** @example ""git://example.com/defunkt/dotjs.git"" */
  submodule_git_url?: string;
  /** @example ""actual/actual.md"" */
  target?: string;
  type: string;
  /** @format uri */
  url: string;
}

/**
 * ContentReferenceAttachment
 * Content Reference attachments allow you to provide context around URLs posted in comments
 */
export interface ContentReferenceAttachment {
  /**
   * The body of the attachment
   * @maxLength 262144
   * @example "Body of the attachment"
   */
  body: string;
  /**
   * The ID of the attachment
   * @example 21
   */
  id: number;
  /**
   * The node_id of the content attachment
   * @example "MDE3OkNvbnRlbnRBdHRhY2htZW50MjE="
   */
  node_id?: string;
  /**
   * The title of the attachment
   * @maxLength 1024
   * @example "Title of the attachment"
   */
  title: string;
}

/**
 * Symlink Content
 * An object describing a symlink
 */
export interface ContentSubmodule {
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
  /** @format uri */
  download_url: string | null;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  /** @format uri */
  submodule_git_url: string;
  type: string;
  /** @format uri */
  url: string;
}

/**
 * Symlink Content
 * An object describing a symlink
 */
export interface ContentSymlink {
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
  /** @format uri */
  download_url: string | null;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  target: string;
  type: string;
  /** @format uri */
  url: string;
}

/**
 * Content Traffic
 * Content Traffic
 */
export interface ContentTraffic {
  /** @example 3542 */
  count: number;
  /** @example "/github/hubot" */
  path: string;
  /** @example "github/hubot: A customizable life embetterment robot." */
  title: string;
  /** @example 2225 */
  uniques: number;
}

/**
 * Content Tree
 * Content Tree
 */
export interface ContentTree {
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
  /** @format uri */
  download_url: string | null;
  entries?: {
    _links: {
      /** @format uri */
      git: string | null;
      /** @format uri */
      html: string | null;
      /** @format uri */
      self: string;
    };
    content?: string;
    /** @format uri */
    download_url: string | null;
    /** @format uri */
    git_url: string | null;
    /** @format uri */
    html_url: string | null;
    name: string;
    path: string;
    sha: string;
    size: number;
    type: string;
    /** @format uri */
    url: string;
  }[];
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: string;
  /** @format uri */
  url: string;
}

/**
 * Contributor
 * Contributor
 */
export interface Contributor {
  /** @format uri */
  avatar_url?: string;
  contributions: number;
  email?: string;
  events_url?: string;
  /** @format uri */
  followers_url?: string;
  following_url?: string;
  gists_url?: string;
  gravatar_id?: string | null;
  /** @format uri */
  html_url?: string;
  id?: number;
  login?: string;
  name?: string;
  node_id?: string;
  /** @format uri */
  organizations_url?: string;
  /** @format uri */
  received_events_url?: string;
  /** @format uri */
  repos_url?: string;
  site_admin?: boolean;
  starred_url?: string;
  /** @format uri */
  subscriptions_url?: string;
  type: string;
  /** @format uri */
  url?: string;
}

/**
 * Contributor Activity
 * Contributor Activity
 */
export interface ContributorActivity {
  author: SimpleUser | null;
  /** @example 135 */
  total: number;
  /** @example [{"w":"1367712000","a":6898,"d":77,"c":10}] */
  weeks: {
    a?: number;
    c?: number;
    d?: number;
    w?: string;
  }[];
}

/**
 * Credential Authorization
 * Credential Authorization
 */
export interface CredentialAuthorization {
  /** @example 12345678 */
  authorized_credential_id?: number | null;
  /**
   * The note given to the token. This will only be present when the credential is a token.
   * @example "my token"
   */
  authorized_credential_note?: string | null;
  /**
   * The title given to the ssh key. This will only be present when the credential is an ssh key.
   * @example "my ssh key"
   */
  authorized_credential_title?: string | null;
  /**
   * Date when the credential was last accessed. May be null if it was never accessed
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  credential_accessed_at?: string | null;
  /**
   * Date when the credential was authorized for use.
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  credential_authorized_at: string;
  /**
   * Unique identifier for the credential.
   * @example 1
   */
  credential_id: number;
  /**
   * Human-readable description of the credential type.
   * @example "SSH Key"
   */
  credential_type: string;
  /**
   * Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.
   * @example "jklmnop12345678"
   */
  fingerprint?: string;
  /**
   * User login that owns the underlying credential.
   * @example "monalisa"
   */
  login: string;
  /**
   * List of oauth scopes the token has been granted.
   * @example ["user","repo"]
   */
  scopes?: string[];
  /**
   * Last eight characters of the credential. Only included in responses with credential_type of personal access token.
   * @example "12345678"
   */
  token_last_eight?: string;
}

/**
 * Deploy Key
 * An SSH key granting access to a single repository.
 */
export interface DeployKey {
  created_at: string;
  id: number;
  key: string;
  read_only: boolean;
  title: string;
  url: string;
  verified: boolean;
}

/**
 * Deployment
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
export interface Deployment {
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  created_at: string;
  creator: SimpleUser | null;
  /** @example "Deploy request from hubot" */
  description: string | null;
  /**
   * Name for the target deployment environment.
   * @example "production"
   */
  environment: string;
  /**
   * Unique identifier of the deployment
   * @example 42
   */
  id: number;
  /** @example "MDEwOkRlcGxveW1lbnQx" */
  node_id: string;
  /** @example "staging" */
  original_environment?: string;
  payload: object;
  performed_via_github_app?: Integration | null;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   * @example true
   */
  production_environment?: boolean;
  /**
   * The ref to deploy. This can be a branch, tag, or sha.
   * @example "topic-branch"
   */
  ref: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
  /** @example "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d" */
  sha: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/1/statuses"
   */
  statuses_url: string;
  /**
   * Parameter to specify a task to execute
   * @example "deploy"
   */
  task: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   * @example true
   */
  transient_environment?: boolean;
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/1"
   */
  url: string;
}

/**
 * Deployment Status
 * The status of a deployment.
 */
export interface DeploymentStatus {
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  created_at: string;
  creator: SimpleUser | null;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/42"
   */
  deployment_url: string;
  /**
   * A short description of the status.
   * @maxLength 140
   * @default ""
   * @example "Deployment finished successfully."
   */
  description: string;
  /**
   * The environment of the deployment that the status is for.
   * @default ""
   * @example "production"
   */
  environment?: string;
  /**
   * The URL for accessing your environment.
   * @format uri
   * @default ""
   * @example "https://staging.example.com/"
   */
  environment_url?: string;
  /** @example 1 */
  id: number;
  /**
   * The URL to associate with this status.
   * @format uri
   * @default ""
   * @example "https://example.com/deployment/42/output"
   */
  log_url?: string;
  /** @example "MDE2OkRlcGxveW1lbnRTdGF0dXMx" */
  node_id: string;
  performed_via_github_app?: Integration | null;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
  /**
   * The state of the status.
   * @example "success"
   */
  state: "error" | "failure" | "inactive" | "pending" | "success" | "queued" | "in_progress";
  /**
   * Deprecated: the URL to associate with this status.
   * @format uri
   * @default ""
   * @example "https://example.com/deployment/42/output"
   */
  target_url: string;
  /**
   * @format date-time
   * @example "2012-07-20T01:19:13Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/deployments/42/statuses/1"
   */
  url: string;
}

/**
 * Diff Entry
 * Diff Entry
 */
export interface DiffEntry {
  /** @example 103 */
  additions: number;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt"
   */
  blob_url: string;
  /** @example 124 */
  changes: number;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  contents_url: string;
  /** @example 21 */
  deletions: number;
  /** @example "file1.txt" */
  filename: string;
  /** @example "@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test" */
  patch?: string;
  /** @example "file.txt" */
  previous_filename?: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt"
   */
  raw_url: string;
  /** @example "bbcd538c8e72b8c175046e27cc8f907076331401" */
  sha: string;
  /** @example "added" */
  status: string;
}

/**
 * Email
 * Email
 */
export interface Email {
  /**
   * @format email
   * @example "octocat@github.com"
   */
  email: string;
  /** @example true */
  primary: boolean;
  /** @example true */
  verified: boolean;
  /** @example "public" */
  visibility: string | null;
}

/** The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: \`all\`, \`none\`, or \`selected\`. */
export enum EnabledOrganizations {
  All = "all",
  None = "none",
  Selected = "selected",
}

/** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: \`all\`, \`none\`, or \`selected\`. */
export enum EnabledRepositories {
  All = "all",
  None = "none",
  Selected = "selected",
}

/**
 * Enterprise
 * An enterprise account
 */
export interface Enterprise {
  /** @format uri */
  avatar_url: string;
  /**
   * @format date-time
   * @example "2019-01-26T19:01:12Z"
   */
  created_at: string | null;
  /** A short description of the enterprise. */
  description?: string | null;
  /**
   * @format uri
   * @example "https://github.com/enterprises/octo-business"
   */
  html_url: string;
  /**
   * Unique identifier of the enterprise
   * @example 42
   */
  id: number;
  /**
   * The name of the enterprise.
   * @example "Octo Business"
   */
  name: string;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /**
   * The slug url identifier for the enterprise.
   * @example "octo-business"
   */
  slug: string;
  /**
   * @format date-time
   * @example "2019-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /**
   * The enterprise's website URL.
   * @format uri
   */
  website_url?: string | null;
}

/**
 * Event
 * Event
 */
export interface Event {
  /** Actor */
  actor: Actor;
  /** @format date-time */
  created_at: string | null;
  id: string;
  /** Actor */
  org?: Actor;
  payload: {
    action: string;
    /** Comments provide a way for people to collaborate on an issue. */
    comment?: IssueComment;
    /** Issue Simple */
    issue?: IssueSimple;
    pages?: {
      action?: string;
      html_url?: string;
      page_name?: string;
      sha?: string;
      summary?: string | null;
      title?: string;
    }[];
  };
  public: boolean;
  repo: {
    id: number;
    name: string;
    /** @format uri */
    url: string;
  };
  type: string | null;
}

/**
 * Feed
 * Feed
 */
export interface Feed {
  _links: {
    /** Hypermedia Link with Type */
    current_user?: LinkWithType;
    /** Hypermedia Link with Type */
    current_user_actor?: LinkWithType;
    /** Hypermedia Link with Type */
    current_user_organization?: LinkWithType;
    current_user_organizations?: LinkWithType[];
    /** Hypermedia Link with Type */
    current_user_public?: LinkWithType;
    /** Hypermedia Link with Type */
    security_advisories?: LinkWithType;
    /** Hypermedia Link with Type */
    timeline: LinkWithType;
    /** Hypermedia Link with Type */
    user: LinkWithType;
  };
  /** @example "https://github.com/octocat.private.actor?token=abc123" */
  current_user_actor_url?: string;
  /** @example "https://github.com/octocat-org" */
  current_user_organization_url?: string;
  /** @example ["https://github.com/organizations/github/octocat.private.atom?token=abc123"] */
  current_user_organization_urls?: string[];
  /** @example "https://github.com/octocat" */
  current_user_public_url?: string;
  /** @example "https://github.com/octocat.private?token=abc123" */
  current_user_url?: string;
  /** @example "https://github.com/security-advisories" */
  security_advisories_url?: string;
  /** @example "https://github.com/timeline" */
  timeline_url: string;
  /** @example "https://github.com/{user}" */
  user_url: string;
}

/**
 * File Commit
 * File Commit
 */
export interface FileCommit {
  commit: {
    author?: {
      date?: string;
      email?: string;
      name?: string;
    };
    committer?: {
      date?: string;
      email?: string;
      name?: string;
    };
    html_url?: string;
    message?: string;
    node_id?: string;
    parents?: {
      html_url?: string;
      sha?: string;
      url?: string;
    }[];
    sha?: string;
    tree?: {
      sha?: string;
      url?: string;
    };
    url?: string;
    verification?: {
      payload?: string | null;
      reason?: string;
      signature?: string | null;
      verified?: boolean;
    };
  };
  content: {
    _links?: {
      git?: string;
      html?: string;
      self?: string;
    };
    download_url?: string;
    git_url?: string;
    html_url?: string;
    name?: string;
    path?: string;
    sha?: string;
    size?: number;
    type?: string;
    url?: string;
  } | null;
}

/**
 * Full Repository
 * Full Repository
 */
export interface FullRepository {
  /** @example true */
  allow_merge_commit?: boolean;
  /** @example true */
  allow_rebase_merge?: boolean;
  /** @example true */
  allow_squash_merge?: boolean;
  /**
   * Whether anonymous git access is allowed.
   * @default true
   */
  anonymous_access_enabled?: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  archived: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string;
  /** @example "master" */
  default_branch: string;
  /** @example false */
  delete_branch_on_merge?: boolean;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  fork: boolean;
  forks: number;
  /** @example 9 */
  forks_count: number;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /** @example true */
  has_downloads: boolean;
  /** @example true */
  has_issues: boolean;
  has_pages: boolean;
  /** @example true */
  has_projects: boolean;
  /** @example true */
  has_wiki: boolean;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example 1296269 */
  id: number;
  /** @example true */
  is_template?: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  language: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  license: LicenseSimple | null;
  master_branch?: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /** @example "Hello-World" */
  name: string;
  /** @example 0 */
  network_count: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  open_issues: number;
  /** @example 0 */
  open_issues_count: number;
  organization?: SimpleUser | null;
  owner: SimpleUser | null;
  /** A git repository */
  parent?: Repository;
  permissions?: {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  private: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example 108 */
  size: number;
  /** A git repository */
  source?: Repository;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /** @example 80 */
  stargazers_count: number;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  /** @example 42 */
  subscribers_count: number;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  temp_clone_token?: string | null;
  template_repository?: Repository | null;
  /** @example ["octocat","atom","electron","API"] */
  topics?: string[];
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * The repository visibility: public, private, or internal.
   * @example "public"
   */
  visibility?: string;
  watchers: number;
  /** @example 80 */
  watchers_count: number;
}

/**
 * Gist Comment
 * A comment made to a gist.
 */
export interface GistComment {
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /**
   * The comment text.
   * @maxLength 65535
   * @example "Body of the attachment"
   */
  body: string;
  /**
   * @format date-time
   * @example "2011-04-18T23:23:56Z"
   */
  created_at: string;
  /** @example 1 */
  id: number;
  /** @example "MDExOkdpc3RDb21tZW50MQ==" */
  node_id: string;
  /**
   * @format date-time
   * @example "2011-04-18T23:23:56Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1"
   */
  url: string;
  user: SimpleUser | null;
}

/**
 * Gist Commit
 * Gist Commit
 */
export interface GistCommit {
  change_status: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  /**
   * @format date-time
   * @example "2010-04-14T02:15:15Z"
   */
  committed_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f"
   */
  url: string;
  user: SimpleUser | null;
  /** @example "57a7f021a713b1c5a6a199b54cc514735d2d462f" */
  version: string;
}

/**
 * Gist Simple
 * Gist Simple
 */
export interface GistSimple {
  comments?: number;
  comments_url?: string;
  commits_url?: string;
  created_at?: string;
  description?: string | null;
  files?: Record<
    string,
    {
      content?: string;
      filename?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      type?: string;
    } | null
  >;
  forks_url?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  id?: string;
  node_id?: string;
  /** Simple User */
  owner?: SimpleUser;
  public?: boolean;
  truncated?: boolean;
  updated_at?: string;
  url?: string;
  user?: string | null;
}

/**
 * Git Commit
 * Low-level Git commit operations within a repository
 */
export interface GitCommit {
  /** Identifying information for the git-user */
  author: {
    /**
     * Timestamp of the commit
     * @format date-time
     * @example "2014-08-09T08:02:04+12:00"
     */
    date: string;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     */
    name: string;
  };
  /** Identifying information for the git-user */
  committer: {
    /**
     * Timestamp of the commit
     * @format date-time
     * @example "2014-08-09T08:02:04+12:00"
     */
    date: string;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     */
    name: string;
  };
  /** @format uri */
  html_url: string;
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   */
  message: string;
  node_id: string;
  parents: {
    /** @format uri */
    html_url: string;
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    /** @format uri */
    url: string;
  }[];
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   */
  sha: string;
  tree: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    /** @format uri */
    url: string;
  };
  /** @format uri */
  url: string;
  verification: {
    payload: string | null;
    reason: string;
    signature: string | null;
    verified: boolean;
  };
}

/**
 * Git Reference
 * Git references within a repository
 */
export interface GitRef {
  node_id: string;
  object: {
    /**
     * SHA for the reference
     * @minLength 40
     * @maxLength 40
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    type: string;
    /** @format uri */
    url: string;
  };
  ref: string;
  /** @format uri */
  url: string;
}

/**
 * Git Tag
 * Metadata for a Git tag
 */
export interface GitTag {
  /**
   * Message describing the purpose of the tag
   * @example "Initial public release"
   */
  message: string;
  /** @example "MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==" */
  node_id: string;
  object: {
    sha: string;
    type: string;
    /** @format uri */
    url: string;
  };
  /** @example "940bd336248efae0f9ee5bc7b2d5c985887b16ac" */
  sha: string;
  /**
   * Name of the tag
   * @example "v0.0.1"
   */
  tag: string;
  tagger: {
    date: string;
    email: string;
    name: string;
  };
  /**
   * URL for the tag
   * @format uri
   * @example "https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac"
   */
  url: string;
  verification?: Verification;
}

/**
 * Git Tree
 * The hierarchy between files in a Git repository.
 */
export interface GitTree {
  sha: string;
  /**
   * Objects specifying a tree structure
   * @example [{"path":"file.rb","mode":"100644","type":"blob","size":30,"sha":"44b4fc6d56897b048c772eb4087f854f46256132","url":"https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132","properties":{"path":{"type":"string"},"mode":{"type":"string"},"type":{"type":"string"},"size":{"type":"integer"},"sha":{"type":"string"},"url":{"type":"string"}},"required":["path","mode","type","sha","url","size"]}]
   */
  tree: {
    /** @example "040000" */
    mode?: string;
    /** @example "test/file.rb" */
    path?: string;
    /** @example "23f6827669e43831def8a7ad935069c8bd418261" */
    sha?: string;
    /** @example 12 */
    size?: number;
    /** @example "tree" */
    type?: string;
    /** @example "https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261" */
    url?: string;
  }[];
  truncated: boolean;
  /** @format uri */
  url: string;
}

/**
 * Git User
 * Metaproperties for Git author/committer information.
 */
export interface GitUser {
  /** @example ""2007-10-29T02:42:39.000-07:00"" */
  date?: string;
  /** @example ""chris@ozmm.org"" */
  email?: string;
  /** @example ""Chris Wanstrath"" */
  name?: string;
}

/**
 * Gitignore Template
 * Gitignore Template
 */
export interface GitignoreTemplate {
  /** @example "C" */
  name: string;
  /**
   * @example "# Object files
   * *.o
   *
   * # Libraries
   * *.lib
   * *.a
   *
   * # Shared objects (inc. Windows DLLs)
   * *.dll
   * *.so
   * *.so.*
   * *.dylib
   *
   * # Executables
   * *.exe
   * *.out
   * *.app
   * "
   */
  source: string;
}

/**
 * GPG Key
 * A unique encryption key
 */
export interface GpgKey {
  /** @example true */
  can_certify: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
  /** @example true */
  can_sign: boolean;
  /**
   * @format date-time
   * @example "2016-03-24T11:31:04-06:00"
   */
  created_at: string;
  /** @example [{"email":"mastahyeti@users.noreply.github.com","verified":true}] */
  emails: {
    email?: string;
    verified?: boolean;
  }[];
  /** @format date-time */
  expires_at: string | null;
  /** @example 3 */
  id: number;
  /** @example "3262EFF25BA0D270" */
  key_id: string;
  primary_key_id: number | null;
  /** @example "xsBNBFayYZ..." */
  public_key: string;
  raw_key: string | null;
  /** @example [{"id":4,"primary_key_id":3,"key_id":"4A595D4C72EE49C7","public_key":"zsBNBFayYZ...","emails":[],"subkeys":[],"can_sign":false,"can_encrypt_comms":true,"can_encrypt_storage":true,"can_certify":false,"created_at":"2016-03-24T11:31:04-06:00","expires_at":null}] */
  subkeys: {
    can_certify?: boolean;
    can_encrypt_comms?: boolean;
    can_encrypt_storage?: boolean;
    can_sign?: boolean;
    created_at?: string;
    emails?: any[];
    expires_at?: string | null;
    id?: number;
    key_id?: string;
    primary_key_id?: number;
    public_key?: string;
    raw_key?: string | null;
    subkeys?: any[];
  }[];
}

/**
 * GroupMapping
 * External Groups to be mapped to a team for membership
 */
export interface GroupMapping {
  /**
   * a description of the group
   * @example "A group of Developers working on AzureAD SAML SSO"
   */
  group_description?: string;
  /**
   * The ID of the group
   * @example "111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa"
   */
  group_id?: string;
  /**
   * The name of the group
   * @example "saml-azuread-test"
   */
  group_name?: string;
  /**
   * Array of groups to be mapped to this team
   * @example [{"group_id":"111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa","group_name":"saml-azuread-test","group_description":"A group of Developers working on AzureAD SAML SSO"},{"group_id":"2bb2bb2b-bb22-22bb-2bb2-bb2bbb2bb2b2","group_name":"saml-azuread-test2","group_description":"Another group of Developers working on AzureAD SAML SSO"}]
   */
  groups?: {
    /**
     * a description of the group
     * @example "A group of Developers working on AzureAD SAML SSO"
     */
    group_description: string;
    /**
     * The ID of the group
     * @example "111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa"
     */
    group_id: string;
    /**
     * The name of the group
     * @example "saml-azuread-test"
     */
    group_name: string;
  }[];
  /**
   * synchronization status for this group mapping
   * @example "unsynced"
   */
  status?: string;
  /**
   * the time of the last sync for this group-mapping
   * @example "2019-06-03 22:27:15:000 -700"
   */
  synced_at?: string;
}

/**
 * Webhook
 * Webhooks for repositories.
 */
export interface Hook {
  /**
   * Determines whether the hook is actually triggered on pushes.
   * @example true
   */
  active: boolean;
  config: {
    /** The media type used to serialize the payloads. Supported values include \`json\` and \`form\`. The default is \`form\`. */
    content_type?: WebhookConfigContentType;
    /** @example ""sha256"" */
    digest?: string;
    /** @example ""foo@bar.com"" */
    email?: string;
    /** Determines whether the SSL certificate of the host for \`url\` will be verified when delivering payloads. Supported values include \`0\` (verification is performed) and \`1\` (verification is not performed). The default is \`0\`. **We strongly recommend not setting this to \`1\` as you are subject to man-in-the-middle and other attacks.** */
    insecure_ssl?: WebhookConfigInsecureSsl;
    /** @example ""foo"" */
    password?: string;
    /** @example ""roomer"" */
    room?: string;
    /** If provided, the \`secret\` will be used as the \`key\` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
    secret?: WebhookConfigSecret;
    /** @example ""foo"" */
    subdomain?: string;
    /** @example ""abc"" */
    token?: string;
    /** The URL to which the payloads will be delivered. */
    url?: WebhookConfigUrl;
  };
  /**
   * @format date-time
   * @example "2011-09-06T17:26:27Z"
   */
  created_at: string;
  /**
   * Determines what events the hook is triggered for. Default: ['push'].
   * @example ["push","pull_request"]
   */
  events: string[];
  /**
   * Unique identifier of the webhook.
   * @example 42
   */
  id: number;
  last_response: HookResponse;
  /**
   * The name of a valid service, use 'web' for a webhook.
   * @example "web"
   */
  name: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1/pings"
   */
  ping_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1/test"
   */
  test_url: string;
  type: string;
  /**
   * @format date-time
   * @example "2011-09-06T20:39:23Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1"
   */
  url: string;
}

/** Hook Response */
export interface HookResponse {
  code: number | null;
  message: string | null;
  status: string | null;
}

/**
 * Hovercard
 * Hovercard
 */
export interface Hovercard {
  contexts: {
    message: string;
    octicon: string;
  }[];
}

/**
 * Import
 * A repository import from an external source.
 */
export interface Import {
  authors_count?: number | null;
  /** @format uri */
  authors_url: string;
  commit_count?: number | null;
  error_message?: string | null;
  failed_step?: string | null;
  has_large_files?: boolean;
  /** @format uri */
  html_url: string;
  import_percent?: number | null;
  large_files_count?: number;
  large_files_size?: number;
  message?: string;
  project_choices?: {
    human_name?: string;
    tfvc_project?: string;
    vcs?: string;
  }[];
  push_percent?: number | null;
  /** @format uri */
  repository_url: string;
  status:
    | "auth"
    | "error"
    | "none"
    | "detecting"
    | "choose"
    | "auth_failed"
    | "importing"
    | "mapping"
    | "waiting_to_push"
    | "pushing"
    | "complete"
    | "setup"
    | "unknown"
    | "detection_found_multiple"
    | "detection_found_nothing"
    | "detection_needs_auth";
  status_text?: string | null;
  svc_root?: string;
  svn_root?: string;
  tfvc_project?: string;
  /** @format uri */
  url: string;
  use_lfs?: string;
  vcs: string | null;
  /** The URL of the originating repository. */
  vcs_url: string;
}

/**
 * Installation
 * Installation
 */
export interface Installation {
  /**
   * @format uri
   * @example "https://api.github.com/installations/1/access_tokens"
   */
  access_tokens_url: string;
  account: SimpleUser | Enterprise | null;
  /** @example 1 */
  app_id: number;
  /** @example "github-actions" */
  app_slug: string;
  /** @example ""test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com"" */
  contact_email?: string | null;
  /** @format date-time */
  created_at: string;
  events: string[];
  /** @example true */
  has_multiple_single_files?: boolean;
  /**
   * @format uri
   * @example "https://github.com/organizations/github/settings/installations/1"
   */
  html_url: string;
  /**
   * The ID of the installation.
   * @example 1
   */
  id: number;
  /** @example {"issues":"read","deployments":"write"} */
  permissions: {
    checks?: string;
    contents?: string;
    deployments?: string;
    /** @example ""read"" */
    issues?: string;
    metadata?: string;
    /** @example ""read"" */
    organization_administration?: string;
    pull_requests?: string;
    statuses?: string;
  };
  /**
   * @format uri
   * @example "https://api.github.com/installation/repositories"
   */
  repositories_url: string;
  /** Describe whether all repositories have been selected or there's a selection involved */
  repository_selection: "all" | "selected";
  /** @example "config.yaml" */
  single_file_name: string | null;
  /** @example ["config.yml",".github/issue_TEMPLATE.md"] */
  single_file_paths?: string[];
  /** @format date-time */
  suspended_at?: string | null;
  suspended_by?: SimpleUser | null;
  /** The ID of the user or organization this token is being scoped to. */
  target_id: number;
  /** @example "Organization" */
  target_type: string;
  /** @format date-time */
  updated_at: string;
}

/**
 * Installation Token
 * Authentication token for a GitHub App installed on a user or org.
 */
export interface InstallationToken {
  expires_at: string;
  /** @example true */
  has_multiple_single_files?: boolean;
  permissions?: {
    contents?: string;
    issues?: string;
    /** @example "read" */
    metadata?: string;
    /** @example "read" */
    single_file?: string;
  };
  repositories?: Repository[];
  repository_selection?: "all" | "selected";
  /** @example "README.md" */
  single_file?: string;
  /** @example ["config.yml",".github/issue_TEMPLATE.md"] */
  single_file_paths?: string[];
  token: string;
}

/**
 * GitHub app
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface Integration {
  /** @example ""Iv1.25b5d1e65ffc4022"" */
  client_id?: string;
  /** @example ""1d4b2097ac622ba702d19de498f005747a8b21d3"" */
  client_secret?: string;
  /**
   * @format date-time
   * @example "2017-07-08T16:18:44-04:00"
   */
  created_at: string;
  /** @example "The description of the app." */
  description: string | null;
  /**
   * The list of events for the GitHub app
   * @example ["label","deployment"]
   */
  events: string[];
  /**
   * @format uri
   * @example "https://example.com"
   */
  external_url: string;
  /**
   * @format uri
   * @example "https://github.com/apps/super-ci"
   */
  html_url: string;
  /**
   * Unique identifier of the GitHub app
   * @example 37
   */
  id: number;
  /**
   * The number of installations associated with the GitHub app
   * @example 5
   */
  installations_count?: number;
  /**
   * The name of the GitHub app
   * @example "Probot Owners"
   */
  name: string;
  /** @example "MDExOkludGVncmF0aW9uMQ==" */
  node_id: string;
  owner: SimpleUser | null;
  /** @example ""-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n"" */
  pem?: string;
  /**
   * The set of permissions for the GitHub app
   * @example {"issues":"read","deployments":"write"}
   */
  permissions: {
    checks?: string;
    contents?: string;
    deployments?: string;
    issues?: string;
    metadata?: string;
    [key: string]: any;
  };
  /**
   * The slug name of the GitHub app
   * @example "probot-owners"
   */
  slug?: string;
  /**
   * @format date-time
   * @example "2017-07-08T16:18:44-04:00"
   */
  updated_at: string;
  /** @example ""6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"" */
  webhook_secret?: string;
  [key: string]: any;
}

/**
 * The duration of the interaction restriction. Can be one of: \`one_day\`, \`three_days\`, \`one_week\`, \`one_month\`, \`six_months\`. Default: \`one_day\`.
 * @example "one_month"
 */
export enum InteractionExpiry {
  OneDay = "one_day",
  ThreeDays = "three_days",
  OneWeek = "one_week",
  OneMonth = "one_month",
  SixMonths = "six_months",
}

/**
 * The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. Can be one of: \`existing_users\`, \`contributors_only\`, \`collaborators_only\`.
 * @example "collaborators_only"
 */
export enum InteractionGroup {
  ExistingUsers = "existing_users",
  ContributorsOnly = "contributors_only",
  CollaboratorsOnly = "collaborators_only",
}

/**
 * Interaction Restrictions
 * Limit interactions to a specific type of user for a specified duration
 */
export interface InteractionLimit {
  /** The duration of the interaction restriction. Can be one of: \`one_day\`, \`three_days\`, \`one_week\`, \`one_month\`, \`six_months\`. Default: \`one_day\`. */
  expiry?: InteractionExpiry;
  /** The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. Can be one of: \`existing_users\`, \`contributors_only\`, \`collaborators_only\`. */
  limit: InteractionGroup;
}

/**
 * Interaction Limits
 * Interaction limit settings.
 */
export interface InteractionLimitResponse {
  /**
   * @format date-time
   * @example "2018-08-17T04:18:39Z"
   */
  expires_at: string;
  /** The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. Can be one of: \`existing_users\`, \`contributors_only\`, \`collaborators_only\`. */
  limit: InteractionGroup;
  /** @example "repository" */
  origin: string;
}

/**
 * Issue
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export interface Issue {
  active_lock_reason?: string | null;
  assignee: SimpleUser | null;
  assignees?: SimpleUser[] | null;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /**
   * Contents of the issue
   * @example "It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?"
   */
  body?: string;
  body_html?: string;
  body_text?: string;
  /** @format date-time */
  closed_at: string | null;
  closed_by?: SimpleUser | null;
  comments: number;
  /** @format uri */
  comments_url: string;
  /** @format date-time */
  created_at: string;
  /** @format uri */
  events_url: string;
  /** @format uri */
  html_url: string;
  id: number;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   * @example ["bug","registration"]
   */
  labels: (
    | string
    | {
        color?: string | null;
        default?: boolean;
        description?: string | null;
        id?: number;
        name?: string;
        node_id?: string;
        /** @format uri */
        url?: string;
      }
  )[];
  labels_url: string;
  locked: boolean;
  milestone: Milestone | null;
  node_id: string;
  /**
   * Number uniquely identifying the issue within its repository
   * @example 42
   */
  number: number;
  performed_via_github_app?: Integration | null;
  pull_request?: {
    /** @format uri */
    diff_url: string | null;
    /** @format uri */
    html_url: string | null;
    /** @format date-time */
    merged_at?: string | null;
    /** @format uri */
    patch_url: string | null;
    /** @format uri */
    url: string | null;
  };
  reactions?: ReactionRollup;
  /** A git repository */
  repository?: Repository;
  /** @format uri */
  repository_url: string;
  /**
   * State of the issue; either 'open' or 'closed'
   * @example "open"
   */
  state: string;
  /** @format uri */
  timeline_url?: string;
  /**
   * Title of the issue
   * @example "Widget creation fails in Safari on OS X 10.8"
   */
  title: string;
  /** @format date-time */
  updated_at: string;
  /**
   * URL for the issue
   * @format uri
   * @example "https://api.github.com/repositories/42/issues/1"
   */
  url: string;
  user: SimpleUser | null;
}

/**
 * Issue Comment
 * Comments provide a way for people to collaborate on an issue.
 */
export interface IssueComment {
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /**
   * Contents of the issue comment
   * @example "What version of Safari were you using when you observed this bug?"
   */
  body?: string;
  body_html?: string;
  body_text?: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: string;
  /** @format uri */
  html_url: string;
  /**
   * Unique identifier of the issue comment
   * @example 42
   */
  id: number;
  /** @format uri */
  issue_url: string;
  node_id: string;
  performed_via_github_app?: Integration | null;
  reactions?: ReactionRollup;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: string;
  /**
   * URL for the issue comment
   * @format uri
   * @example "https://api.github.com/repositories/42/issues/comments/1"
   */
  url: string;
  user: SimpleUser | null;
}

/**
 * Issue Event
 * Issue Event
 */
export interface IssueEvent {
  actor: SimpleUser | null;
  assignee?: SimpleUser | null;
  assigner?: SimpleUser | null;
  /** How the author is associated with the repository. */
  author_association?: AuthorAssociation;
  /** @example "6dcb09b5b57875f334f61aebed695e2e4193db5e" */
  commit_id: string | null;
  /** @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e" */
  commit_url: string | null;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: string;
  dismissed_review?: IssueEventDismissedReview;
  /** @example "closed" */
  event: string;
  /** @example 1 */
  id: number;
  /** Issue Simple */
  issue?: IssueSimple;
  /** Issue Event Label */
  label?: IssueEventLabel;
  lock_reason?: string | null;
  /** Issue Event Milestone */
  milestone?: IssueEventMilestone;
  /** @example "MDEwOklzc3VlRXZlbnQx" */
  node_id: string;
  /** Issue Event Project Card */
  project_card?: IssueEventProjectCard;
  /** Issue Event Rename */
  rename?: IssueEventRename;
  requested_reviewer?: SimpleUser | null;
  /** Groups of organization members that gives permissions on specified repositories. */
  requested_team?: Team;
  review_requester?: SimpleUser | null;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/events/1"
   */
  url: string;
}

/** Issue Event Dismissed Review */
export interface IssueEventDismissedReview {
  dismissal_commit_id?: string | null;
  dismissal_message: string | null;
  review_id: number;
  state: string;
}

/**
 * Issue Event for Issue
 * Issue Event for Issue
 */
export interface IssueEventForIssue {
  /** Simple User */
  actor?: SimpleUser;
  /** How the author is associated with the repository. */
  author_association?: AuthorAssociation;
  /** @example "":+1:"" */
  body?: string;
  /** @example ""<p>Accusantium fugiat cumque. Autem qui nostrum. Atque quae ullam.</p>"" */
  body_html?: string;
  /** @example ""Accusantium fugiat cumque. Autem qui nostrum. Atque quae ullam."" */
  body_text?: string;
  commit_id?: string | null;
  commit_url?: string | null;
  created_at?: string;
  event?: string;
  /** @example ""https://github.com/owner-3906e11a33a3d55ba449d63f/BBB_Private_Repo/commit/480d4f47447129f015cb327536c522ca683939a1"" */
  html_url?: string;
  id?: number;
  /** @example ""https://api.github.com/repos/owner-3906e11a33a3d55ba449d63f/AAA_Public_Repo/issues/1"" */
  issue_url?: string;
  /** @example ""off-topic"" */
  lock_reason?: string;
  /** @example ""add a bunch of files"" */
  message?: string;
  node_id?: string;
  /** @example ""https://api.github.com/repos/owner-3906e11a33a3d55ba449d63f/AAA_Public_Repo/pulls/2"" */
  pull_request_url?: string;
  /** @example ""480d4f47447129f015cb327536c522ca683939a1"" */
  sha?: string;
  /** @example ""commented"" */
  state?: string;
  /** @example ""2020-07-09T00:17:51Z"" */
  submitted_at?: string;
  /** @example ""2020-07-09T00:17:36Z"" */
  updated_at?: string;
  url?: string;
}

/**
 * Issue Event Label
 * Issue Event Label
 */
export interface IssueEventLabel {
  color: string | null;
  name: string | null;
}

/**
 * Issue Event Milestone
 * Issue Event Milestone
 */
export interface IssueEventMilestone {
  title: string;
}

/**
 * Issue Event Project Card
 * Issue Event Project Card
 */
export interface IssueEventProjectCard {
  column_name: string;
  id: number;
  previous_column_name?: string;
  project_id: number;
  /** @format uri */
  project_url: string;
  /** @format uri */
  url: string;
}

/**
 * Issue Event Rename
 * Issue Event Rename
 */
export interface IssueEventRename {
  from: string;
  to: string;
}

/**
 * Issue Search Result Item
 * Issue Search Result Item
 */
export interface IssueSearchResultItem {
  active_lock_reason?: string | null;
  assignee: SimpleUser | null;
  assignees?: SimpleUser[] | null;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  body?: string;
  body_html?: string;
  body_text?: string;
  /** @format date-time */
  closed_at: string | null;
  comments: number;
  /** @format uri */
  comments_url: string;
  /** @format date-time */
  created_at: string;
  draft?: boolean;
  /** @format uri */
  events_url: string;
  /** @format uri */
  html_url: string;
  id: number;
  labels: {
    color?: string;
    default?: boolean;
    description?: string | null;
    id?: number;
    name?: string;
    node_id?: string;
    url?: string;
  }[];
  labels_url: string;
  locked: boolean;
  milestone: Milestone | null;
  node_id: string;
  number: number;
  performed_via_github_app?: Integration | null;
  pull_request?: {
    /** @format uri */
    diff_url: string | null;
    /** @format uri */
    html_url: string | null;
    /** @format date-time */
    merged_at?: string | null;
    /** @format uri */
    patch_url: string | null;
    /** @format uri */
    url: string | null;
  };
  /** A git repository */
  repository?: Repository;
  /** @format uri */
  repository_url: string;
  score: number;
  state: string;
  text_matches?: SearchResultTextMatches;
  /** @format uri */
  timeline_url?: string;
  title: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
  user: SimpleUser | null;
}

/**
 * Issue Simple
 * Issue Simple
 */
export interface IssueSimple {
  /** @example "too heated" */
  active_lock_reason?: string | null;
  assignee: SimpleUser | null;
  assignees?: SimpleUser[] | null;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /** @example "I'm having a problem with this." */
  body?: string;
  body_html?: string;
  body_text?: string;
  /** @format date-time */
  closed_at: string | null;
  /** @example 0 */
  comments: number;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
   */
  comments_url: string;
  /**
   * @format date-time
   * @example "2011-04-22T13:33:48Z"
   */
  created_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/events"
   */
  events_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/issues/1347"
   */
  html_url: string;
  /** @example 1 */
  id: number;
  labels: Label[];
  /** @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}" */
  labels_url: string;
  /** @example true */
  locked: boolean;
  milestone: Milestone | null;
  /** @example "MDU6SXNzdWUx" */
  node_id: string;
  /** @example 1347 */
  number: number;
  performed_via_github_app?: Integration | null;
  pull_request?: {
    /** @format uri */
    diff_url: string | null;
    /** @format uri */
    html_url: string | null;
    /** @format date-time */
    merged_at?: string | null;
    /** @format uri */
    patch_url: string | null;
    /** @format uri */
    url: string | null;
  };
  /** A git repository */
  repository?: Repository;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  repository_url: string;
  /** @example "open" */
  state: string;
  /** @format uri */
  timeline_url?: string;
  /** @example "Found a bug" */
  title: string;
  /**
   * @format date-time
   * @example "2011-04-22T13:33:48Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  url: string;
  user: SimpleUser | null;
}

/**
 * Job
 * Information of a job execution in a workflow run
 */
export interface Job {
  /** @example "https://api.github.com/repos/github/hello-world/check-runs/4" */
  check_run_url: string;
  /**
   * The time that the job finished, in ISO 8601 format.
   * @format date-time
   * @example "2019-08-08T08:00:00-07:00"
   */
  completed_at: string | null;
  /**
   * The outcome of the job.
   * @example "success"
   */
  conclusion: string | null;
  /**
   * The SHA of the commit that is being run.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /** @example "https://github.com/github/hello-world/runs/4" */
  html_url: string | null;
  /**
   * The id of the job.
   * @example 21
   */
  id: number;
  /**
   * The name of the job.
   * @example "test-coverage"
   */
  name: string;
  /** @example "MDg6Q2hlY2tSdW40" */
  node_id: string;
  /**
   * The id of the associated workflow run.
   * @example 5
   */
  run_id: number;
  /** @example "https://api.github.com/repos/github/hello-world/actions/runs/5" */
  run_url: string;
  /**
   * The time that the job started, in ISO 8601 format.
   * @format date-time
   * @example "2019-08-08T08:00:00-07:00"
   */
  started_at: string;
  /**
   * The phase of the lifecycle that the job is currently in.
   * @example "queued"
   */
  status: "queued" | "in_progress" | "completed";
  /** Steps in this job. */
  steps?: {
    /**
     * The time that the job finished, in ISO 8601 format.
     * @format date-time
     * @example "2019-08-08T08:00:00-07:00"
     */
    completed_at?: string | null;
    /**
     * The outcome of the job.
     * @example "success"
     */
    conclusion: string | null;
    /**
     * The name of the job.
     * @example "test-coverage"
     */
    name: string;
    /** @example 1 */
    number: number;
    /**
     * The time that the step started, in ISO 8601 format.
     * @format date-time
     * @example "2019-08-08T08:00:00-07:00"
     */
    started_at?: string | null;
    /**
     * The phase of the lifecycle that the job is currently in.
     * @example "queued"
     */
    status: "queued" | "in_progress" | "completed";
  }[];
  /** @example "https://api.github.com/repos/github/hello-world/actions/jobs/21" */
  url: string;
}

/**
 * Key
 * Key
 */
export interface Key {
  /** @format date-time */
  created_at: string;
  id: number;
  key: string;
  key_id: string;
  read_only: boolean;
  title: string;
  url: string;
  verified: boolean;
}

/**
 * Key Simple
 * Key Simple
 */
export interface KeySimple {
  id: number;
  key: string;
}

/**
 * Label
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export interface Label {
  /**
   * 6-character hex code, without the leading #, identifying the color
   * @example "FFFFFF"
   */
  color: string;
  /** @example true */
  default: boolean;
  /** @example "Something isn't working" */
  description: string | null;
  /** @example 208045946 */
  id: number;
  /**
   * The name of the label.
   * @example "bug"
   */
  name: string;
  /** @example "MDU6TGFiZWwyMDgwNDU5NDY=" */
  node_id: string;
  /**
   * URL for the label
   * @format uri
   * @example "https://api.github.com/repositories/42/labels/bug"
   */
  url: string;
}

/**
 * Label Search Result Item
 * Label Search Result Item
 */
export interface LabelSearchResultItem {
  color: string;
  default: boolean;
  description: string | null;
  id: number;
  name: string;
  node_id: string;
  score: number;
  text_matches?: SearchResultTextMatches;
  /** @format uri */
  url: string;
}

/**
 * Language
 * Language
 */
export type Language = Record<string, number>;

/**
 * License
 * License
 */
export interface License {
  /**
   * @example "
   *
   * The MIT License (MIT)
   *
   * Copyright (c) [year] [fullname]
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   * "
   */
  body: string;
  /** @example ["include-copyright"] */
  conditions: string[];
  /** @example "A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty." */
  description: string;
  /** @example true */
  featured: boolean;
  /**
   * @format uri
   * @example "http://choosealicense.com/licenses/mit/"
   */
  html_url: string;
  /** @example "Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders." */
  implementation: string;
  /** @example "mit" */
  key: string;
  /** @example ["no-liability"] */
  limitations: string[];
  /** @example "MIT License" */
  name: string;
  /** @example "MDc6TGljZW5zZW1pdA==" */
  node_id: string;
  /** @example ["commercial-use","modifications","distribution","sublicense","private-use"] */
  permissions: string[];
  /** @example "MIT" */
  spdx_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/licenses/mit"
   */
  url: string | null;
}

/**
 * License Content
 * License Content
 */
export interface LicenseContent {
  _links: {
    /** @format uri */
    git: string | null;
    /** @format uri */
    html: string | null;
    /** @format uri */
    self: string;
  };
  content: string;
  /** @format uri */
  download_url: string | null;
  encoding: string;
  /** @format uri */
  git_url: string | null;
  /** @format uri */
  html_url: string | null;
  license: LicenseSimple | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: string;
  /** @format uri */
  url: string;
}

/**
 * License Simple
 * License Simple
 */
export interface LicenseSimple {
  /** @format uri */
  html_url?: string;
  /** @example "mit" */
  key: string;
  /** @example "MIT License" */
  name: string;
  /** @example "MDc6TGljZW5zZW1pdA==" */
  node_id: string;
  /** @example "MIT" */
  spdx_id: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/licenses/mit"
   */
  url: string | null;
}

/**
 * Link
 * Hypermedia Link
 */
export interface Link {
  href: string;
}

/**
 * Link With Type
 * Hypermedia Link with Type
 */
export interface LinkWithType {
  href: string;
  type: string;
}

/** Marketplace Account */
export interface MarketplaceAccount {
  /** @format email */
  email?: string | null;
  id: number;
  login: string;
  node_id?: string;
  /** @format email */
  organization_billing_email?: string | null;
  type: string;
  /** @format uri */
  url: string;
}

/**
 * Marketplace Listing Plan
 * Marketplace Listing Plan
 */
export interface MarketplaceListingPlan {
  /**
   * @format uri
   * @example "https://api.github.com/marketplace_listing/plans/1313/accounts"
   */
  accounts_url: string;
  /** @example ["Up to 25 private repositories","11 concurrent builds"] */
  bullets: string[];
  /** @example "A professional-grade CI solution" */
  description: string;
  /** @example true */
  has_free_trial: boolean;
  /** @example 1313 */
  id: number;
  /** @example 1099 */
  monthly_price_in_cents: number;
  /** @example "Pro" */
  name: string;
  /** @example 3 */
  number: number;
  /** @example "flat-rate" */
  price_model: string;
  /** @example "published" */
  state: string;
  unit_name: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/marketplace_listing/plans/1313"
   */
  url: string;
  /** @example 11870 */
  yearly_price_in_cents: number;
}

/**
 * Marketplace Purchase
 * Marketplace Purchase
 */
export interface MarketplacePurchase {
  id: number;
  login: string;
  marketplace_pending_change?: {
    effective_date?: string;
    id?: number;
    is_installed?: boolean;
    /** Marketplace Listing Plan */
    plan?: MarketplaceListingPlan;
    unit_count?: number | null;
  };
  marketplace_purchase: {
    billing_cycle?: string;
    free_trial_ends_on?: string | null;
    is_installed?: boolean;
    next_billing_date?: string | null;
    on_free_trial?: boolean;
    /** Marketplace Listing Plan */
    plan?: MarketplaceListingPlan;
    unit_count?: number | null;
    updated_at?: string;
  };
  organization_billing_email?: string;
  type: string;
  url: string;
}

/**
 * Migration
 * A migration.
 */
export interface Migration {
  /** @format uri */
  archive_url?: string;
  /**
   * @format date-time
   * @example "2015-07-06T15:33:38-07:00"
   */
  created_at: string;
  exclude?: any[];
  exclude_attachments: boolean;
  /** @example "0b989ba4-242f-11e5-81e1-c7b6966d2516" */
  guid: string;
  /** @example 79 */
  id: number;
  /** @example true */
  lock_repositories: boolean;
  node_id: string;
  owner: SimpleUser | null;
  repositories: Repository[];
  /** @example "pending" */
  state: string;
  /**
   * @format date-time
   * @example "2015-07-06T15:33:38-07:00"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octo-org/migrations/79"
   */
  url: string;
}

/**
 * Milestone
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  /**
   * @format date-time
   * @example "2013-02-12T13:22:01Z"
   */
  closed_at: string | null;
  /** @example 8 */
  closed_issues: number;
  /**
   * @format date-time
   * @example "2011-04-10T20:09:31Z"
   */
  created_at: string;
  creator: SimpleUser | null;
  /** @example "Tracking milestone for version 1.0" */
  description: string | null;
  /**
   * @format date-time
   * @example "2012-10-09T23:39:01Z"
   */
  due_on: string | null;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/milestones/v1.0"
   */
  html_url: string;
  /** @example 1002604 */
  id: number;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels"
   */
  labels_url: string;
  /** @example "MDk6TWlsZXN0b25lMTAwMjYwNA==" */
  node_id: string;
  /**
   * The number of the milestone.
   * @example 42
   */
  number: number;
  /** @example 4 */
  open_issues: number;
  /**
   * The state of the milestone.
   * @default "open"
   * @example "open"
   */
  state: "open" | "closed";
  /**
   * The title of the milestone.
   * @example "v1.0"
   */
  title: string;
  /**
   * @format date-time
   * @example "2014-03-03T18:58:10Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1"
   */
  url: string;
}

/**
 * Minimal Repository
 * Minimal Repository
 */
export interface MinimalRepository {
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  archived?: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  clone_url?: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at?: string | null;
  default_branch?: string;
  delete_branch_on_merge?: boolean;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  disabled?: boolean;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  fork: boolean;
  /** @example 0 */
  forks?: number;
  forks_count?: number;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  git_url?: string;
  has_downloads?: boolean;
  has_issues?: boolean;
  has_pages?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  homepage?: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /** @example 1296269 */
  id: number;
  is_template?: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  language?: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  license?: {
    key?: string;
    name?: string;
    node_id?: string;
    spdx_id?: string;
    url?: string;
  } | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  mirror_url?: string | null;
  /** @example "Hello-World" */
  name: string;
  network_count?: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  /** @example 0 */
  open_issues?: number;
  open_issues_count?: number;
  owner: SimpleUser | null;
  permissions?: {
    admin?: boolean;
    pull?: boolean;
    push?: boolean;
  };
  private: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at?: string | null;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  size?: number;
  ssh_url?: string;
  stargazers_count?: number;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  subscribers_count?: number;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  svn_url?: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  temp_clone_token?: string;
  template_repository?: Repository | null;
  topics?: string[];
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at?: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  visibility?: string;
  /** @example 0 */
  watchers?: number;
  watchers_count?: number;
}

/**
 * Org Hook
 * Org Hook
 */
export interface OrgHook {
  /** @example true */
  active: boolean;
  config: {
    /** @example ""form"" */
    content_type?: string;
    /** @example ""0"" */
    insecure_ssl?: string;
    /** @example ""********"" */
    secret?: string;
    /** @example ""http://example.com/2"" */
    url?: string;
  };
  /**
   * @format date-time
   * @example "2011-09-06T17:26:27Z"
   */
  created_at: string;
  /** @example ["push","pull_request"] */
  events: string[];
  /** @example 1 */
  id: number;
  /** @example "web" */
  name: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octocat/hooks/1/pings"
   */
  ping_url: string;
  type: string;
  /**
   * @format date-time
   * @example "2011-09-06T20:39:23Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octocat/hooks/1"
   */
  url: string;
}

/**
 * Org Membership
 * Org Membership
 */
export interface OrgMembership {
  /** Organization Simple */
  organization: OrganizationSimple;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octocat"
   */
  organization_url: string;
  permissions?: {
    can_create_repository: boolean;
  };
  /** @example "admin" */
  role: string;
  /** @example "active" */
  state: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/octocat/memberships/defunkt"
   */
  url: string;
  user: SimpleUser | null;
}

/**
 * Actions Secret for an Organization
 * Secrets for GitHub Actions for an organization.
 */
export interface OrganizationActionsSecret {
  /** @format date-time */
  created_at: string;
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   */
  name: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/org/secrets/my_secret/repositories"
   */
  selected_repositories_url?: string;
  /** @format date-time */
  updated_at: string;
  /** Visibility of a secret */
  visibility: "all" | "private" | "selected";
}

/**
 * Organization Full
 * Organization Full
 */
export interface OrganizationFull {
  /** @example "https://github.com/images/error/octocat_happy.gif" */
  avatar_url: string;
  /**
   * @format email
   * @example "org@example.com"
   */
  billing_email?: string | null;
  /**
   * @format uri
   * @example "https://github.com/blog"
   */
  blog?: string;
  /** @example 8 */
  collaborators?: number | null;
  /** @example "GitHub" */
  company?: string;
  /**
   * @format date-time
   * @example "2008-01-14T04:33:35Z"
   */
  created_at: string;
  default_repository_permission?: string | null;
  /** @example "A great organization" */
  description: string | null;
  /** @example 10000 */
  disk_usage?: number | null;
  /**
   * @format email
   * @example "octocat@github.com"
   */
  email?: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /** @example 20 */
  followers: number;
  /** @example 0 */
  following: number;
  /** @example true */
  has_organization_projects: boolean;
  /** @example true */
  has_repository_projects: boolean;
  /** @example "https://api.github.com/orgs/github/hooks" */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /** @example 1 */
  id: number;
  /** @example true */
  is_verified?: boolean;
  /** @example "https://api.github.com/orgs/github/issues" */
  issues_url: string;
  /** @example "San Francisco" */
  location?: string;
  /** @example "github" */
  login: string;
  /** @example "all" */
  members_allowed_repository_creation_type?: string;
  /** @example true */
  members_can_create_internal_repositories?: boolean;
  /** @example true */
  members_can_create_pages?: boolean;
  /** @example true */
  members_can_create_private_repositories?: boolean;
  /** @example true */
  members_can_create_public_repositories?: boolean;
  /** @example true */
  members_can_create_repositories?: boolean | null;
  /** @example "https://api.github.com/orgs/github/members{/member}" */
  members_url: string;
  /** @example "github" */
  name?: string;
  /** @example "MDEyOk9yZ2FuaXphdGlvbjE=" */
  node_id: string;
  /** @example 100 */
  owned_private_repos?: number;
  plan?: {
    filled_seats?: number;
    name: string;
    private_repos: number;
    seats?: number;
    space: number;
  };
  /** @example 81 */
  private_gists?: number | null;
  /** @example 1 */
  public_gists: number;
  /** @example "https://api.github.com/orgs/github/public_members{/member}" */
  public_members_url: string;
  /** @example 2 */
  public_repos: number;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /** @example 100 */
  total_private_repos?: number;
  /** @example "github" */
  twitter_username?: string | null;
  /** @example true */
  two_factor_requirement_enabled?: boolean | null;
  /** @example "Organization" */
  type: string;
  /** @format date-time */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
}

/**
 * Organization Invitation
 * Organization Invitation
 */
export interface OrganizationInvitation {
  created_at: string;
  email: string | null;
  failed_at?: string;
  failed_reason?: string;
  id: number;
  invitation_team_url: string;
  /** @example ""https://api.github.com/organizations/16/invitations/1/teams"" */
  invitation_teams_url?: string;
  /** Simple User */
  inviter: SimpleUser;
  login: string | null;
  /** @example ""MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x"" */
  node_id: string;
  role: string;
  team_count: number;
}

/**
 * Organization Simple
 * Organization Simple
 */
export interface OrganizationSimple {
  /** @example "https://github.com/images/error/octocat_happy.gif" */
  avatar_url: string;
  /** @example "A great organization" */
  description: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /** @example "https://api.github.com/orgs/github/hooks" */
  hooks_url: string;
  /** @example 1 */
  id: number;
  /** @example "https://api.github.com/orgs/github/issues" */
  issues_url: string;
  /** @example "github" */
  login: string;
  /** @example "https://api.github.com/orgs/github/members{/member}" */
  members_url: string;
  /** @example "MDEyOk9yZ2FuaXphdGlvbjE=" */
  node_id: string;
  /** @example "https://api.github.com/orgs/github/public_members{/member}" */
  public_members_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
}

export interface PackagesBillingUsage {
  /** Free storage space (GB) for GitHub Packages. */
  included_gigabytes_bandwidth: number;
  /** Sum of the free and paid storage space (GB) for GitHuub Packages. */
  total_gigabytes_bandwidth_used: number;
  /** Total paid storage space (GB) for GitHuub Packages. */
  total_paid_gigabytes_bandwidth_used: number;
}

/**
 * GitHub Pages
 * The configuration for GitHub Pages for a repository.
 */
export interface Page {
  /**
   * Whether the Page has a custom 404 page.
   * @default false
   * @example false
   */
  custom_404: boolean;
  /**
   * The Pages site's custom domain
   * @example "example.com"
   */
  cname: string | null;
  /**
   * The web address the Page can be accessed from.
   * @format uri
   * @example "https://example.com"
   */
  html_url?: string;
  /**
   * Whether the GitHub Pages site is publicly visible. If set to \`true\`, the site is accessible to anyone on the internet. If set to \`false\`, the site will only be accessible to users who have at least \`read\` access to the repository that published the site.
   * @example true
   */
  public: boolean;
  source?: PagesSourceHash;
  /**
   * The status of the most recent build of the Page.
   * @example "built"
   */
  status: "built" | "building" | "errored" | null;
  /**
   * The API address for accessing this Page resource.
   * @format uri
   * @example "https://api.github.com/repos/github/hello-world/pages"
   */
  url: string;
}

/**
 * Page Build
 * Page Build
 */
export interface PageBuild {
  commit: string;
  /** @format date-time */
  created_at: string;
  duration: number;
  error: {
    message: string | null;
  };
  pusher: SimpleUser | null;
  status: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
}

/**
 * Page Build Status
 * Page Build Status
 */
export interface PageBuildStatus {
  /** @example "queued" */
  status: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/github/hello-world/pages/builds/latest"
   */
  url: string;
}

/** Pages Source Hash */
export interface PagesSourceHash {
  branch: string;
  path: string;
}

/** Participation Stats */
export interface ParticipationStats {
  all: number[];
  owner: number[];
}

/**
 * Porter Author
 * Porter Author
 */
export interface PorterAuthor {
  email: string;
  id: number;
  /** @format uri */
  import_url: string;
  name: string;
  remote_id: string;
  remote_name: string;
  /** @format uri */
  url: string;
}

/**
 * Porter Large File
 * Porter Large File
 */
export interface PorterLargeFile {
  oid: string;
  path: string;
  ref_name: string;
  size: number;
}

/**
 * Private User
 * Private User
 */
export interface PrivateUser {
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "There once was..." */
  bio: string | null;
  /** @example "https://github.com/blog" */
  blog: string | null;
  business_plus?: boolean;
  /** @example 8 */
  collaborators: number;
  /** @example "GitHub" */
  company: string | null;
  /**
   * @format date-time
   * @example "2008-01-14T04:33:35Z"
   */
  created_at: string;
  /** @example 10000 */
  disk_usage: number;
  /**
   * @format email
   * @example "octocat@github.com"
   */
  email: string | null;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /** @example 20 */
  followers: number;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example 0 */
  following: number;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  hireable: boolean | null;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /** @example 1 */
  id: number;
  ldap_dn?: string;
  /** @example "San Francisco" */
  location: string | null;
  /** @example "octocat" */
  login: string;
  /** @example "monalisa octocat" */
  name: string | null;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /** @example 100 */
  owned_private_repos: number;
  plan?: {
    collaborators: number;
    name: string;
    private_repos: number;
    space: number;
  };
  /** @example 81 */
  private_gists: number;
  /** @example 1 */
  public_gists: number;
  /** @example 2 */
  public_repos: number;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  site_admin: boolean;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /** @format date-time */
  suspended_at?: string | null;
  /** @example 100 */
  total_private_repos: number;
  /** @example "monalisa" */
  twitter_username?: string | null;
  /** @example true */
  two_factor_authentication: boolean;
  /** @example "User" */
  type: string;
  /**
   * @format date-time
   * @example "2008-01-14T04:33:35Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
}

/**
 * Project
 * Projects are a way to organize columns and cards of work.
 */
export interface Project {
  /**
   * Body of the project
   * @example "This project represents the sprint of the first week in January"
   */
  body: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/projects/1002604/columns"
   */
  columns_url: string;
  /**
   * @format date-time
   * @example "2011-04-10T20:09:31Z"
   */
  created_at: string;
  creator: SimpleUser | null;
  /**
   * @format uri
   * @example "https://github.com/api-playground/projects-test/projects/12"
   */
  html_url: string;
  /** @example 1002604 */
  id: number;
  /**
   * Name of the project
   * @example "Week One Sprint"
   */
  name: string;
  /** @example "MDc6UHJvamVjdDEwMDI2MDQ=" */
  node_id: string;
  /** @example 1 */
  number: number;
  /** The baseline permission that all organization members have on this project. Only present if owner is an organization. */
  organization_permission?: "read" | "write" | "admin" | "none";
  /**
   * @format uri
   * @example "https://api.github.com/repos/api-playground/projects-test"
   */
  owner_url: string;
  /** Whether or not this project can be seen by everyone. Only present if owner is an organization. */
  private?: boolean;
  /**
   * State of the project; either 'open' or 'closed'
   * @example "open"
   */
  state: string;
  /**
   * @format date-time
   * @example "2014-03-03T18:58:10Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/1002604"
   */
  url: string;
}

/**
 * Project Card
 * Project cards represent a scope of work.
 */
export interface ProjectCard {
  /**
   * Whether or not the card is archived
   * @example false
   */
  archived?: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/projects/columns/367"
   */
  column_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/api-playground/projects-test/issues/3"
   */
  content_url?: string;
  /**
   * @format date-time
   * @example "2016-09-05T14:21:06Z"
   */
  created_at: string;
  creator: SimpleUser | null;
  /**
   * The project card's ID
   * @example 42
   */
  id: number;
  /** @example "MDExOlByb2plY3RDYXJkMTQ3OA==" */
  node_id: string;
  /** @example "Add payload for delete Project column" */
  note: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/projects/120"
   */
  project_url: string;
  /**
   * @format date-time
   * @example "2016-09-05T14:20:22Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/columns/cards/1478"
   */
  url: string;
}

/**
 * Project Column
 * Project columns contain cards of work.
 */
export interface ProjectColumn {
  /**
   * @format uri
   * @example "https://api.github.com/projects/columns/367/cards"
   */
  cards_url: string;
  /**
   * @format date-time
   * @example "2016-09-05T14:18:44Z"
   */
  created_at: string;
  /**
   * The unique identifier of the project column
   * @example 42
   */
  id: number;
  /**
   * Name of the project column
   * @example "Remaining tasks"
   */
  name: string;
  /** @example "MDEzOlByb2plY3RDb2x1bW4zNjc=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/120"
   */
  project_url: string;
  /**
   * @format date-time
   * @example "2016-09-05T14:22:28Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/projects/columns/367"
   */
  url: string;
}

/**
 * Protected Branch
 * Branch protections protect branches
 */
export interface ProtectedBranch {
  allow_deletions?: {
    enabled: boolean;
  };
  allow_force_pushes?: {
    enabled: boolean;
  };
  enforce_admins?: {
    enabled: boolean;
    /** @format uri */
    url: string;
  };
  required_linear_history?: {
    enabled: boolean;
  };
  required_pull_request_reviews?: {
    dismiss_stale_reviews?: boolean;
    dismissal_restrictions?: {
      teams: Team[];
      /** @format uri */
      teams_url: string;
      /** @format uri */
      url: string;
      users: SimpleUser[];
      /** @format uri */
      users_url: string;
    };
    require_code_owner_reviews?: boolean;
    required_approving_review_count?: number;
    /** @format uri */
    url: string;
  };
  required_signatures?: {
    /** @example true */
    enabled: boolean;
    /**
     * @format uri
     * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
     */
    url: string;
  };
  /** Status Check Policy */
  required_status_checks?: StatusCheckPolicy;
  /** Branch Restriction Policy */
  restrictions?: BranchRestrictionPolicy;
  /** @format uri */
  url: string;
}

/**
 * Protected Branch Admin Enforced
 * Protected Branch Admin Enforced
 */
export interface ProtectedBranchAdminEnforced {
  /** @example true */
  enabled: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins"
   */
  url: string;
}

/**
 * Protected Branch Pull Request Review
 * Protected Branch Pull Request Review
 */
export interface ProtectedBranchPullRequestReview {
  /** @example true */
  dismiss_stale_reviews: boolean;
  dismissal_restrictions?: {
    /** The list of teams with review dismissal access. */
    teams?: Team[];
    /** @example ""https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams"" */
    teams_url?: string;
    /** @example ""https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions"" */
    url?: string;
    /** The list of users with review dismissal access. */
    users?: SimpleUser[];
    /** @example ""https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users"" */
    users_url?: string;
  };
  /** @example true */
  require_code_owner_reviews: boolean;
  /**
   * @min 1
   * @max 6
   * @example 2
   */
  required_approving_review_count?: number;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions"
   */
  url?: string;
}

/**
 * Public User
 * Public User
 */
export interface PublicUser {
  /** @format uri */
  avatar_url: string;
  bio: string | null;
  blog: string | null;
  /** @example 3 */
  collaborators?: number;
  company: string | null;
  /** @format date-time */
  created_at: string;
  /** @example 1 */
  disk_usage?: number;
  /** @format email */
  email: string | null;
  events_url: string;
  followers: number;
  /** @format uri */
  followers_url: string;
  following: number;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  hireable: boolean | null;
  /** @format uri */
  html_url: string;
  id: number;
  location: string | null;
  login: string;
  name: string | null;
  node_id: string;
  /** @format uri */
  organizations_url: string;
  /** @example 2 */
  owned_private_repos?: number;
  plan?: {
    collaborators: number;
    name: string;
    private_repos: number;
    space: number;
  };
  /** @example 1 */
  private_gists?: number;
  public_gists: number;
  public_repos: number;
  /** @format uri */
  received_events_url: string;
  /** @format uri */
  repos_url: string;
  site_admin: boolean;
  starred_url: string;
  /** @format uri */
  subscriptions_url: string;
  /** @format date-time */
  suspended_at?: string | null;
  /** @example 2 */
  total_private_repos?: number;
  twitter_username?: string | null;
  type: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
}

/**
 * Pull Request
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
export interface PullRequest {
  _links: {
    /** Hypermedia Link */
    comments: Link;
    /** Hypermedia Link */
    commits: Link;
    /** Hypermedia Link */
    html: Link;
    /** Hypermedia Link */
    issue: Link;
    /** Hypermedia Link */
    review_comment: Link;
    /** Hypermedia Link */
    review_comments: Link;
    /** Hypermedia Link */
    self: Link;
    /** Hypermedia Link */
    statuses: Link;
  };
  /** @example "too heated" */
  active_lock_reason?: string | null;
  /** @example 100 */
  additions: number;
  assignee: SimpleUser | null;
  assignees?: SimpleUser[] | null;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /** The status of auto merging a pull request. */
  auto_merge: AutoMerge;
  base: {
    label: string;
    ref: string;
    repo: {
      allow_merge_commit?: boolean;
      allow_rebase_merge?: boolean;
      allow_squash_merge?: boolean;
      archive_url: string;
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      /** @format date-time */
      created_at: string;
      default_branch: string;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      disabled: boolean;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /** @format uri */
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_pages: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      /** @format uri */
      homepage: string | null;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      /** @format uri */
      languages_url: string;
      license: LicenseSimple | null;
      master_branch?: string;
      /** @format uri */
      merges_url: string;
      milestones_url: string;
      /** @format uri */
      mirror_url: string | null;
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      owner: {
        /** @format uri */
        avatar_url: string;
        events_url: string;
        /** @format uri */
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        /** @format uri */
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        /** @format uri */
        organizations_url: string;
        /** @format uri */
        received_events_url: string;
        /** @format uri */
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        /** @format uri */
        subscriptions_url: string;
        type: string;
        /** @format uri */
        url: string;
      };
      permissions?: {
        admin: boolean;
        pull: boolean;
        push: boolean;
      };
      private: boolean;
      pulls_url: string;
      /** @format date-time */
      pushed_at: string;
      releases_url: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      /** @format uri */
      stargazers_url: string;
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      svn_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      temp_clone_token?: string;
      topics?: string[];
      trees_url: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
      watchers: number;
      watchers_count: number;
    };
    sha: string;
    user: {
      /** @format uri */
      avatar_url: string;
      events_url: string;
      /** @format uri */
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      /** @format uri */
      organizations_url: string;
      /** @format uri */
      received_events_url: string;
      /** @format uri */
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      /** @format uri */
      subscriptions_url: string;
      type: string;
      /** @format uri */
      url: string;
    };
  };
  /** @example "Please pull these awesome changes" */
  body: string | null;
  /** @example 5 */
  changed_files: number;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  closed_at: string | null;
  /** @example 10 */
  comments: number;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
   */
  comments_url: string;
  /** @example 3 */
  commits: number;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
   */
  commits_url: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string;
  /** @example 3 */
  deletions: number;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347.diff"
   */
  diff_url: string;
  /**
   * Indicates whether or not the pull request is a draft.
   * @example false
   */
  draft?: boolean;
  head: {
    label: string;
    ref: string;
    repo: {
      allow_merge_commit?: boolean;
      allow_rebase_merge?: boolean;
      allow_squash_merge?: boolean;
      archive_url: string;
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      /** @format uri */
      contributors_url: string;
      /** @format date-time */
      created_at: string;
      default_branch: string;
      /** @format uri */
      deployments_url: string;
      description: string | null;
      disabled: boolean;
      /** @format uri */
      downloads_url: string;
      /** @format uri */
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      /** @format uri */
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_pages: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      /** @format uri */
      homepage: string | null;
      /** @format uri */
      hooks_url: string;
      /** @format uri */
      html_url: string;
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      /** @format uri */
      languages_url: string;
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string | null;
        /** @format uri */
        url: string | null;
      };
      master_branch?: string;
      /** @format uri */
      merges_url: string;
      milestones_url: string;
      /** @format uri */
      mirror_url: string | null;
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      owner: {
        /** @format uri */
        avatar_url: string;
        events_url: string;
        /** @format uri */
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        /** @format uri */
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        /** @format uri */
        organizations_url: string;
        /** @format uri */
        received_events_url: string;
        /** @format uri */
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        /** @format uri */
        subscriptions_url: string;
        type: string;
        /** @format uri */
        url: string;
      };
      permissions?: {
        admin: boolean;
        pull: boolean;
        push: boolean;
      };
      private: boolean;
      pulls_url: string;
      /** @format date-time */
      pushed_at: string;
      releases_url: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      /** @format uri */
      stargazers_url: string;
      statuses_url: string;
      /** @format uri */
      subscribers_url: string;
      /** @format uri */
      subscription_url: string;
      /** @format uri */
      svn_url: string;
      /** @format uri */
      tags_url: string;
      /** @format uri */
      teams_url: string;
      temp_clone_token?: string;
      topics?: string[];
      trees_url: string;
      /** @format date-time */
      updated_at: string;
      /** @format uri */
      url: string;
      watchers: number;
      watchers_count: number;
    };
    sha: string;
    user: {
      /** @format uri */
      avatar_url: string;
      events_url: string;
      /** @format uri */
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string | null;
      /** @format uri */
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      /** @format uri */
      organizations_url: string;
      /** @format uri */
      received_events_url: string;
      /** @format uri */
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      /** @format uri */
      subscriptions_url: string;
      type: string;
      /** @format uri */
      url: string;
    };
  };
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347"
   */
  html_url: string;
  /** @example 1 */
  id: number;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  issue_url: string;
  labels: {
    color?: string;
    default?: boolean;
    description?: string | null;
    id?: number;
    name?: string;
    node_id?: string;
    url?: string;
  }[];
  /** @example true */
  locked: boolean;
  /**
   * Indicates whether maintainers can modify the pull request.
   * @example true
   */
  maintainer_can_modify: boolean;
  /** @example "e5bd3914e2e596debea16f433f57875b5b90bcd6" */
  merge_commit_sha: string | null;
  /** @example true */
  mergeable: boolean | null;
  /** @example "clean" */
  mergeable_state: string;
  merged: boolean;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  merged_at: string | null;
  merged_by: SimpleUser | null;
  milestone: Milestone | null;
  /** @example "MDExOlB1bGxSZXF1ZXN0MQ==" */
  node_id: string;
  /**
   * Number uniquely identifying the pull request within its repository.
   * @example 42
   */
  number: number;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347.patch"
   */
  patch_url: string;
  /** @example true */
  rebaseable?: boolean | null;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: TeamSimple[] | null;
  /** @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}" */
  review_comment_url: string;
  /** @example 0 */
  review_comments: number;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
   */
  review_comments_url: string;
  /**
   * State of this Pull Request. Either \`open\` or \`closed\`.
   * @example "open"
   */
  state: "open" | "closed";
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  statuses_url: string;
  /**
   * The title of the pull request.
   * @example "Amazing new feature"
   */
  title: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
   */
  url: string;
  user: SimpleUser | null;
}

/**
 * Pull Request Merge Result
 * Pull Request Merge Result
 */
export interface PullRequestMergeResult {
  merged: boolean;
  message: string;
  sha: string;
}

/** Pull Request Minimal */
export interface PullRequestMinimal {
  base: {
    ref: string;
    repo: {
      id: number;
      name: string;
      url: string;
    };
    sha: string;
  };
  head: {
    ref: string;
    repo: {
      id: number;
      name: string;
      url: string;
    };
    sha: string;
  };
  id: number;
  number: number;
  url: string;
}

/**
 * Pull Request Review
 * Pull Request Reviews are reviews on pull requests.
 */
export interface PullRequestReview {
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /**
   * The text of the review.
   * @example "This looks great."
   */
  body: string;
  body_html?: string;
  body_text?: string;
  /**
   * A commit SHA for the review.
   * @example "54bb654c9e6025347f57900a4a5c2313a96b8035"
   */
  commit_id: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
   */
  html_url: string;
  /**
   * Unique identifier of the review
   * @example 42
   */
  id: number;
  /** @example "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/12"
   */
  pull_request_url: string;
  /** @example "CHANGES_REQUESTED" */
  state: string;
  /** @format date-time */
  submitted_at?: string;
  user: SimpleUser | null;
}

/**
 * Pull Request Review Comment
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export interface PullRequestReviewComment {
  _links: {
    html: {
      /**
       * @format uri
       * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
       */
      href: string;
    };
    pull_request: {
      /**
       * @format uri
       * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
       */
      href: string;
    };
    self: {
      /**
       * @format uri
       * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
       */
      href: string;
    };
  };
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /**
   * The text of the comment.
   * @example "We should probably include a check for null values here."
   */
  body: string;
  /** @example ""<p>comment body</p>"" */
  body_html?: string;
  /** @example ""comment body"" */
  body_text?: string;
  /**
   * The SHA of the commit to which the comment applies.
   * @example "6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  commit_id: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: string;
  /**
   * The diff of the line that the comment refers to.
   * @example "@@ -16,33 +16,40 @@ public class Connection : IConnection..."
   */
  diff_hunk: string;
  /**
   * HTML URL for the pull request review comment.
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
   */
  html_url: string;
  /**
   * The ID of the pull request review comment.
   * @example 1
   */
  id: number;
  /**
   * The comment ID to reply to.
   * @example 8
   */
  in_reply_to_id?: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  line?: number;
  /**
   * The node ID of the pull request review comment.
   * @example "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw"
   */
  node_id: string;
  /**
   * The SHA of the original commit to which the comment applies.
   * @example "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840"
   */
  original_commit_id: string;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  original_line?: number;
  /**
   * The index of the original line in the diff to which the comment applies.
   * @example 4
   */
  original_position: number;
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   */
  original_start_line?: number | null;
  /**
   * The relative path of the file to which the comment applies.
   * @example "config/database.yaml"
   */
  path: string;
  /**
   * The line index in the diff to which the comment applies.
   * @example 1
   */
  position: number;
  /**
   * The ID of the pull request review to which the comment belongs.
   * @example 42
   */
  pull_request_review_id: number | null;
  /**
   * URL for the pull request that the review comment belongs to.
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
   */
  pull_request_url: string;
  reactions?: ReactionRollup;
  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   * @default "RIGHT"
   */
  side?: "LEFT" | "RIGHT";
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   */
  start_line?: number | null;
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
  start_side?: "LEFT" | "RIGHT" | null;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: string;
  /**
   * URL for the pull request review comment
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
   */
  url: string;
  /** Simple User */
  user: SimpleUser;
}

/**
 * Pull Request Review Request
 * Pull Request Review Request
 */
export interface PullRequestReviewRequest {
  teams: TeamSimple[];
  users: SimpleUser[];
}

/**
 * Pull Request Simple
 * Pull Request Simple
 */
export interface PullRequestSimple {
  _links: {
    /** Hypermedia Link */
    comments: Link;
    /** Hypermedia Link */
    commits: Link;
    /** Hypermedia Link */
    html: Link;
    /** Hypermedia Link */
    issue: Link;
    /** Hypermedia Link */
    review_comment: Link;
    /** Hypermedia Link */
    review_comments: Link;
    /** Hypermedia Link */
    self: Link;
    /** Hypermedia Link */
    statuses: Link;
  };
  /** @example "too heated" */
  active_lock_reason?: string | null;
  assignee: SimpleUser | null;
  assignees?: SimpleUser[] | null;
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /** The status of auto merging a pull request. */
  auto_merge: AutoMerge;
  base: {
    label: string;
    ref: string;
    /** A git repository */
    repo: Repository;
    sha: string;
    user: SimpleUser | null;
  };
  /** @example "Please pull these awesome changes" */
  body: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  closed_at: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
   */
  comments_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
   */
  commits_url: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347.diff"
   */
  diff_url: string;
  /**
   * Indicates whether or not the pull request is a draft.
   * @example false
   */
  draft?: boolean;
  head: {
    label: string;
    ref: string;
    /** A git repository */
    repo: Repository;
    sha: string;
    user: SimpleUser | null;
  };
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347"
   */
  html_url: string;
  /** @example 1 */
  id: number;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  issue_url: string;
  labels: {
    color?: string;
    default?: boolean;
    description?: string;
    id?: number;
    name?: string;
    node_id?: string;
    url?: string;
  }[];
  /** @example true */
  locked: boolean;
  /** @example "e5bd3914e2e596debea16f433f57875b5b90bcd6" */
  merge_commit_sha: string | null;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  merged_at: string | null;
  milestone: Milestone | null;
  /** @example "MDExOlB1bGxSZXF1ZXN0MQ==" */
  node_id: string;
  /** @example 1347 */
  number: number;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1347.patch"
   */
  patch_url: string;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: TeamSimple[] | null;
  /** @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}" */
  review_comment_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
   */
  review_comments_url: string;
  /** @example "open" */
  state: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  statuses_url: string;
  /** @example "new-feature" */
  title: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
   */
  url: string;
  user: SimpleUser | null;
}

/** Rate Limit */
export interface RateLimit {
  limit: number;
  remaining: number;
  reset: number;
}

/**
 * Rate Limit Overview
 * Rate Limit Overview
 */
export interface RateLimitOverview {
  rate: RateLimit;
  resources: {
    code_scanning_upload?: RateLimit;
    core: RateLimit;
    graphql?: RateLimit;
    integration_manifest?: RateLimit;
    search: RateLimit;
    source_import?: RateLimit;
  };
}

/**
 * Reaction
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface Reaction {
  /**
   * The reaction to use
   * @example "heart"
   */
  content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
  /**
   * @format date-time
   * @example "2016-05-20T20:09:31Z"
   */
  created_at: string;
  /** @example 1 */
  id: number;
  /** @example "MDg6UmVhY3Rpb24x" */
  node_id: string;
  user: SimpleUser | null;
}

/** Reaction Rollup */
export interface ReactionRollup {
  "+1": number;
  "-1": number;
  confused: number;
  eyes: number;
  heart: number;
  hooray: number;
  laugh: number;
  rocket: number;
  total_count: number;
  /** @format uri */
  url: string;
}

/**
 * Referrer Traffic
 * Referrer Traffic
 */
export interface ReferrerTraffic {
  /** @example 4 */
  count: number;
  /** @example "Google" */
  referrer: string;
  /** @example 3 */
  uniques: number;
}

/**
 * Release
 * A release.
 */
export interface Release {
  assets: ReleaseAsset[];
  /** @format uri */
  assets_url: string;
  /** Simple User */
  author: SimpleUser;
  body?: string | null;
  body_html?: string;
  body_text?: string;
  /** @format date-time */
  created_at: string;
  /**
   * true to create a draft (unpublished) release, false to create a published one.
   * @example false
   */
  draft: boolean;
  /** @format uri */
  html_url: string;
  id: number;
  name: string | null;
  node_id: string;
  /**
   * Whether to identify the release as a prerelease or a full release.
   * @example false
   */
  prerelease: boolean;
  /** @format date-time */
  published_at: string | null;
  /**
   * The name of the tag.
   * @example "v1.0.0"
   */
  tag_name: string;
  /** @format uri */
  tarball_url: string | null;
  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   * @example "master"
   */
  target_commitish: string;
  upload_url: string;
  /** @format uri */
  url: string;
  /** @format uri */
  zipball_url: string | null;
}

/**
 * Release Asset
 * Data related to a release.
 */
export interface ReleaseAsset {
  /** @format uri */
  browser_download_url: string;
  content_type: string;
  /** @format date-time */
  created_at: string;
  download_count: number;
  id: number;
  label: string | null;
  /**
   * The file name of the asset.
   * @example "Team Environment"
   */
  name: string;
  node_id: string;
  size: number;
  /** State of the release asset. */
  state: "uploaded" | "open";
  /** @format date-time */
  updated_at: string;
  uploader: SimpleUser | null;
  /** @format uri */
  url: string;
}

/**
 * Repo Search Result Item
 * Repo Search Result Item
 */
export interface RepoSearchResultItem {
  allow_merge_commit?: boolean;
  allow_rebase_merge?: boolean;
  allow_squash_merge?: boolean;
  archive_url: string;
  archived: boolean;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  clone_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  /** @format uri */
  contributors_url: string;
  /** @format date-time */
  created_at: string;
  default_branch: string;
  delete_branch_on_merge?: boolean;
  /** @format uri */
  deployments_url: string;
  description: string | null;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /** @format uri */
  downloads_url: string;
  /** @format uri */
  events_url: string;
  fork: boolean;
  forks: number;
  forks_count: number;
  /** @format uri */
  forks_url: string;
  full_name: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  has_downloads: boolean;
  has_issues: boolean;
  has_pages: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  /** @format uri */
  homepage: string | null;
  /** @format uri */
  hooks_url: string;
  /** @format uri */
  html_url: string;
  id: number;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  language: string | null;
  /** @format uri */
  languages_url: string;
  license: LicenseSimple | null;
  master_branch?: string;
  /** @format uri */
  merges_url: string;
  milestones_url: string;
  /** @format uri */
  mirror_url: string | null;
  name: string;
  node_id: string;
  notifications_url: string;
  open_issues: number;
  open_issues_count: number;
  owner: SimpleUser | null;
  permissions?: {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  private: boolean;
  pulls_url: string;
  /** @format date-time */
  pushed_at: string;
  releases_url: string;
  score: number;
  size: number;
  ssh_url: string;
  stargazers_count: number;
  /** @format uri */
  stargazers_url: string;
  statuses_url: string;
  /** @format uri */
  subscribers_url: string;
  /** @format uri */
  subscription_url: string;
  /** @format uri */
  svn_url: string;
  /** @format uri */
  tags_url: string;
  /** @format uri */
  teams_url: string;
  temp_clone_token?: string;
  text_matches?: SearchResultTextMatches;
  topics?: string[];
  trees_url: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
  watchers: number;
  watchers_count: number;
}

/**
 * Repository
 * A git repository
 */
export interface Repository {
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /**
   * Whether the repository is archived.
   * @default false
   */
  archived: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  fork: boolean;
  forks: number;
  /** @example 9 */
  forks_count: number;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /**
   * Whether downloads are enabled.
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether issues are enabled.
   * @default true
   * @example true
   */
  has_issues: boolean;
  has_pages: boolean;
  /**
   * Whether projects are enabled.
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @default true
   * @example true
   */
  has_wiki: boolean;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * Unique identifier of the repository
   * @example 42
   */
  id: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   * @example true
   */
  is_template?: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  language: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  license: LicenseSimple | null;
  master_branch?: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  network_count?: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  open_issues: number;
  /** @example 0 */
  open_issues_count: number;
  owner: SimpleUser | null;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  /**
   * Whether the repository is private or public.
   * @default false
   */
  private: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string | null;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example 108 */
  size: number;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /** @example 80 */
  stargazers_count: number;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example ""2020-07-09T00:17:42Z"" */
  starred_at?: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  subscribers_count?: number;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  temp_clone_token?: string;
  template_repository?: {
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    allow_squash_merge?: boolean;
    archive_url?: string;
    archived?: boolean;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    clone_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    created_at?: string;
    default_branch?: string;
    delete_branch_on_merge?: boolean;
    deployments_url?: string;
    description?: string;
    disabled?: boolean;
    downloads_url?: string;
    events_url?: string;
    fork?: boolean;
    forks_count?: number;
    forks_url?: string;
    full_name?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    has_downloads?: boolean;
    has_issues?: boolean;
    has_pages?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    homepage?: string;
    hooks_url?: string;
    html_url?: string;
    id?: number;
    is_template?: boolean;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    language?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    mirror_url?: string;
    name?: string;
    network_count?: number;
    node_id?: string;
    notifications_url?: string;
    open_issues_count?: number;
    owner?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    permissions?: {
      admin?: boolean;
      pull?: boolean;
      push?: boolean;
    };
    private?: boolean;
    pulls_url?: string;
    pushed_at?: string;
    releases_url?: string;
    size?: number;
    ssh_url?: string;
    stargazers_count?: number;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_count?: number;
    subscribers_url?: string;
    subscription_url?: string;
    svn_url?: string;
    tags_url?: string;
    teams_url?: string;
    temp_clone_token?: string;
    topics?: string[];
    trees_url?: string;
    updated_at?: string;
    url?: string;
    visibility?: string;
    watchers_count?: number;
  } | null;
  topics?: string[];
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;
  watchers: number;
  /** @example 80 */
  watchers_count: number;
}

/**
 * Repository Collaborator Permission
 * Repository Collaborator Permission
 */
export interface RepositoryCollaboratorPermission {
  permission: string;
  user: SimpleUser | null;
}

/**
 * Repository Invitation
 * Repository invitations let you manage who you collaborate with.
 */
export interface RepositoryInvitation {
  /**
   * @format date-time
   * @example "2016-06-13T14:52:50-05:00"
   */
  created_at: string;
  /** Whether or not the invitation has expired */
  expired?: boolean;
  /** @example "https://github.com/octocat/Hello-World/invitations" */
  html_url: string;
  /**
   * Unique identifier of the repository invitation.
   * @example 42
   */
  id: number;
  invitee: SimpleUser | null;
  inviter: SimpleUser | null;
  node_id: string;
  /**
   * The permission associated with the invitation.
   * @example "read"
   */
  permissions: "read" | "write" | "admin";
  /** Minimal Repository */
  repository: MinimalRepository;
  /**
   * URL for the repository invitation
   * @example "https://api.github.com/user/repository-invitations/1"
   */
  url: string;
}

/**
 * Repository Invitation
 * Repository invitations let you manage who you collaborate with.
 */
export interface RepositorySubscription {
  /**
   * @format date-time
   * @example "2012-10-06T21:34:12Z"
   */
  created_at: string;
  /** Determines if all notifications should be blocked from this repository. */
  ignored: boolean;
  reason: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
  /**
   * Determines if notifications should be received from this repository.
   * @example true
   */
  subscribed: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/example/subscription"
   */
  url: string;
}

/**
 * Legacy Review Comment
 * Legacy Review Comment
 */
export interface ReviewComment {
  _links: {
    /** Hypermedia Link */
    html: Link;
    /** Hypermedia Link */
    pull_request: Link;
    /** Hypermedia Link */
    self: Link;
  };
  /** How the author is associated with the repository. */
  author_association: AuthorAssociation;
  /** @example "Great stuff" */
  body: string;
  body_html?: string;
  body_text?: string;
  /** @example "6dcb09b5b57875f334f61aebed695e2e4193db5e" */
  commit_id: string;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: string;
  /** @example "@@ -16,33 +16,40 @@ public class Connection : IConnection..." */
  diff_hunk: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
   */
  html_url: string;
  /** @example 10 */
  id: number;
  /** @example 8 */
  in_reply_to_id?: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  line?: number;
  /** @example "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw" */
  node_id: string;
  /** @example "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840" */
  original_commit_id: string;
  /**
   * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  original_line?: number;
  /** @example 4 */
  original_position: number;
  /**
   * The original first line of the range for a multi-line comment.
   * @example 2
   */
  original_start_line?: number | null;
  /** @example "file1.txt" */
  path: string;
  /** @example 1 */
  position: number | null;
  /** @example 42 */
  pull_request_review_id: number | null;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
   */
  pull_request_url: string;
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
  side?: "LEFT" | "RIGHT";
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   */
  start_line?: number | null;
  /**
   * The side of the first line of the range for a multi-line comment.
   * @default "RIGHT"
   */
  start_side?: "LEFT" | "RIGHT" | null;
  /**
   * @format date-time
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
   */
  url: string;
  user: SimpleUser | null;
}

/**
 * Self hosted runners
 * A self hosted runner
 */
export interface Runner {
  busy: boolean;
  /**
   * The id of the runner.
   * @example 5
   */
  id: number;
  labels: {
    /** Unique identifier of the label. */
    id?: number;
    /** Name of the label. */
    name?: string;
    /** The type of label. Read-only labels are applied automatically when the runner is configured. */
    type?: "read-only" | "custom";
  }[];
  /**
   * The name of the runner.
   * @example "iMac"
   */
  name: string;
  /**
   * The Operating System of the runner.
   * @example "macos"
   */
  os: string;
  /**
   * The status of the runner.
   * @example "online"
   */
  status: string;
}

/**
 * Runner Application
 * Runner Application
 */
export interface RunnerApplication {
  architecture: string;
  download_url: string;
  filename: string;
  os: string;
}

export interface RunnerGroupsEnterprise {
  allows_public_repositories: boolean;
  default: boolean;
  id: number;
  name: string;
  runners_url: string;
  selected_organizations_url?: string;
  visibility: string;
}

export interface RunnerGroupsOrg {
  allows_public_repositories: boolean;
  default: boolean;
  id: number;
  inherited: boolean;
  inherited_allows_public_repositories?: boolean;
  name: string;
  runners_url: string;
  /** Link to the selected repositories resource for this runner group. Not present unless visibility was set to \`selected\` */
  selected_repositories_url?: string;
  visibility: string;
}

export interface ScimEnterpriseGroup {
  displayName?: string;
  externalId?: string | null;
  id: string;
  members?: {
    $ref?: string;
    display?: string;
    value?: string;
  }[];
  meta?: {
    created?: string;
    lastModified?: string;
    location?: string;
    resourceType?: string;
  };
  schemas: string[];
}

export interface ScimEnterpriseUser {
  active?: boolean;
  emails?: {
    primary?: boolean;
    type?: string;
    value?: string;
  }[];
  externalId?: string;
  groups?: {
    value?: string;
  }[];
  id: string;
  meta?: {
    created?: string;
    lastModified?: string;
    location?: string;
    resourceType?: string;
  };
  name?: {
    familyName?: string;
    givenName?: string;
  };
  schemas: string[];
  userName?: string;
}

/**
 * Scim Error
 * Scim Error
 */
export interface ScimError {
  detail?: string | null;
  documentation_url?: string | null;
  message?: string | null;
  schemas?: string[];
  scimType?: string | null;
  status?: number;
}

export interface ScimGroupListEnterprise {
  Resources: {
    displayName?: string;
    externalId?: string | null;
    id: string;
    members?: {
      $ref?: string;
      display?: string;
      value?: string;
    }[];
    meta?: {
      created?: string;
      lastModified?: string;
      location?: string;
      resourceType?: string;
    };
    schemas: string[];
  }[];
  itemsPerPage: number;
  schemas: string[];
  startIndex: number;
  totalResults: number;
}

/**
 * SCIM /Users
 * SCIM /Users provisioning endpoints
 */
export interface ScimUser {
  /**
   * The active status of the User.
   * @example true
   */
  active: boolean;
  /**
   * The name of the user, suitable for display to end-users
   * @example "Jon Doe"
   */
  displayName?: string | null;
  /**
   * user emails
   * @minItems 1
   * @example [{"value":"someone@example.com","primary":true},{"value":"another@example.com","primary":false}]
   */
  emails: {
    primary?: boolean;
    value: string;
  }[];
  /**
   * The ID of the User.
   * @example "a7b0f98395"
   */
  externalId: string | null;
  /** associated groups */
  groups?: {
    display?: string;
    value?: string;
  }[];
  /**
   * Unique identifier of an external identity
   * @example "1b78eada-9baa-11e6-9eb6-a431576d590e"
   */
  id: string;
  meta: {
    /**
     * @format date-time
     * @example "2019-01-24T22:45:36.000Z"
     */
    created?: string;
    /**
     * @format date-time
     * @example "2019-01-24T22:45:36.000Z"
     */
    lastModified?: string;
    /**
     * @format uri
     * @example "https://api.github.com/scim/v2/organizations/myorg-123abc55141bfd8f/Users/c42772b5-2029-11e9-8543-9264a97dec8d"
     */
    location?: string;
    /** @example "User" */
    resourceType?: string;
  };
  /** @example {"givenName":"Jane","familyName":"User"} */
  name: {
    familyName: string | null;
    formatted?: string | null;
    givenName: string | null;
  };
  /**
   * Set of operations to be performed
   * @minItems 1
   * @example [{"op":"replace","value":{"active":false}}]
   */
  operations?: {
    op: "add" | "remove" | "replace";
    path?: string;
    value?: string | object | any[];
  }[];
  /** The ID of the organization. */
  organization_id?: number;
  /**
   * SCIM schema used.
   * @minItems 1
   */
  schemas: string[];
  /**
   * Configured by the admin. Could be an email, login, or username
   * @example "someone@example.com"
   */
  userName: string | null;
}

/**
 * SCIM User List
 * SCIM User List
 */
export interface ScimUserList {
  Resources: ScimUser[];
  /** @example 10 */
  itemsPerPage: number;
  /**
   * SCIM schema used.
   * @minItems 1
   */
  schemas: string[];
  /** @example 1 */
  startIndex: number;
  /** @example 3 */
  totalResults: number;
}

export interface ScimUserListEnterprise {
  Resources: {
    active?: boolean;
    emails?: {
      primary?: boolean;
      type?: string;
      value?: string;
    }[];
    externalId?: string;
    groups?: {
      value?: string;
    }[];
    id: string;
    meta?: {
      created?: string;
      lastModified?: string;
      location?: string;
      resourceType?: string;
    };
    name?: {
      familyName?: string;
      givenName?: string;
    };
    schemas: string[];
    userName?: string;
  }[];
  itemsPerPage: number;
  schemas: string[];
  startIndex: number;
  totalResults: number;
}

/** Scoped Installation */
export interface ScopedInstallation {
  /** Simple User */
  account: SimpleUser;
  /** @example true */
  has_multiple_single_files?: boolean;
  /** The permissions granted to the user-to-server access token. */
  permissions: AppPermissions;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repositories_url: string;
  /** Describe whether all repositories have been selected or there's a selection involved */
  repository_selection: "all" | "selected";
  /** @example "config.yaml" */
  single_file_name: string | null;
  /** @example ["config.yml",".github/issue_TEMPLATE.md"] */
  single_file_paths?: string[];
}

/** Search Result Text Matches */
export type SearchResultTextMatches = {
  fragment?: string;
  matches?: {
    indices?: number[];
    text?: string;
  }[];
  object_type?: string | null;
  object_url?: string;
  property?: string;
}[];

export interface SecretScanningAlert {
  /** The time that the alert was created in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
  created_at?: AlertCreatedAt;
  /** The GitHub URL of the alert resource. */
  html_url?: AlertHtmlUrl;
  /** The security alert number. */
  number?: AlertNumber;
  /** **Required when the \`state\` is \`resolved\`.** The reason for resolving the alert. Can be one of \`false_positive\`, \`wont_fix\`, \`revoked\`, or \`used_in_tests\`. */
  resolution?: SecretScanningAlertResolution;
  /**
   * The time that the alert was resolved in ISO 8601 format: \`YYYY-MM-DDTHH:MM:SSZ\`.
   * @format date-time
   */
  resolved_at?: string | null;
  /** Simple User */
  resolved_by?: SimpleUser;
  /** The secret that was detected. */
  secret?: string;
  /** The type of secret that secret scanning detected. */
  secret_type?: string;
  /** Sets the state of the secret scanning alert. Can be either \`open\` or \`resolved\`. You must provide \`resolution\` when you set the state to \`resolved\`. */
  state?: SecretScanningAlertState;
  /** The REST API URL of the alert resource. */
  url?: AlertUrl;
}

/** **Required when the \`state\` is \`resolved\`.** The reason for resolving the alert. Can be one of \`false_positive\`, \`wont_fix\`, \`revoked\`, or \`used_in_tests\`. */
export type SecretScanningAlertResolution = "false_positive" | "wont_fix" | "revoked" | "used_in_tests" | null;

/** Sets the state of the secret scanning alert. Can be either \`open\` or \`resolved\`. You must provide \`resolution\` when you set the state to \`resolved\`. */
export enum SecretScanningAlertState {
  Open = "open",
  Resolved = "resolved",
}

export interface SelectedActions {
  /** Whether GitHub-owned actions are allowed. For example, this includes the actions in the \`actions\` organization. */
  github_owned_allowed: boolean;
  /** Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, \`monalisa/octocat@*\`, \`monalisa/octocat@v2\`, \`monalisa/*\`." */
  patterns_allowed: string[];
  /** Whether actions in GitHub Marketplace from verified creators are allowed. Set to \`true\` to allow all GitHub Marketplace actions by verified creators. */
  verified_allowed: boolean;
}

/** The API URL to use to get or set the actions that are allowed to run, when \`allowed_actions\` is set to \`selected\`. */
export type SelectedActionsUrl = string;

/**
 * Short Blob
 * Short Blob
 */
export interface ShortBlob {
  sha: string;
  url: string;
}

/**
 * Short Branch
 * Short Branch
 */
export interface ShortBranch {
  commit: {
    sha: string;
    /** @format uri */
    url: string;
  };
  name: string;
  protected: boolean;
  /** Branch Protection */
  protection?: BranchProtection;
  /** @format uri */
  protection_url?: string;
}

/**
 * Simple Commit
 * Simple Commit
 */
export interface SimpleCommit {
  author: {
    email: string;
    name: string;
  } | null;
  committer: {
    email: string;
    name: string;
  } | null;
  id: string;
  message: string;
  /** @format date-time */
  timestamp: string;
  tree_id: string;
}

/** Simple Commit Status */
export interface SimpleCommitStatus {
  /** @format uri */
  avatar_url: string | null;
  context: string;
  /** @format date-time */
  created_at: string;
  description: string | null;
  id: number;
  node_id: string;
  required?: boolean | null;
  state: string;
  /** @format uri */
  target_url: string;
  /** @format date-time */
  updated_at: string;
  /** @format uri */
  url: string;
}

/**
 * Simple User
 * Simple User
 */
export type SimpleUser = {
  /**
   * @format uri
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /** @example "https://api.github.com/users/octocat/events{/privacy}" */
  events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /** @example "https://api.github.com/users/octocat/following{/other_user}" */
  following_url: string;
  /** @example "https://api.github.com/users/octocat/gists{/gist_id}" */
  gists_url: string;
  /** @example "41d064eb2195891e12d0413f63227ea7" */
  gravatar_id: string | null;
  /**
   * @format uri
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /** @example 1 */
  id: number;
  /** @example "octocat" */
  login: string;
  /** @example "MDQ6VXNlcjE=" */
  node_id: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  site_admin: boolean;
  /** @example ""2020-07-09T00:17:55Z"" */
  starred_at?: string;
  /** @example "https://api.github.com/users/octocat/starred{/owner}{/repo}" */
  starred_url: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /** @example "User" */
  type: string;
  /**
   * @format uri
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
};

/**
 * Stargazer
 * Stargazer
 */
export interface Stargazer {
  /** @format date-time */
  starred_at: string;
  user: SimpleUser | null;
}

/**
 * Starred Repository
 * Starred Repository
 */
export interface StarredRepository {
  /** A git repository */
  repo: Repository;
  /** @format date-time */
  starred_at: string;
}

/**
 * Status
 * The status of a commit.
 */
export interface Status {
  avatar_url: string | null;
  context: string;
  created_at: string;
  /** Simple User */
  creator: SimpleUser;
  description: string;
  id: number;
  node_id: string;
  state: string;
  target_url: string;
  updated_at: string;
  url: string;
}

/**
 * Status Check Policy
 * Status Check Policy
 */
export interface StatusCheckPolicy {
  /** @example ["continuous-integration/travis-ci"] */
  contexts: string[];
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts"
   */
  contexts_url: string;
  /** @example true */
  strict: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks"
   */
  url: string;
}

/**
 * Tag
 * Tag
 */
export interface Tag {
  commit: {
    sha: string;
    /** @format uri */
    url: string;
  };
  /** @example "v0.1" */
  name: string;
  node_id: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/tarball/v0.1"
   */
  tarball_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World/zipball/v0.1"
   */
  zipball_url: string;
}

/**
 * Team
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  description: string | null;
  /**
   * @format uri
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  id: number;
  members_url: string;
  name: string;
  node_id: string;
  parent?: TeamSimple | null;
  permission: string;
  privacy?: string;
  /** @format uri */
  repositories_url: string;
  slug: string;
  /** @format uri */
  url: string;
}

/**
 * Team Discussion
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export interface TeamDiscussion {
  author: SimpleUser | null;
  /**
   * The main text of the discussion.
   * @example "Please suggest improvements to our workflow in comments."
   */
  body: string;
  /** @example "<p>Hi! This is an area for us to collaborate as a team</p>" */
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   * @example "0307116bbf7ced493b8d8a346c650b71"
   */
  body_version: string;
  /** @example 0 */
  comments_count: number;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2343027/discussions/1/comments"
   */
  comments_url: string;
  /**
   * @format date-time
   * @example "2018-01-25T18:56:31Z"
   */
  created_at: string;
  /**
   * @format uri
   * @example "https://github.com/orgs/github/teams/justice-league/discussions/1"
   */
  html_url: string;
  /** @format date-time */
  last_edited_at: string | null;
  /** @example "MDE0OlRlYW1EaXNjdXNzaW9uMQ==" */
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   * @example 42
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   * @example true
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   * @example true
   */
  private: boolean;
  reactions?: ReactionRollup;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2343027"
   */
  team_url: string;
  /**
   * The title of the discussion.
   * @example "How can we improve our workflow?"
   */
  title: string;
  /**
   * @format date-time
   * @example "2018-01-25T18:56:31Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2343027/discussions/1"
   */
  url: string;
}

/**
 * Team Discussion Comment
 * A reply to a discussion within a team.
 */
export interface TeamDiscussionComment {
  author: SimpleUser | null;
  /**
   * The main text of the comment.
   * @example "I agree with this suggestion."
   */
  body: string;
  /** @example "<p>Do you like apples?</p>" */
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   * @example "0307116bbf7ced493b8d8a346c650b71"
   */
  body_version: string;
  /**
   * @format date-time
   * @example "2018-01-15T23:53:58Z"
   */
  created_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2403582/discussions/1"
   */
  discussion_url: string;
  /**
   * @format uri
   * @example "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1"
   */
  html_url: string;
  /** @format date-time */
  last_edited_at: string | null;
  /** @example "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=" */
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   * @example 42
   */
  number: number;
  reactions?: ReactionRollup;
  /**
   * @format date-time
   * @example "2018-01-15T23:53:58Z"
   */
  updated_at: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1"
   */
  url: string;
}

/**
 * Full Team
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamFull {
  /**
   * @format date-time
   * @example "2017-07-14T16:53:42Z"
   */
  created_at: string;
  /** @example "A great team." */
  description: string | null;
  /**
   * @format uri
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  /**
   * Unique identifier of the team
   * @example 42
   */
  id: number;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @example "uid=example,ou=users,dc=github,dc=com"
   */
  ldap_dn?: string;
  /** @example 3 */
  members_count: number;
  /** @example "https://api.github.com/organizations/1/team/1/members{/member}" */
  members_url: string;
  /**
   * Name of the team
   * @example "Developers"
   */
  name: string;
  /** @example "MDQ6VGVhbTE=" */
  node_id: string;
  /** Organization Full */
  organization: OrganizationFull;
  parent?: TeamSimple | null;
  /**
   * Permission that the team will have for its repositories
   * @example "push"
   */
  permission: string;
  /**
   * The level of privacy this team should have
   * @example "closed"
   */
  privacy?: "closed" | "secret";
  /** @example 10 */
  repos_count: number;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1/repos"
   */
  repositories_url: string;
  /** @example "justice-league" */
  slug: string;
  /**
   * @format date-time
   * @example "2017-08-17T12:37:15Z"
   */
  updated_at: string;
  /**
   * URL for the team
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1"
   */
  url: string;
}

/**
 * Team Membership
 * Team Membership
 */
export interface TeamMembership {
  /**
   * The role of the user in the team.
   * @default "member"
   * @example "member"
   */
  role: "member" | "maintainer";
  state: string;
  /** @format uri */
  url: string;
}

/**
 * Team Project
 * A team's access to a project.
 */
export interface TeamProject {
  body: string | null;
  columns_url: string;
  created_at: string;
  /** Simple User */
  creator: SimpleUser;
  html_url: string;
  id: number;
  name: string;
  node_id: string;
  number: number;
  /** The organization permission for this project. Only present when owner is an organization. */
  organization_permission?: string;
  owner_url: string;
  permissions: {
    admin: boolean;
    read: boolean;
    write: boolean;
  };
  /** Whether the project is private or not. Only present when owner is an organization. */
  private?: boolean;
  state: string;
  updated_at: string;
  url: string;
}

/**
 * Team Repository
 * A team's access to a repository.
 */
export interface TeamRepository {
  /**
   * Whether to allow merge commits for pull requests.
   * @default true
   * @example true
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow rebase merges for pull requests.
   * @default true
   * @example true
   */
  allow_rebase_merge?: boolean;
  /**
   * Whether to allow squash merges for pull requests.
   * @default true
   * @example true
   */
  allow_squash_merge?: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}" */
  archive_url: string;
  /**
   * Whether the repository is archived.
   * @default false
   */
  archived: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}" */
  assignees_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}" */
  blobs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}" */
  branches_url: string;
  /** @example "https://github.com/octocat/Hello-World.git" */
  clone_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}" */
  collaborators_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}" */
  comments_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}" */
  commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}" */
  compare_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}" */
  contents_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: string | null;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  /**
   * Whether to delete head branches when pull requests are merged
   * @default false
   * @example false
   */
  delete_branch_on_merge?: boolean;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /** @example "This your first repo!" */
  description: string | null;
  /** Returns whether or not this repository disabled. */
  disabled: boolean;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  fork: boolean;
  forks: number;
  /** @example 9 */
  forks_count: number;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /** @example "octocat/Hello-World" */
  full_name: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}" */
  git_commits_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}" */
  git_refs_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}" */
  git_tags_url: string;
  /** @example "git:github.com/octocat/Hello-World.git" */
  git_url: string;
  /**
   * Whether downloads are enabled.
   * @default true
   * @example true
   */
  has_downloads: boolean;
  /**
   * Whether issues are enabled.
   * @default true
   * @example true
   */
  has_issues: boolean;
  has_pages: boolean;
  /**
   * Whether projects are enabled.
   * @default true
   * @example true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @default true
   * @example true
   */
  has_wiki: boolean;
  /**
   * @format uri
   * @example "https://github.com"
   */
  homepage: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @format uri
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * Unique identifier of the repository
   * @example 42
   */
  id: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @default false
   * @example true
   */
  is_template?: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}" */
  issue_comment_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}" */
  issue_events_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}" */
  issues_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}" */
  keys_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}" */
  labels_url: string;
  language: string | null;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  license: LicenseSimple | null;
  master_branch?: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}" */
  milestones_url: string;
  /**
   * @format uri
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  network_count?: number;
  /** @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5" */
  node_id: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}" */
  notifications_url: string;
  open_issues: number;
  /** @example 0 */
  open_issues_count: number;
  owner: SimpleUser | null;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  /**
   * Whether the repository is private or public.
   * @default false
   */
  private: boolean;
  /** @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}" */
  pulls_url: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: string | null;
  /** @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}" */
  releases_url: string;
  /** @example 108 */
  size: number;
  /** @example "git@github.com:octocat/Hello-World.git" */
  ssh_url: string;
  /** @example 80 */
  stargazers_count: number;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /** @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}" */
  statuses_url: string;
  subscribers_count?: number;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @format uri
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @format uri
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  temp_clone_token?: string;
  template_repository?: Repository | null;
  topics?: string[];
  /** @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}" */
  trees_url: string;
  /**
   * @format date-time
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * The repository visibility: public, private, or internal.
   * @default "public"
   */
  visibility?: string;
  watchers: number;
  /** @example 80 */
  watchers_count: number;
}

/**
 * Team Simple
 * Groups of organization members that gives permissions on specified repositories.
 */
export type TeamSimple = {
  /**
   * Description of the team
   * @example "A great team."
   */
  description: string | null;
  /**
   * @format uri
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  /**
   * Unique identifier of the team
   * @example 1
   */
  id: number;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @example "uid=example,ou=users,dc=github,dc=com"
   */
  ldap_dn?: string;
  /** @example "https://api.github.com/organizations/1/team/1/members{/member}" */
  members_url: string;
  /**
   * Name of the team
   * @example "Justice League"
   */
  name: string;
  /** @example "MDQ6VGVhbTE=" */
  node_id: string;
  /**
   * Permission that the team will have for its repositories
   * @example "admin"
   */
  permission: string;
  /**
   * The level of privacy this team should have
   * @example "closed"
   */
  privacy?: string;
  /**
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1/repos"
   */
  repositories_url: string;
  /** @example "justice-league" */
  slug: string;
  /**
   * URL for the team
   * @format uri
   * @example "https://api.github.com/organizations/1/team/1"
   */
  url: string;
};

/**
 * Thread
 * Thread
 */
export interface Thread {
  id: string;
  last_read_at: string | null;
  reason: string;
  /** Minimal Repository */
  repository: MinimalRepository;
  subject: {
    latest_comment_url: string;
    title: string;
    type: string;
    url: string;
  };
  /** @example "https://api.github.com/notifications/threads/2/subscription" */
  subscription_url: string;
  unread: boolean;
  updated_at: string;
  url: string;
}

/**
 * Thread Subscription
 * Thread Subscription
 */
export interface ThreadSubscription {
  /**
   * @format date-time
   * @example "2012-10-06T21:34:12Z"
   */
  created_at: string | null;
  ignored: boolean;
  reason: string | null;
  /**
   * @format uri
   * @example "https://api.github.com/repos/1"
   */
  repository_url?: string;
  /** @example true */
  subscribed: boolean;
  /**
   * @format uri
   * @example "https://api.github.com/notifications/threads/1"
   */
  thread_url?: string;
  /**
   * @format uri
   * @example "https://api.github.com/notifications/threads/1/subscription"
   */
  url: string;
}

/**
 * Topic
 * A topic aggregates entities that are related to a subject.
 */
export interface Topic {
  names: string[];
}

/**
 * Topic Search Result Item
 * Topic Search Result Item
 */
export interface TopicSearchResultItem {
  aliases?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          relation_type?: string;
          topic_id?: number;
        };
      }[]
    | null;
  /** @format date-time */
  created_at: string;
  created_by: string | null;
  curated: boolean;
  description: string | null;
  display_name: string | null;
  featured: boolean;
  /** @format uri */
  logo_url?: string | null;
  name: string;
  related?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          relation_type?: string;
          topic_id?: number;
        };
      }[]
    | null;
  released: string | null;
  repository_count?: number | null;
  score: number;
  short_description: string | null;
  text_matches?: SearchResultTextMatches;
  /** @format date-time */
  updated_at: string;
}

/** Traffic */
export interface Traffic {
  count: number;
  /** @format date-time */
  timestamp: string;
  uniques: number;
}

/**
 * User Marketplace Purchase
 * User Marketplace Purchase
 */
export interface UserMarketplacePurchase {
  account: MarketplaceAccount;
  /** @example "monthly" */
  billing_cycle: string;
  /**
   * @format date-time
   * @example "2017-11-11T00:00:00Z"
   */
  free_trial_ends_on: string | null;
  /**
   * @format date-time
   * @example "2017-11-11T00:00:00Z"
   */
  next_billing_date: string | null;
  /** @example true */
  on_free_trial: boolean;
  /** Marketplace Listing Plan */
  plan: MarketplaceListingPlan;
  unit_count: number | null;
  /**
   * @format date-time
   * @example "2017-11-02T01:12:12Z"
   */
  updated_at: string | null;
}

/**
 * User Search Result Item
 * User Search Result Item
 */
export interface UserSearchResultItem {
  /** @format uri */
  avatar_url: string;
  bio?: string | null;
  blog?: string | null;
  company?: string | null;
  /** @format date-time */
  created_at?: string;
  /** @format email */
  email?: string | null;
  events_url: string;
  followers?: number;
  /** @format uri */
  followers_url: string;
  following?: number;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  hireable?: boolean | null;
  /** @format uri */
  html_url: string;
  id: number;
  location?: string | null;
  login: string;
  name?: string | null;
  node_id: string;
  /** @format uri */
  organizations_url: string;
  public_gists?: number;
  public_repos?: number;
  /** @format uri */
  received_events_url: string;
  /** @format uri */
  repos_url: string;
  score: number;
  site_admin: boolean;
  starred_url: string;
  /** @format uri */
  subscriptions_url: string;
  /** @format date-time */
  suspended_at?: string | null;
  text_matches?: SearchResultTextMatches;
  type: string;
  /** @format date-time */
  updated_at?: string;
  /** @format uri */
  url: string;
}

/**
 * Validation Error
 * Validation Error
 */
export interface ValidationError {
  documentation_url: string;
  errors?: {
    code: string;
    field?: string;
    index?: number;
    message?: string;
    resource?: string;
    value?: string | null | number | null | string[] | null;
  }[];
  message: string;
}

/**
 * Validation Error Simple
 * Validation Error Simple
 */
export interface ValidationErrorSimple {
  documentation_url: string;
  errors?: string[];
  message: string;
}

/** Verification */
export interface Verification {
  payload: string | null;
  reason: string;
  signature: string | null;
  verified: boolean;
}

/**
 * View Traffic
 * View Traffic
 */
export interface ViewTraffic {
  /** @example 14850 */
  count: number;
  /** @example 3782 */
  uniques: number;
  views: Traffic[];
}

/**
 * Webhook Configuration
 * Configuration object of the webhook
 */
export interface WebhookConfig {
  /** The media type used to serialize the payloads. Supported values include \`json\` and \`form\`. The default is \`form\`. */
  content_type?: WebhookConfigContentType;
  /** Determines whether the SSL certificate of the host for \`url\` will be verified when delivering payloads. Supported values include \`0\` (verification is performed) and \`1\` (verification is not performed). The default is \`0\`. **We strongly recommend not setting this to \`1\` as you are subject to man-in-the-middle and other attacks.** */
  insecure_ssl?: WebhookConfigInsecureSsl;
  /** If provided, the \`secret\` will be used as the \`key\` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
  secret?: WebhookConfigSecret;
  /** The URL to which the payloads will be delivered. */
  url?: WebhookConfigUrl;
}

/**
 * The media type used to serialize the payloads. Supported values include \`json\` and \`form\`. The default is \`form\`.
 * @example ""json""
 */
export type WebhookConfigContentType = string;

/**
 * Determines whether the SSL certificate of the host for \`url\` will be verified when delivering payloads. Supported values include \`0\` (verification is performed) and \`1\` (verification is not performed). The default is \`0\`. **We strongly recommend not setting this to \`1\` as you are subject to man-in-the-middle and other attacks.**
 * @example ""0""
 */
export type WebhookConfigInsecureSsl = string;

/**
 * If provided, the \`secret\` will be used as the \`key\` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
 * @example ""********""
 */
export type WebhookConfigSecret = string;

/**
 * The URL to which the payloads will be delivered.
 * @format uri
 * @example "https://example.com/webhook"
 */
export type WebhookConfigUrl = string;

/**
 * Workflow
 * A GitHub Actions workflow
 */
export interface Workflow {
  /** @example "https://github.com/actions/setup-ruby/workflows/CI/badge.svg" */
  badge_url: string;
  /**
   * @format date-time
   * @example "2019-12-06T14:20:20.000Z"
   */
  created_at: string;
  /**
   * @format date-time
   * @example "2019-12-06T14:20:20.000Z"
   */
  deleted_at?: string;
  /** @example "https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml" */
  html_url: string;
  /** @example 5 */
  id: number;
  /** @example "CI" */
  name: string;
  /** @example "MDg6V29ya2Zsb3cxMg==" */
  node_id: string;
  /** @example "ruby.yaml" */
  path: string;
  /** @example "active" */
  state: "active" | "deleted";
  /**
   * @format date-time
   * @example "2019-12-06T14:20:20.000Z"
   */
  updated_at: string;
  /** @example "https://api.github.com/repos/actions/setup-ruby/workflows/5" */
  url: string;
}

/**
 * Workflow Run
 * An invocation of a workflow
 */
export interface WorkflowRun {
  /**
   * The URL to the artifacts for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts"
   */
  artifacts_url: string;
  /**
   * The URL to cancel the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/cancel"
   */
  cancel_url: string;
  /**
   * The URL to the associated check suite.
   * @example "https://api.github.com/repos/github/hello-world/check-suites/12"
   */
  check_suite_url: string;
  /** @example "neutral" */
  conclusion: string | null;
  /** @format date-time */
  created_at: string;
  /** @example "push" */
  event: string;
  /** @example "master" */
  head_branch: string | null;
  /** Simple Commit */
  head_commit: SimpleCommit;
  /** Minimal Repository */
  head_repository: MinimalRepository;
  /** @example 5 */
  head_repository_id?: number;
  /**
   * The SHA of the head commit that points to the version of the worflow being run.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /** @example "https://github.com/github/hello-world/suites/4" */
  html_url: string;
  /**
   * The ID of the workflow run.
   * @example 5
   */
  id: number;
  /**
   * The URL to the jobs for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/jobs"
   */
  jobs_url: string;
  /**
   * The URL to download the logs for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/logs"
   */
  logs_url: string;
  /**
   * The name of the workflow run.
   * @example "Build"
   */
  name?: string;
  /** @example "MDEwOkNoZWNrU3VpdGU1" */
  node_id: string;
  pull_requests: PullRequestMinimal[] | null;
  /** Minimal Repository */
  repository: MinimalRepository;
  /**
   * The URL to rerun the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun"
   */
  rerun_url: string;
  /**
   * The auto incrementing run number for the workflow run.
   * @example 106
   */
  run_number: number;
  /** @example "completed" */
  status: string | null;
  /** @format date-time */
  updated_at: string;
  /**
   * The URL to the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5"
   */
  url: string;
  /**
   * The ID of the parent workflow.
   * @example 5
   */
  workflow_id: number;
  /**
   * The URL to the workflow.
   * @example "https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml"
   */
  workflow_url: string;
}

/**
 * Workflow Run Usage
 * Workflow Run Usage
 */
export interface WorkflowRunUsage {
  billable: {
    MACOS?: {
      jobs: number;
      total_ms: number;
    };
    UBUNTU?: {
      jobs: number;
      total_ms: number;
    };
    WINDOWS?: {
      jobs: number;
      total_ms: number;
    };
  };
  run_duration_ms: number;
}

/**
 * Workflow Usage
 * Workflow Usage
 */
export interface WorkflowUsage {
  billable: {
    MACOS?: {
      total_ms?: number;
    };
    UBUNTU?: {
      total_ms?: number;
    };
    WINDOWS?: {
      total_ms?: number;
    };
  };
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "https://api.github.com";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title GitHub v3 REST API
 * @version 1.1.4
 * @license MIT (https://spdx.org/licenses/MIT)
 * @termsOfService https://docs.github.com/articles/github-terms-of-service
 * @baseUrl https://api.github.com
 * @externalDocs https://docs.github.com/rest/
 * @contact Support (https://support.github.com/contact)
 *
 * GitHub's v3 REST API.
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  /**
   * @description Get Hypermedia links to resources accessible in GitHub's REST API
   *
   * @tags meta
   * @name MetaRoot
   * @summary GitHub API Root
   * @request GET:/
   */
  metaRoot = (params: RequestParams = {}) =>
    this.request<
      {
        /** @format uri */
        authorizations_url: string;
        /** @format uri */
        code_search_url: string;
        /** @format uri */
        commit_search_url: string;
        /** @format uri */
        current_user_authorizations_html_url: string;
        /** @format uri */
        current_user_repositories_url: string;
        /** @format uri */
        current_user_url: string;
        /** @format uri */
        emails_url: string;
        /** @format uri */
        emojis_url: string;
        /** @format uri */
        events_url: string;
        /** @format uri */
        feeds_url: string;
        /** @format uri */
        followers_url: string;
        /** @format uri */
        following_url: string;
        /** @format uri */
        gists_url: string;
        /** @format uri */
        hub_url: string;
        /** @format uri */
        issue_search_url: string;
        /** @format uri */
        issues_url: string;
        /** @format uri */
        keys_url: string;
        /** @format uri */
        label_search_url: string;
        /** @format uri */
        notifications_url: string;
        /** @format uri */
        organization_repositories_url: string;
        /** @format uri */
        organization_teams_url: string;
        /** @format uri */
        organization_url: string;
        /** @format uri */
        public_gists_url: string;
        /** @format uri */
        rate_limit_url: string;
        /** @format uri */
        repository_search_url: string;
        /** @format uri */
        repository_url: string;
        /** @format uri */
        starred_gists_url: string;
        /** @format uri */
        starred_url: string;
        /** @format uri */
        topic_search_url?: string;
        /** @format uri */
        user_organizations_url: string;
        /** @format uri */
        user_repositories_url: string;
        /** @format uri */
        user_search_url: string;
        /** @format uri */
        user_url: string;
      },
      any
    >({
      path: \`/\`,
      method: "GET",
      format: "json",
      ...params,
    });

  app = {
    /**
     * @description Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the \`installations_count\` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsGetAuthenticated
     * @summary Get the authenticated app
     * @request GET:/app
     */
    appsGetAuthenticated: (params: RequestParams = {}) =>
      this.request<Integration, any>({
        path: \`/app\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)." You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsGetWebhookConfigForApp
     * @summary Get a webhook configuration for an app
     * @request GET:/app/hook/config
     */
    appsGetWebhookConfigForApp: (params: RequestParams = {}) =>
      this.request<WebhookConfig, any>({
        path: \`/app/hook/config\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)." You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsUpdateWebhookConfigForApp
     * @summary Update a webhook configuration for an app
     * @request PATCH:/app/hook/config
     */
    appsUpdateWebhookConfigForApp: (
      data: {
        /** The media type used to serialize the payloads. Supported values include \`json\` and \`form\`. The default is \`form\`. */
        content_type?: WebhookConfigContentType;
        /** Determines whether the SSL certificate of the host for \`url\` will be verified when delivering payloads. Supported values include \`0\` (verification is performed) and \`1\` (verification is not performed). The default is \`0\`. **We strongly recommend not setting this to \`1\` as you are subject to man-in-the-middle and other attacks.** */
        insecure_ssl?: WebhookConfigInsecureSsl;
        /** If provided, the \`secret\` will be used as the \`key\` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
        secret?: WebhookConfigSecret;
        /** The URL to which the payloads will be delivered. */
        url?: WebhookConfigUrl;
      },
      params: RequestParams = {},
    ) =>
      this.request<WebhookConfig, any>({
        path: \`/app/hook/config\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. The permissions the installation has are included under the \`permissions\` key.
     *
     * @tags apps
     * @name AppsListInstallations
     * @summary List installations for the authenticated app
     * @request GET:/app/installations
     */
    appsListInstallations: (
      query?: {
        outdated?: string;
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Installation[], any>({
        path: \`/app/installations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (\`target_type\`) will be either an organization or a user account, depending which account the repository belongs to. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsGetInstallation
     * @summary Get an installation for the authenticated app
     * @request GET:/app/installations/{installation_id}
     */
    appsGetInstallation: (installationId: number, params: RequestParams = {}) =>
      this.request<
        Installation,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/app/installations/\${installationId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/v3/apps/#suspend-an-app-installation)" endpoint. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsDeleteInstallation
     * @summary Delete an installation for the authenticated app
     * @request DELETE:/app/installations/{installation_id}
     */
    appsDeleteInstallation: (installationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/app/installations/\${installationId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of \`401 - Unauthorized\`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the \`repository_ids\` when creating the token. When you omit \`repository_ids\`, the response does not contain the \`repositories\` key. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsCreateInstallationAccessToken
     * @summary Create an installation access token for an app
     * @request POST:/app/installations/{installation_id}/access_tokens
     */
    appsCreateInstallationAccessToken: (
      installationId: number,
      data: {
        /** The permissions granted to the user-to-server access token. */
        permissions?: AppPermissions;
        /** List of repository names that the token should have access to */
        repositories?: string[];
        /**
         * List of repository IDs that the token should have access to
         * @example [1]
         */
        repository_ids?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<
        InstallationToken,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/app/installations/\${installationId}/access_tokens\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** Suspending a GitHub App installation is currently in beta and subject to change. Before you can suspend a GitHub App, the app owner must enable suspending installations for the app by opting-in to the beta. For more information, see "[Suspending a GitHub App installation](https://docs.github.com/apps/managing-github-apps/suspending-a-github-app-installation/)." Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsSuspendInstallation
     * @summary Suspend an app installation
     * @request PUT:/app/installations/{installation_id}/suspended
     */
    appsSuspendInstallation: (installationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/app/installations/\${installationId}/suspended\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description **Note:** Suspending a GitHub App installation is currently in beta and subject to change. Before you can suspend a GitHub App, the app owner must enable suspending installations for the app by opting-in to the beta. For more information, see "[Suspending a GitHub App installation](https://docs.github.com/apps/managing-github-apps/suspending-a-github-app-installation/)." Removes a GitHub App installation suspension. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsUnsuspendInstallation
     * @summary Unsuspend an app installation
     * @request DELETE:/app/installations/{installation_id}/suspended
     */
    appsUnsuspendInstallation: (installationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/app/installations/\${installationId}/suspended\`,
        method: "DELETE",
        ...params,
      }),
  };
  appManifests = {
    /**
     * @description Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary \`code\` used to retrieve the GitHub App's \`id\`, \`pem\` (private key), and \`webhook_secret\`.
     *
     * @tags apps
     * @name AppsCreateFromManifest
     * @summary Create a GitHub App from a manifest
     * @request POST:/app-manifests/{code}/conversions
     */
    appsCreateFromManifest: (code: string, params: RequestParams = {}) =>
      this.request<
        Integration & {
          client_id: string;
          client_secret: string;
          pem: string;
          webhook_secret: string;
          [key: string]: any;
        },
        BasicError | ValidationErrorSimple
      >({
        path: \`/app-manifests/\${code}/conversions\`,
        method: "POST",
        format: "json",
        ...params,
      }),
  };
  applications = {
    /**
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The \`scopes\` returned are the union of scopes authorized for the application. For example, if an application has one token with \`repo\` scope and another token with \`user\` scope, the grant will return \`["repo", "user"]\`.
     *
     * @tags oauth-authorizations
     * @name OauthAuthorizationsListGrants
     * @summary List your grants
     * @request GET:/applications/grants
     * @deprecated
     */
    oauthAuthorizationsListGrants: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ApplicationGrant[], BasicError>({
        path: \`/applications/grants\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * @tags oauth-authorizations
     * @name OauthAuthorizationsGetGrant
     * @summary Get a single grant
     * @request GET:/applications/grants/{grant_id}
     * @deprecated
     */
    oauthAuthorizationsGetGrant: (grantId: number, params: RequestParams = {}) =>
      this.request<ApplicationGrant, BasicError>({
        path: \`/applications/grants/\${grantId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
     *
     * @tags oauth-authorizations
     * @name OauthAuthorizationsDeleteGrant
     * @summary Delete a grant
     * @request DELETE:/applications/grants/{grant_id}
     * @deprecated
     */
    oauthAuthorizationsDeleteGrant: (grantId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/applications/grants/\${grantId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password. You must also provide a valid OAuth \`access_token\` as an input parameter and the grant for the token's owner will be deleted. Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
     *
     * @tags apps
     * @name AppsDeleteAuthorization
     * @summary Delete an app authorization
     * @request DELETE:/applications/{client_id}/grant
     */
    appsDeleteAuthorization: (
      clientId: string,
      data: {
        /** The OAuth access token used to authenticate to the GitHub API. */
        access_token?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, ValidationError>({
        path: \`/applications/\${clientId}/grant\`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain \`access_token\` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving \`access_token\` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/). OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password. You must also provide a valid token as \`:access_token\` and the grant for the token's owner will be deleted. Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub](https://github.com/settings/applications#authorized).
     *
     * @tags apps
     * @name AppsRevokeGrantForApplication
     * @summary Revoke a grant for an application
     * @request DELETE:/applications/{client_id}/grants/{access_token}
     * @deprecated
     */
    appsRevokeGrantForApplication: (clientId: string, accessToken: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/applications/\${clientId}/grants/\${accessToken}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application \`client_id\` and the password is its \`client_secret\`. Invalid tokens will return \`404 NOT FOUND\`.
     *
     * @tags apps
     * @name AppsCheckToken
     * @summary Check a token
     * @request POST:/applications/{client_id}/token
     */
    appsCheckToken: (
      clientId: string,
      data: {
        /** The access_token of the OAuth application. */
        access_token: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Authorization, BasicError | ValidationError>({
        path: \`/applications/\${clientId}/token\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password. Invalid tokens will return \`404 NOT FOUND\`.
     *
     * @tags apps
     * @name AppsResetToken
     * @summary Reset a token
     * @request PATCH:/applications/{client_id}/token
     */
    appsResetToken: (
      clientId: string,
      data: {
        /** The access_token of the OAuth application. */
        access_token: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Authorization, ValidationError>({
        path: \`/applications/\${clientId}/token\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password.
     *
     * @tags apps
     * @name AppsDeleteToken
     * @summary Delete an app token
     * @request DELETE:/applications/{client_id}/token
     */
    appsDeleteToken: (
      clientId: string,
      data: {
        /** The OAuth access token used to authenticate to the GitHub API. */
        access_token?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, ValidationError>({
        path: \`/applications/\${clientId}/token\`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Exchanges a non-repository scoped user-to-server OAuth access token for a repository scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password. Invalid tokens will return \`404 NOT FOUND\`.
     *
     * @tags apps
     * @name AppsScopeToken
     * @summary Create a scoped access token
     * @request POST:/applications/{client_id}/token/scoped
     */
    appsScopeToken: (
      clientId: string,
      data: {
        /**
         * **Required.** The OAuth access token used to authenticate to the GitHub API.
         * @example "e72e16c7e42f292c6912e7710c838347ae178b4a"
         */
        access_token?: string;
        /** The permissions granted to the user-to-server access token. */
        permissions?: AppPermissions;
        /** The list of repository IDs to scope the user-to-server access token to. \`repositories\` may not be specified if \`repository_ids\` is specified. */
        repositories?: string[];
        /**
         * The list of repository names to scope the user-to-server access token to. \`repository_ids\` may not be specified if \`repositories\` is specified.
         * @example [1]
         */
        repository_ids?: number[];
        /**
         * The name of the user or organization to scope the user-to-server access token to. **Required** unless \`target_id\` is specified.
         * @example "octocat"
         */
        target?: string;
        /**
         * The ID of the user or organization to scope the user-to-server access token to. **Required** unless \`target\` is specified.
         * @example 1
         */
        target_id?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Authorization, BasicError | ValidationError>({
        path: \`/applications/\${clientId}/token/scoped\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain \`access_token\` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving \`access_token\` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/). OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password. Invalid tokens will return \`404 NOT FOUND\`.
     *
     * @tags apps
     * @name AppsCheckAuthorization
     * @summary Check an authorization
     * @request GET:/applications/{client_id}/tokens/{access_token}
     * @deprecated
     */
    appsCheckAuthorization: (clientId: string, accessToken: string, params: RequestParams = {}) =>
      this.request<Authorization | null, BasicError>({
        path: \`/applications/\${clientId}/tokens/\${accessToken}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain \`access_token\` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving \`access_token\` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/). OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password. Invalid tokens will return \`404 NOT FOUND\`.
     *
     * @tags apps
     * @name AppsResetAuthorization
     * @summary Reset an authorization
     * @request POST:/applications/{client_id}/tokens/{access_token}
     * @deprecated
     */
    appsResetAuthorization: (clientId: string, accessToken: string, params: RequestParams = {}) =>
      this.request<Authorization, any>({
        path: \`/applications/\${clientId}/tokens/\${accessToken}\`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain \`access_token\` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving \`access_token\` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/). OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's \`client_id\` and \`client_secret\` as the username and password.
     *
     * @tags apps
     * @name AppsRevokeAuthorizationForApplication
     * @summary Revoke an authorization for an application
     * @request DELETE:/applications/{client_id}/tokens/{access_token}
     * @deprecated
     */
    appsRevokeAuthorizationForApplication: (clientId: string, accessToken: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/applications/\${clientId}/tokens/\${accessToken}\`,
        method: "DELETE",
        ...params,
      }),
  };
  apps = {
    /**
     * @description **Note**: The \`:app_slug\` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., \`https://github.com/settings/apps/:app_slug\`). If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     *
     * @tags apps
     * @name AppsGetBySlug
     * @summary Get an app
     * @request GET:/apps/{app_slug}
     */
    appsGetBySlug: (appSlug: string, params: RequestParams = {}) =>
      this.request<
        Integration,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/apps/\${appSlug}\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  authorizations = {
    /**
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * @tags oauth-authorizations
     * @name OauthAuthorizationsListAuthorizations
     * @summary List your authorizations
     * @request GET:/authorizations
     * @deprecated
     */
    oauthAuthorizationsListAuthorizations: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Authorization[], BasicError>({
        path: \`/authorizations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api). Creates OAuth tokens using [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)." To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use \`fingerprint\` to differentiate between them. You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use). Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
     *
     * @tags oauth-authorizations
     * @name OauthAuthorizationsCreateAuthorization
     * @summary Create a new authorization
     * @request POST:/authorizations
     * @deprecated
     */
    oauthAuthorizationsCreateAuthorization: (
      data: {
        /**
         * The OAuth app client key for which to create the token.
         * @maxLength 20
         */
        client_id?: string;
        /**
         * The OAuth app client secret for which to create the token.
         * @maxLength 40
         */
        client_secret?: string;
        /** A unique string to distinguish an authorization from others created for the same client ID and user. */
        fingerprint?: string;
        /**
         * A note to remind you what the OAuth token is for.
         * @example "Update all gems"
         */
        note?: string;
        /** A URL to remind you what app the OAuth token is for. */
        note_url?: string;
        /**
         * A list of scopes that this authorization is in.
         * @example ["public_repo","user"]
         */
        scopes?: string[] | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<Authorization, BasicError | ValidationError>({
        path: \`/authorizations\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api). Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one. If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)." **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * @tags oauth-authorizations
     * @name OauthAuthorizationsGetOrCreateAuthorizationForApp
     * @summary Get-or-create an authorization for a specific app
     * @request PUT:/authorizations/clients/{client_id}
     * @deprecated
     */
    oauthAuthorizationsGetOrCreateAuthorizationForApp: (
      clientId: string,
      data: {
        /**
         * The OAuth app client secret for which to create the token.
         * @maxLength 40
         */
        client_secret: string;
        /** A unique string to distinguish an authorization from others created for the same client ID and user. */
        fingerprint?: string;
        /**
         * A note to remind you what the OAuth token is for.
         * @example "Update all gems"
         */
        note?: string;
        /** A URL to remind you what app the OAuth token is for. */
        note_url?: string;
        /**
         * A list of scopes that this authorization is in.
         * @example ["public_repo","user"]
         */
        scopes?: string[] | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<Authorization, BasicError | ValidationError>({
        path: \`/authorizations/clients/\${clientId}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api). This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. \`fingerprint\` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one. If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
     *
     * @tags oauth-authorizations
     * @name OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint
     * @summary Get-or-create an authorization for a specific app and fingerprint
     * @request PUT:/authorizations/clients/{client_id}/{fingerprint}
     * @deprecated
     */
    oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint: (
      clientId: string,
      fingerprint: string,
      data: {
        /**
         * The OAuth app client secret for which to create the token.
         * @maxLength 40
         */
        client_secret: string;
        /**
         * A note to remind you what the OAuth token is for.
         * @example "Update all gems"
         */
        note?: string;
        /** A URL to remind you what app the OAuth token is for. */
        note_url?: string;
        /**
         * A list of scopes that this authorization is in.
         * @example ["public_repo","user"]
         */
        scopes?: string[] | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<Authorization, ValidationError>({
        path: \`/authorizations/clients/\${clientId}/\${fingerprint}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * @tags oauth-authorizations
     * @name OauthAuthorizationsGetAuthorization
     * @summary Get a single authorization
     * @request GET:/authorizations/{authorization_id}
     * @deprecated
     */
    oauthAuthorizationsGetAuthorization: (authorizationId: number, params: RequestParams = {}) =>
      this.request<Authorization, BasicError>({
        path: \`/authorizations/\${authorizationId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)." You can only send one of these scope keys at a time.
     *
     * @tags oauth-authorizations
     * @name OauthAuthorizationsUpdateAuthorization
     * @summary Update an existing authorization
     * @request PATCH:/authorizations/{authorization_id}
     * @deprecated
     */
    oauthAuthorizationsUpdateAuthorization: (
      authorizationId: number,
      data: {
        /** A list of scopes to add to this authorization. */
        add_scopes?: string[];
        /** A unique string to distinguish an authorization from others created for the same client ID and user. */
        fingerprint?: string;
        /**
         * A note to remind you what the OAuth token is for.
         * @example "Update all gems"
         */
        note?: string;
        /** A URL to remind you what app the OAuth token is for. */
        note_url?: string;
        /** A list of scopes to remove from this authorization. */
        remove_scopes?: string[];
        /**
         * A list of scopes that this authorization is in.
         * @example ["public_repo","user"]
         */
        scopes?: string[] | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<Authorization, ValidationError>({
        path: \`/authorizations/\${authorizationId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * @tags oauth-authorizations
     * @name OauthAuthorizationsDeleteAuthorization
     * @summary Delete an authorization
     * @request DELETE:/authorizations/{authorization_id}
     * @deprecated
     */
    oauthAuthorizationsDeleteAuthorization: (authorizationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/authorizations/\${authorizationId}\`,
        method: "DELETE",
        ...params,
      }),
  };
  codesOfConduct = {
    /**
     * No description
     *
     * @tags codes-of-conduct
     * @name CodesOfConductGetAllCodesOfConduct
     * @summary Get all codes of conduct
     * @request GET:/codes_of_conduct
     */
    codesOfConductGetAllCodesOfConduct: (params: RequestParams = {}) =>
      this.request<
        CodeOfConduct[],
        {
          documentation_url: string;
          message: string;
        }
      >({
        path: \`/codes_of_conduct\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags codes-of-conduct
     * @name CodesOfConductGetConductCode
     * @summary Get a code of conduct
     * @request GET:/codes_of_conduct/{key}
     */
    codesOfConductGetConductCode: (key: string, params: RequestParams = {}) =>
      this.request<
        CodeOfConduct,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/codes_of_conduct/\${key}\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  contentReferences = {
    /**
     * @description Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the \`id\` of the content reference from the [\`content_reference\` event](https://docs.github.com/webhooks/event-payloads/#content_reference) to create an attachment. The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://docs.github.com/apps/using-content-attachments/)" for details about content attachments. You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     *
     * @tags apps
     * @name AppsCreateContentAttachment
     * @summary Create a content attachment
     * @request POST:/content_references/{content_reference_id}/attachments
     */
    appsCreateContentAttachment: (
      contentReferenceId: number,
      data: {
        /**
         * The body of the attachment
         * @maxLength 262144
         * @example "Body of the attachment"
         */
        body: string;
        /**
         * The title of the attachment
         * @maxLength 1024
         * @example "Title of the attachment"
         */
        title: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        ContentReferenceAttachment,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/content_references/\${contentReferenceId}/attachments\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),
  };
  emojis = {
    /**
     * @description Lists all the emojis available to use on GitHub.
     *
     * @tags emojis
     * @name EmojisGet
     * @summary Get emojis
     * @request GET:/emojis
     */
    emojisGet: (params: RequestParams = {}) =>
      this.request<Record<string, string>, any>({
        path: \`/emojis\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  enterprises = {
    /**
     * @description Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminGetGithubActionsPermissionsEnterprise
     * @summary Get GitHub Actions permissions for an enterprise
     * @request GET:/enterprises/{enterprise}/actions/permissions
     */
    enterpriseAdminGetGithubActionsPermissionsEnterprise: (enterprise: string, params: RequestParams = {}) =>
      this.request<ActionsEnterprisePermissions, any>({
        path: \`/enterprises/\${enterprise}/actions/permissions\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminSetGithubActionsPermissionsEnterprise
     * @summary Set GitHub Actions permissions for an enterprise
     * @request PUT:/enterprises/{enterprise}/actions/permissions
     */
    enterpriseAdminSetGithubActionsPermissionsEnterprise: (
      enterprise: string,
      data: {
        /** The permissions policy that controls the actions that are allowed to run. Can be one of: \`all\`, \`local_only\`, or \`selected\`. */
        allowed_actions?: AllowedActions;
        /** The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: \`all\`, \`none\`, or \`selected\`. */
        enabled_organizations: EnabledOrganizations;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/enterprises/\${enterprise}/actions/permissions\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for \`enabled_organizations\` must be configured to \`selected\`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)." You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise
     * @summary List selected organizations enabled for GitHub Actions in an enterprise
     * @request GET:/enterprises/{enterprise}/actions/permissions/organizations
     */
    enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise: (
      enterprise: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          organizations: OrganizationSimple[];
          total_count: number;
        },
        any
      >({
        path: \`/enterprises/\${enterprise}/actions/permissions/organizations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for \`enabled_organizations\` must be configured to \`selected\`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)." You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise
     * @summary Set selected organizations enabled for GitHub Actions in an enterprise
     * @request PUT:/enterprises/{enterprise}/actions/permissions/organizations
     */
    enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise: (
      enterprise: string,
      data: {
        /** List of organization IDs to enable for GitHub Actions. */
        selected_organization_ids: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/enterprises/\${enterprise}/actions/permissions/organizations\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for \`enabled_organizations\` must be configured to \`selected\`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)." You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise
     * @summary Enable a selected organization for GitHub Actions in an enterprise
     * @request PUT:/enterprises/{enterprise}/actions/permissions/organizations/{org_id}
     */
    enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise: (
      enterprise: string,
      orgId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/enterprises/\${enterprise}/actions/permissions/organizations/\${orgId}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for \`enabled_organizations\` must be configured to \`selected\`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)." You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise
     * @summary Disable a selected organization for GitHub Actions in an enterprise
     * @request DELETE:/enterprises/{enterprise}/actions/permissions/organizations/{org_id}
     */
    enterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise: (
      enterprise: string,
      orgId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/enterprises/\${enterprise}/actions/permissions/organizations/\${orgId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)." You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminGetAllowedActionsEnterprise
     * @summary Get allowed actions for an enterprise
     * @request GET:/enterprises/{enterprise}/actions/permissions/selected-actions
     */
    enterpriseAdminGetAllowedActionsEnterprise: (enterprise: string, params: RequestParams = {}) =>
      this.request<SelectedActions, any>({
        path: \`/enterprises/\${enterprise}/actions/permissions/selected-actions\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)." You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminSetAllowedActionsEnterprise
     * @summary Set allowed actions for an enterprise
     * @request PUT:/enterprises/{enterprise}/actions/permissions/selected-actions
     */
    enterpriseAdminSetAllowedActionsEnterprise: (
      enterprise: string,
      data: SelectedActions,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/enterprises/\${enterprise}/actions/permissions/selected-actions\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists all self-hosted runner groups for an enterprise. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise
     * @summary List self-hosted runner groups for an enterprise
     * @request GET:/enterprises/{enterprise}/actions/runner-groups
     */
    enterpriseAdminListSelfHostedRunnerGroupsForEnterprise: (
      enterprise: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          runner_groups: RunnerGroupsEnterprise[];
          total_count: number;
        },
        any
      >({
        path: \`/enterprises/\${enterprise}/actions/runner-groups\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new self-hosted runner group for an enterprise. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise
     * @summary Create a self-hosted runner group for an enterprise
     * @request POST:/enterprises/{enterprise}/actions/runner-groups
     */
    enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise: (
      enterprise: string,
      data: {
        /** Name of the runner group. */
        name: string;
        /** List of runner IDs to add to the runner group. */
        runners?: number[];
        /** List of organization IDs that can access the runner group. */
        selected_organization_ids?: number[];
        /** Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: \`all\` or \`selected\` */
        visibility?: "selected" | "all";
      },
      params: RequestParams = {},
    ) =>
      this.request<RunnerGroupsEnterprise, any>({
        path: \`/enterprises/\${enterprise}/actions/runner-groups\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific self-hosted runner group for an enterprise. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminGetSelfHostedRunnerGroupForEnterprise
     * @summary Get a self-hosted runner group for an enterprise
     * @request GET:/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
     */
    enterpriseAdminGetSelfHostedRunnerGroupForEnterprise: (
      enterprise: string,
      runnerGroupId: number,
      params: RequestParams = {},
    ) =>
      this.request<RunnerGroupsEnterprise, any>({
        path: \`/enterprises/\${enterprise}/actions/runner-groups/\${runnerGroupId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the \`name\` and \`visibility\` of a self-hosted runner group in an enterprise. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise
     * @summary Update a self-hosted runner group for an enterprise
     * @request PATCH:/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
     */
    enterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise: (
      enterprise: string,
      runnerGroupId: number,
      data: {
        /** Name of the runner group. */
        name?: string;
        /**
         * Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: \`all\` or \`selected\`
         * @default "all"
         */
        visibility?: "selected" | "all";
      },
      params: RequestParams = {},
    ) =>
      this.request<RunnerGroupsEnterprise, any>({
        path: \`/enterprises/\${enterprise}/actions/runner-groups/\${runnerGroupId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a self-hosted runner group for an enterprise. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise
     * @summary Delete a self-hosted runner group from an enterprise
     * @request DELETE:/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}
     */
    enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise: (
      enterprise: string,
      runnerGroupId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/enterprises/\${enterprise}/actions/runner-groups/\${runnerGroupId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the organizations with access to a self-hosted runner group. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise
     * @summary List organization access to a self-hosted runner group in an enterprise
     * @request GET:/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations
     */
    enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise: (
      enterprise: string,
      runnerGroupId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          organizations: OrganizationSimple[];
          total_count: number;
        },
        any
      >({
        path: \`/enterprises/\${enterprise}/actions/runner-groups/\${runnerGroupId}/organizations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise
     * @summary Set organization access for a self-hosted runner group in an enterprise
     * @request PUT:/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations
     */
    enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise: (
      enterprise: string,
      runnerGroupId: number,
      data: {
        /** List of organization IDs that can access the runner group. */
        selected_organization_ids: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/enterprises/\${enterprise}/actions/runner-groups/\${runnerGroupId}/organizations\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have \`visibility\` set to \`selected\`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)." You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise
     * @summary Add organization access to a self-hosted runner group in an enterprise
     * @request PUT:/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}
     */
    enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise: (
      enterprise: string,
      runnerGroupId: number,
      orgId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/enterprises/\${enterprise}/actions/runner-groups/\${runnerGroupId}/organizations/\${orgId}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have \`visibility\` set to \`selected\`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)." You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise
     * @summary Remove organization access to a self-hosted runner group in an enterprise
     * @request DELETE:/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}
     */
    enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise: (
      enterprise: string,
      runnerGroupId: number,
      orgId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/enterprises/\${enterprise}/actions/runner-groups/\${runnerGroupId}/organizations/\${orgId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the self-hosted runners that are in a specific enterprise group. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise
     * @summary List self-hosted runners in a group for an enterprise
     * @request GET:/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners
     */
    enterpriseAdminListSelfHostedRunnersInGroupForEnterprise: (
      enterprise: string,
      runnerGroupId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          runners: Runner[];
          total_count: number;
        },
        any
      >({
        path: \`/enterprises/\${enterprise}/actions/runner-groups/\${runnerGroupId}/runners\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Replaces the list of self-hosted runners that are part of an enterprise runner group. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise
     * @summary Set self-hosted runners in a group for an enterprise
     * @request PUT:/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners
     */
    enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise: (
      enterprise: string,
      runnerGroupId: number,
      data: {
        /** List of runner IDs to add to the runner group. */
        runners: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/enterprises/\${enterprise}/actions/runner-groups/\${runnerGroupId}/runners\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Adds a self-hosted runner to a runner group configured in an enterprise. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise
     * @summary Add a self-hosted runner to a group for an enterprise
     * @request PUT:/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
     */
    enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise: (
      enterprise: string,
      runnerGroupId: number,
      runnerId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/enterprises/\${enterprise}/actions/runner-groups/\${runnerGroupId}/runners/\${runnerId}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise
     * @summary Remove a self-hosted runner from a group for an enterprise
     * @request DELETE:/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
     */
    enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise: (
      enterprise: string,
      runnerGroupId: number,
      runnerId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/enterprises/\${enterprise}/actions/runner-groups/\${runnerGroupId}/runners/\${runnerId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all self-hosted runners configured for an enterprise. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminListSelfHostedRunnersForEnterprise
     * @summary List self-hosted runners for an enterprise
     * @request GET:/enterprises/{enterprise}/actions/runners
     */
    enterpriseAdminListSelfHostedRunnersForEnterprise: (
      enterprise: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          runners?: Runner[];
          total_count?: number;
        },
        any
      >({
        path: \`/enterprises/\${enterprise}/actions/runners\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists binaries for the runner application that you can download and run. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminListRunnerApplicationsForEnterprise
     * @summary List runner applications for an enterprise
     * @request GET:/enterprises/{enterprise}/actions/runners/downloads
     */
    enterpriseAdminListRunnerApplicationsForEnterprise: (enterprise: string, params: RequestParams = {}) =>
      this.request<RunnerApplication[], any>({
        path: \`/enterprises/\${enterprise}/actions/runners/downloads\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a token that you can pass to the \`config\` script. The token expires after one hour. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint. #### Example using registration token Configure your self-hosted runner, replacing \`TOKEN\` with the registration token provided by this endpoint. \`\`\` ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN \`\`\`
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminCreateRegistrationTokenForEnterprise
     * @summary Create a registration token for an enterprise
     * @request POST:/enterprises/{enterprise}/actions/runners/registration-token
     */
    enterpriseAdminCreateRegistrationTokenForEnterprise: (enterprise: string, params: RequestParams = {}) =>
      this.request<AuthenticationToken, any>({
        path: \`/enterprises/\${enterprise}/actions/runners/registration-token\`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a token that you can pass to the \`config\` script to remove a self-hosted runner from an enterprise. The token expires after one hour. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint. #### Example using remove token To remove your self-hosted runner from an enterprise, replace \`TOKEN\` with the remove token provided by this endpoint. \`\`\` ./config.sh remove --token TOKEN \`\`\`
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminCreateRemoveTokenForEnterprise
     * @summary Create a remove token for an enterprise
     * @request POST:/enterprises/{enterprise}/actions/runners/remove-token
     */
    enterpriseAdminCreateRemoveTokenForEnterprise: (enterprise: string, params: RequestParams = {}) =>
      this.request<AuthenticationToken, any>({
        path: \`/enterprises/\${enterprise}/actions/runners/remove-token\`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific self-hosted runner configured in an enterprise. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminGetSelfHostedRunnerForEnterprise
     * @summary Get a self-hosted runner for an enterprise
     * @request GET:/enterprises/{enterprise}/actions/runners/{runner_id}
     */
    enterpriseAdminGetSelfHostedRunnerForEnterprise: (
      enterprise: string,
      runnerId: number,
      params: RequestParams = {},
    ) =>
      this.request<Runner, any>({
        path: \`/enterprises/\${enterprise}/actions/runners/\${runnerId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists. You must authenticate using an access token with the \`admin:enterprise\` scope to use this endpoint.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise
     * @summary Delete a self-hosted runner from an enterprise
     * @request DELETE:/enterprises/{enterprise}/actions/runners/{runner_id}
     */
    enterpriseAdminDeleteSelfHostedRunnerFromEnterprise: (
      enterprise: string,
      runnerId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/enterprises/\${enterprise}/actions/runners/\${runnerId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description **Note:** The audit log REST API is currently in beta and is subject to change. Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the \`admin:enterprise\` scope.
     *
     * @tags audit-log
     * @name AuditLogGetAuditLog
     * @summary Get the audit log for an enterprise
     * @request GET:/enterprises/{enterprise}/audit-log
     */
    auditLogGetAuditLog: (
      enterprise: string,
      query?: {
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */
        after?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */
        before?: string;
        /**
         * The event types to include:
         *
         * - \`web\` - returns web (non-Git) events
         * - \`git\` - returns Git events
         * - \`all\` - returns both web and Git events
         *
         * The default is \`web\`.
         */
        include?: "web" | "git" | "all";
        /**
         * The order of audit log events. To list newest events first, specify \`desc\`. To list oldest events first, specify \`asc\`.
         *
         * The default is \`desc\`.
         */
        order?: "desc" | "asc";
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */
        phrase?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<AuditLogEvent[], any>({
        path: \`/enterprises/\${enterprise}/audit-log\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the summary of the free and paid GitHub Actions minutes used. Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)". The authenticated user must be an enterprise admin.
     *
     * @tags billing
     * @name BillingGetGithubActionsBillingGhe
     * @summary Get GitHub Actions billing for an enterprise
     * @request GET:/enterprises/{enterprise}/settings/billing/actions
     */
    billingGetGithubActionsBillingGhe: (enterprise: string, params: RequestParams = {}) =>
      this.request<ActionsBillingUsage, any>({
        path: \`/enterprises/\${enterprise}/settings/billing/actions\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the free and paid storage used for GitHub Packages in gigabytes. Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)." The authenticated user must be an enterprise admin.
     *
     * @tags billing
     * @name BillingGetGithubPackagesBillingGhe
     * @summary Get GitHub Packages billing for an enterprise
     * @request GET:/enterprises/{enterprise}/settings/billing/packages
     */
    billingGetGithubPackagesBillingGhe: (enterprise: string, params: RequestParams = {}) =>
      this.request<PackagesBillingUsage, any>({
        path: \`/enterprises/\${enterprise}/settings/billing/packages\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages. Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)." The authenticated user must be an enterprise admin.
     *
     * @tags billing
     * @name BillingGetSharedStorageBillingGhe
     * @summary Get shared storage billing for an enterprise
     * @request GET:/enterprises/{enterprise}/settings/billing/shared-storage
     */
    billingGetSharedStorageBillingGhe: (enterprise: string, params: RequestParams = {}) =>
      this.request<CombinedBillingUsage, any>({
        path: \`/enterprises/\${enterprise}/settings/billing/shared-storage\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  events = {
    /**
     * @description We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
     *
     * @tags activity
     * @name ActivityListPublicEvents
     * @summary List public events
     * @request GET:/events
     */
    activityListPublicEvents: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Event[],
        | BasicError
        | {
            code?: string;
            documentation_url?: string;
            message?: string;
          }
      >({
        path: \`/events\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  feeds = {
    /**
     * @description GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user: *   **Timeline**: The GitHub global public timeline *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) *   **Current user public**: The public timeline for the authenticated user *   **Current user**: The private timeline for the authenticated user *   **Current user actor**: The private timeline for activity created by the authenticated user *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of. *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub. **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
     *
     * @tags activity
     * @name ActivityGetFeeds
     * @summary Get feeds
     * @request GET:/feeds
     */
    activityGetFeeds: (params: RequestParams = {}) =>
      this.request<Feed, any>({
        path: \`/feeds\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  gists = {
    /**
     * @description Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
     *
     * @tags gists
     * @name GistsList
     * @summary List gists for the authenticated user
     * @request GET:/gists
     */
    gistsList: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<BaseGist[], BasicError>({
        path: \`/gists\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Allows you to add a new gist with one or more files. **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
     *
     * @tags gists
     * @name GistsCreate
     * @summary Create a gist
     * @request POST:/gists
     */
    gistsCreate: (
      data: {
        /**
         * Description of the gist
         * @example "Example Ruby script"
         */
        description?: string;
        /**
         * Names and content for the files that make up the gist
         * @example {"hello.rb":{"content":"puts \\"Hello, World!\\""}}
         */
        files: Record<
          string,
          {
            /** Content of the file */
            content: string;
          }
        >;
        /** Flag indicating whether the gist is public */
        public?: boolean | "true" | "false";
      },
      params: RequestParams = {},
    ) =>
      this.request<GistSimple, BasicError | ValidationError>({
        path: \`/gists\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description List public gists sorted by most recently updated to least recently updated. Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
     *
     * @tags gists
     * @name GistsListPublic
     * @summary List public gists
     * @request GET:/gists/public
     */
    gistsListPublic: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<BaseGist[], BasicError | ValidationError>({
        path: \`/gists/public\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List the authenticated user's starred gists:
     *
     * @tags gists
     * @name GistsListStarred
     * @summary List starred gists
     * @request GET:/gists/starred
     */
    gistsListStarred: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<BaseGist[], BasicError>({
        path: \`/gists/starred\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsGet
     * @summary Get a gist
     * @request GET:/gists/{gist_id}
     */
    gistsGet: (gistId: string, params: RequestParams = {}) =>
      this.request<
        GistSimple,
        | {
            block?: {
              created_at?: string;
              html_url?: string | null;
              reason?: string;
            };
            documentation_url?: string;
            message?: string;
          }
        | BasicError
      >({
        path: \`/gists/\${gistId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
     *
     * @tags gists
     * @name GistsUpdate
     * @summary Update a gist
     * @request PATCH:/gists/{gist_id}
     */
    gistsUpdate: (
      gistId: string,
      data: null & {
        /**
         * Description of the gist
         * @example "Example Ruby script"
         */
        description?: string;
        /**
         * Names of files to be updated
         * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
         */
        files?: Record<
          string,
          (object | null) & {
            /** The new content of the file */
            content?: string;
            /** The new filename for the file */
            filename?: string | null;
          }
        >;
      },
      params: RequestParams = {},
    ) =>
      this.request<GistSimple, BasicError | ValidationError>({
        path: \`/gists/\${gistId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsDelete
     * @summary Delete a gist
     * @request DELETE:/gists/{gist_id}
     */
    gistsDelete: (gistId: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/gists/\${gistId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsListComments
     * @summary List gist comments
     * @request GET:/gists/{gist_id}/comments
     */
    gistsListComments: (
      gistId: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<GistComment[], BasicError>({
        path: \`/gists/\${gistId}/comments\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsCreateComment
     * @summary Create a gist comment
     * @request POST:/gists/{gist_id}/comments
     */
    gistsCreateComment: (
      gistId: string,
      data: {
        /**
         * The comment text.
         * @maxLength 65535
         * @example "Body of the attachment"
         */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GistComment, BasicError>({
        path: \`/gists/\${gistId}/comments\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsGetComment
     * @summary Get a gist comment
     * @request GET:/gists/{gist_id}/comments/{comment_id}
     */
    gistsGetComment: (gistId: string, commentId: number, params: RequestParams = {}) =>
      this.request<
        GistComment,
        | {
            block?: {
              created_at?: string;
              html_url?: string | null;
              reason?: string;
            };
            documentation_url?: string;
            message?: string;
          }
        | BasicError
      >({
        path: \`/gists/\${gistId}/comments/\${commentId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsUpdateComment
     * @summary Update a gist comment
     * @request PATCH:/gists/{gist_id}/comments/{comment_id}
     */
    gistsUpdateComment: (
      gistId: string,
      commentId: number,
      data: {
        /**
         * The comment text.
         * @maxLength 65535
         * @example "Body of the attachment"
         */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GistComment, BasicError>({
        path: \`/gists/\${gistId}/comments/\${commentId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsDeleteComment
     * @summary Delete a gist comment
     * @request DELETE:/gists/{gist_id}/comments/{comment_id}
     */
    gistsDeleteComment: (gistId: string, commentId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/gists/\${gistId}/comments/\${commentId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsListCommits
     * @summary List gist commits
     * @request GET:/gists/{gist_id}/commits
     */
    gistsListCommits: (
      gistId: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<GistCommit[], BasicError>({
        path: \`/gists/\${gistId}/commits\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsListForks
     * @summary List gist forks
     * @request GET:/gists/{gist_id}/forks
     */
    gistsListForks: (
      gistId: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<GistSimple[], BasicError>({
        path: \`/gists/\${gistId}/forks\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note**: This was previously \`/gists/:gist_id/fork\`.
     *
     * @tags gists
     * @name GistsFork
     * @summary Fork a gist
     * @request POST:/gists/{gist_id}/forks
     */
    gistsFork: (gistId: string, params: RequestParams = {}) =>
      this.request<BaseGist, BasicError | ValidationError>({
        path: \`/gists/\${gistId}/forks\`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsCheckIsStarred
     * @summary Check if a gist is starred
     * @request GET:/gists/{gist_id}/star
     */
    gistsCheckIsStarred: (gistId: string, params: RequestParams = {}) =>
      this.request<void, BasicError | object>({
        path: \`/gists/\${gistId}/star\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     *
     * @tags gists
     * @name GistsStar
     * @summary Star a gist
     * @request PUT:/gists/{gist_id}/star
     */
    gistsStar: (gistId: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/gists/\${gistId}/star\`,
        method: "PUT",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsUnstar
     * @summary Unstar a gist
     * @request DELETE:/gists/{gist_id}/star
     */
    gistsUnstar: (gistId: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/gists/\${gistId}/star\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags gists
     * @name GistsGetRevision
     * @summary Get a gist revision
     * @request GET:/gists/{gist_id}/{sha}
     */
    gistsGetRevision: (gistId: string, sha: string, params: RequestParams = {}) =>
      this.request<GistSimple, BasicError | ValidationError>({
        path: \`/gists/\${gistId}/\${sha}\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  gitignore = {
    /**
     * @description List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
     *
     * @tags gitignore
     * @name GitignoreGetAllTemplates
     * @summary Get all gitignore templates
     * @request GET:/gitignore/templates
     */
    gitignoreGetAllTemplates: (params: RequestParams = {}) =>
      this.request<string[], any>({
        path: \`/gitignore/templates\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description The API also allows fetching the source of a single template. Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
     *
     * @tags gitignore
     * @name GitignoreGetTemplate
     * @summary Get a gitignore template
     * @request GET:/gitignore/templates/{name}
     */
    gitignoreGetTemplate: (name: string, params: RequestParams = {}) =>
      this.request<GitignoreTemplate, any>({
        path: \`/gitignore/templates/\${name}\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  installation = {
    /**
     * @description List repositories that an app installation can access. You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     *
     * @tags apps
     * @name AppsListReposAccessibleToInstallation
     * @summary List repositories accessible to the app installation
     * @request GET:/installation/repositories
     */
    appsListReposAccessibleToInstallation: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          repositories: Repository[];
          /** @example "selected" */
          repository_selection?: string;
          total_count: number;
        },
        BasicError
      >({
        path: \`/installation/repositories\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Revokes the installation token you're using to authenticate as an installation and access this endpoint. Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint. You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     *
     * @tags apps
     * @name AppsRevokeInstallationAccessToken
     * @summary Revoke an installation access token
     * @request DELETE:/installation/token
     */
    appsRevokeInstallationAccessToken: (params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/installation/token\`,
        method: "DELETE",
        ...params,
      }),
  };
  issues = {
    /**
     * @description List issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories. You can use the \`filter\` query parameter to fetch issues that are not necessarily assigned to you. **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
     *
     * @tags issues
     * @name IssuesList
     * @summary List issues assigned to the authenticated user
     * @request GET:/issues
     */
    issuesList: (
      query?: {
        collab?: boolean;
        /**
         * One of \`asc\` (ascending) or \`desc\` (descending).
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Indicates which sorts of issues to return. Can be one of:
         * \\* \`assigned\`: Issues assigned to you
         * \\* \`created\`: Issues created by you
         * \\* \`mentioned\`: Issues mentioning you
         * \\* \`subscribed\`: Issues you're subscribed to updates for
         * \\* \`all\`: All issues the authenticated user can see, regardless of participation or creation
         * @default "assigned"
         */
        filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all";
        /** A list of comma separated label names. Example: \`bug,ui,@high\` */
        labels?: string;
        orgs?: boolean;
        owned?: boolean;
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        pulls?: boolean;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
        /**
         * What to sort results by. Can be either \`created\`, \`updated\`, \`comments\`.
         * @default "created"
         */
        sort?: "created" | "updated" | "comments";
        /**
         * Indicates the state of the issues to return. Can be either \`open\`, \`closed\`, or \`all\`.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
      },
      params: RequestParams = {},
    ) =>
      this.request<Issue[], BasicError | ValidationError>({
        path: \`/issues\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  licenses = {
    /**
     * No description
     *
     * @tags licenses
     * @name LicensesGetAllCommonlyUsed
     * @summary Get all commonly used licenses
     * @request GET:/licenses
     */
    licensesGetAllCommonlyUsed: (
      query?: {
        featured?: boolean;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<LicenseSimple[], any>({
        path: \`/licenses\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags licenses
     * @name LicensesGet
     * @summary Get a license
     * @request GET:/licenses/{license}
     */
    licensesGet: (license: string, params: RequestParams = {}) =>
      this.request<License, BasicError>({
        path: \`/licenses/\${license}\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  markdown = {
    /**
     * No description
     *
     * @tags markdown
     * @name MarkdownRender
     * @summary Render a Markdown document
     * @request POST:/markdown
     */
    markdownRender: (
      data: {
        /** The repository context to use when creating references in \`gfm\` mode. */
        context?: string;
        /**
         * The rendering mode.
         * @default "markdown"
         * @example "markdown"
         */
        mode?: "markdown" | "gfm";
        /** The Markdown text to render in HTML. */
        text: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<WebhookConfigUrl, any>({
        path: \`/markdown\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description You must send Markdown as plain text (using a \`Content-Type\` header of \`text/plain\` or \`text/x-markdown\`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
     *
     * @tags markdown
     * @name MarkdownRenderRaw
     * @summary Render a Markdown document in raw mode
     * @request POST:/markdown/raw
     */
    markdownRenderRaw: (data: WebhookConfigUrl, params: RequestParams = {}) =>
      this.request<WebhookConfigUrl, any>({
        path: \`/markdown/raw\`,
        method: "POST",
        body: data,
        type: ContentType.Text,
        ...params,
      }),
  };
  marketplaceListing = {
    /**
     * @description Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change. GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     *
     * @tags apps
     * @name AppsGetSubscriptionPlanForAccount
     * @summary Get a subscription plan for an account
     * @request GET:/marketplace_listing/accounts/{account_id}
     */
    appsGetSubscriptionPlanForAccount: (accountId: number, params: RequestParams = {}) =>
      this.request<MarketplacePurchase, BasicError>({
        path: \`/marketplace_listing/accounts/\${accountId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all plans that are part of your GitHub Marketplace listing. GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     *
     * @tags apps
     * @name AppsListPlans
     * @summary List plans
     * @request GET:/marketplace_listing/plans
     */
    appsListPlans: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MarketplaceListingPlan[], BasicError>({
        path: \`/marketplace_listing/plans\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change. GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     *
     * @tags apps
     * @name AppsListAccountsForPlan
     * @summary List accounts for a plan
     * @request GET:/marketplace_listing/plans/{plan_id}/accounts
     */
    appsListAccountsForPlan: (
      planId: number,
      query?: {
        /** To return the oldest accounts first, set to \`asc\`. Can be one of \`asc\` or \`desc\`. Ignored without the \`sort\` parameter. */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * One of \`created\` (when the repository was starred) or \`updated\` (when it was last pushed to).
         * @default "created"
         */
        sort?: "created" | "updated";
      },
      params: RequestParams = {},
    ) =>
      this.request<MarketplacePurchase[], BasicError | ValidationError>({
        path: \`/marketplace_listing/plans/\${planId}/accounts\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change. GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     *
     * @tags apps
     * @name AppsGetSubscriptionPlanForAccountStubbed
     * @summary Get a subscription plan for an account (stubbed)
     * @request GET:/marketplace_listing/stubbed/accounts/{account_id}
     */
    appsGetSubscriptionPlanForAccountStubbed: (accountId: number, params: RequestParams = {}) =>
      this.request<MarketplacePurchase, BasicError | void>({
        path: \`/marketplace_listing/stubbed/accounts/\${accountId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all plans that are part of your GitHub Marketplace listing. GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     *
     * @tags apps
     * @name AppsListPlansStubbed
     * @summary List plans (stubbed)
     * @request GET:/marketplace_listing/stubbed/plans
     */
    appsListPlansStubbed: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MarketplaceListingPlan[], BasicError>({
        path: \`/marketplace_listing/stubbed/plans\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change. GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     *
     * @tags apps
     * @name AppsListAccountsForPlanStubbed
     * @summary List accounts for a plan (stubbed)
     * @request GET:/marketplace_listing/stubbed/plans/{plan_id}/accounts
     */
    appsListAccountsForPlanStubbed: (
      planId: number,
      query?: {
        /** To return the oldest accounts first, set to \`asc\`. Can be one of \`asc\` or \`desc\`. Ignored without the \`sort\` parameter. */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * One of \`created\` (when the repository was starred) or \`updated\` (when it was last pushed to).
         * @default "created"
         */
        sort?: "created" | "updated";
      },
      params: RequestParams = {},
    ) =>
      this.request<MarketplacePurchase[], BasicError>({
        path: \`/marketplace_listing/stubbed/plans/\${planId}/accounts\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  meta = {
    /**
     * @description Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/)." **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
     *
     * @tags meta
     * @name MetaGet
     * @summary Get GitHub meta information
     * @request GET:/meta
     */
    metaGet: (params: RequestParams = {}) =>
      this.request<ApiOverview, any>({
        path: \`/meta\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  networks = {
    /**
     * No description
     *
     * @tags activity
     * @name ActivityListPublicEventsForRepoNetwork
     * @summary List public events for a network of repositories
     * @request GET:/networks/{owner}/{repo}/events
     */
    activityListPublicEventsForRepoNetwork: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], BasicError>({
        path: \`/networks/\${owner}/\${repo}/events\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  notifications = {
    /**
     * @description List all notifications for the current user, sorted by most recently updated.
     *
     * @tags activity
     * @name ActivityListNotificationsForAuthenticatedUser
     * @summary List notifications for the authenticated user
     * @request GET:/notifications
     */
    activityListNotificationsForAuthenticatedUser: (
      query?: {
        /**
         * If \`true\`, show notifications marked as read.
         * @default false
         */
        all?: boolean;
        /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        before?: string;
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * If \`true\`, only shows notifications in which the user is directly participating or mentioned.
         * @default false
         */
        participating?: boolean;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Thread[], BasicError | ValidationError>({
        path: \`/notifications\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Marks all notifications as "read" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a \`202 Accepted\` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter \`all=false\`.
     *
     * @tags activity
     * @name ActivityMarkNotificationsAsRead
     * @summary Mark notifications as read
     * @request PUT:/notifications
     */
    activityMarkNotificationsAsRead: (
      data: {
        /**
         * Describes the last point that notifications were checked.
         * @format date-time
         */
        last_read_at?: string;
        /** Whether the notification has been read. */
        read?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          message?: string;
        },
        BasicError
      >({
        path: \`/notifications\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags activity
     * @name ActivityGetThread
     * @summary Get a thread
     * @request GET:/notifications/threads/{thread_id}
     */
    activityGetThread: (threadId: number, params: RequestParams = {}) =>
      this.request<Thread, BasicError>({
        path: \`/notifications/threads/\${threadId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags activity
     * @name ActivityMarkThreadAsRead
     * @summary Mark a thread as read
     * @request PATCH:/notifications/threads/{thread_id}
     */
    activityMarkThreadAsRead: (threadId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/notifications/threads/\${threadId}\`,
        method: "PATCH",
        ...params,
      }),

    /**
     * @description This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription). Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
     *
     * @tags activity
     * @name ActivityGetThreadSubscriptionForAuthenticatedUser
     * @summary Get a thread subscription for the authenticated user
     * @request GET:/notifications/threads/{thread_id}/subscription
     */
    activityGetThreadSubscriptionForAuthenticatedUser: (threadId: number, params: RequestParams = {}) =>
      this.request<ThreadSubscription, BasicError>({
        path: \`/notifications/threads/\${threadId}/subscription\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**. You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored. Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
     *
     * @tags activity
     * @name ActivitySetThreadSubscription
     * @summary Set a thread subscription
     * @request PUT:/notifications/threads/{thread_id}/subscription
     */
    activitySetThreadSubscription: (
      threadId: number,
      data: {
        /**
         * Whether to block all notifications from a thread.
         * @default false
         */
        ignored?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<ThreadSubscription, BasicError>({
        path: \`/notifications/threads/\${threadId}/subscription\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set \`ignore\` to \`true\`.
     *
     * @tags activity
     * @name ActivityDeleteThreadSubscription
     * @summary Delete a thread subscription
     * @request DELETE:/notifications/threads/{thread_id}/subscription
     */
    activityDeleteThreadSubscription: (threadId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/notifications/threads/\${threadId}/subscription\`,
        method: "DELETE",
        ...params,
      }),
  };
  octocat = {
    /**
     * @description Get the octocat as ASCII art
     *
     * @tags meta
     * @name MetaGetOctocat
     * @summary Get Octocat
     * @request GET:/octocat
     */
    metaGetOctocat: (
      query?: {
        /** The words to show in Octocat's speech bubble */
        s?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<WebhookConfigUrl, any>({
        path: \`/octocat\`,
        method: "GET",
        query: query,
        ...params,
      }),
  };
  organizations = {
    /**
     * @description Lists all organizations, in the order that they were created on GitHub. **Note:** Pagination is powered exclusively by the \`since\` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
     *
     * @tags orgs
     * @name OrgsList
     * @summary List organizations
     * @request GET:/organizations
     */
    orgsList: (
      query?: {
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** An organization ID. Only return organizations with an ID greater than this ID. */
        since?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationSimple[], any>({
        path: \`/organizations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  orgs = {
    /**
     * @description To see many of the organization response values, you need to be an authenticated organization owner with the \`admin:org\` scope. When the value of \`two_factor_requirement_enabled\` is \`true\`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/). GitHub Apps with the \`Organization plan\` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
     *
     * @tags orgs
     * @name OrgsGet
     * @summary Get an organization
     * @request GET:/orgs/{org}
     */
    orgsGet: (org: string, params: RequestParams = {}) =>
      this.request<OrganizationFull, BasicError>({
        path: \`/orgs/\${org}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Parameter Deprecation Notice:** GitHub will replace and discontinue \`members_allowed_repository_creation_type\` in favor of more granular permissions. The new input parameters are \`members_can_create_public_repositories\`, \`members_can_create_private_repositories\` for all organizations and \`members_can_create_internal_repositories\` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes). Enables an authenticated organization owner with the \`admin:org\` scope to update the organization's profile and member privileges.
     *
     * @tags orgs
     * @name OrgsUpdate
     * @summary Update an organization
     * @request PATCH:/orgs/{org}
     */
    orgsUpdate: (
      org: string,
      data: {
        /** Billing email address. This address is not publicized. */
        billing_email?: string;
        /** @example ""http://github.blog"" */
        blog?: string;
        /** The company name. */
        company?: string;
        /**
         * Default permission level members have for organization repositories:
         * \\* \`read\` - can pull, but not push to or administer this repository.
         * \\* \`write\` - can pull and push, but not administer this repository.
         * \\* \`admin\` - can pull, push, and administer this repository.
         * \\* \`none\` - no permissions granted by default.
         * @default "read"
         */
        default_repository_permission?: "read" | "write" | "admin" | "none";
        /** The description of the company. */
        description?: string;
        /** The publicly visible email address. */
        email?: string;
        /** Toggles whether an organization can use organization projects. */
        has_organization_projects?: boolean;
        /** Toggles whether repositories that belong to the organization can use repository projects. */
        has_repository_projects?: boolean;
        /** The location. */
        location?: string;
        /**
         * Specifies which types of repositories non-admin organization members can create. Can be one of:
         * \\* \`all\` - all organization members can create public and private repositories.
         * \\* \`private\` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
         * \\* \`none\` - only admin members can create repositories.
         * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in \`members_can_create_repositories\`. See the parameter deprecation notice in the operation description for details.
         */
        members_allowed_repository_creation_type?: "all" | "private" | "none";
        /**
         * Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:
         * \\* \`true\` - all organization members can create internal repositories.
         * \\* \`false\` - only organization owners can create internal repositories.
         * Default: \`true\`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
         */
        members_can_create_internal_repositories?: boolean;
        /**
         * Toggles whether organization members can create GitHub Pages sites. Can be one of:
         * \\* \`true\` - all organization members can create GitHub Pages sites.
         * \\* \`false\` - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.
         * @default true
         */
        members_can_create_pages?: boolean;
        /**
         * Toggles whether organization members can create private GitHub Pages sites. Can be one of:
         * \\* \`true\` - all organization members can create private GitHub Pages sites.
         * \\* \`false\` - no organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
         * @default true
         */
        members_can_create_private_pages?: boolean;
        /**
         * Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:
         * \\* \`true\` - all organization members can create private repositories.
         * \\* \`false\` - only organization owners can create private repositories.
         * Default: \`true\`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
         */
        members_can_create_private_repositories?: boolean;
        /**
         * Toggles whether organization members can create public GitHub Pages sites. Can be one of:
         * \\* \`true\` - all organization members can create public GitHub Pages sites.
         * \\* \`false\` - no organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
         * @default true
         */
        members_can_create_public_pages?: boolean;
        /**
         * Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:
         * \\* \`true\` - all organization members can create public repositories.
         * \\* \`false\` - only organization owners can create public repositories.
         * Default: \`true\`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
         */
        members_can_create_public_repositories?: boolean;
        /**
         * Toggles the ability of non-admin organization members to create repositories. Can be one of:
         * \\* \`true\` - all organization members can create repositories.
         * \\* \`false\` - only organization owners can create repositories.
         * Default: \`true\`
         * **Note:** A parameter can override this parameter. See \`members_allowed_repository_creation_type\` in this table for details. **Note:** A parameter can override this parameter. See \`members_allowed_repository_creation_type\` in this table for details.
         * @default true
         */
        members_can_create_repositories?: boolean;
        /** The shorthand name of the company. */
        name?: string;
        /** The Twitter username of the company. */
        twitter_username?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        OrganizationFull,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | (ValidationError | ValidationErrorSimple)
      >({
        path: \`/orgs/\${org}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
     *
     * @tags actions
     * @name ActionsGetGithubActionsPermissionsOrganization
     * @summary Get GitHub Actions permissions for an organization
     * @request GET:/orgs/{org}/actions/permissions
     */
    actionsGetGithubActionsPermissionsOrganization: (org: string, params: RequestParams = {}) =>
      this.request<ActionsOrganizationPermissions, any>({
        path: \`/orgs/\${org}/actions/permissions\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization. If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as \`allowed_actions\` to \`selected\` actions, then you cannot override them for the organization. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
     *
     * @tags actions
     * @name ActionsSetGithubActionsPermissionsOrganization
     * @summary Set GitHub Actions permissions for an organization
     * @request PUT:/orgs/{org}/actions/permissions
     */
    actionsSetGithubActionsPermissionsOrganization: (
      org: string,
      data: {
        /** The permissions policy that controls the actions that are allowed to run. Can be one of: \`all\`, \`local_only\`, or \`selected\`. */
        allowed_actions?: AllowedActions;
        /** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: \`all\`, \`none\`, or \`selected\`. */
        enabled_repositories: EnabledRepositories;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/permissions\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for \`enabled_repositories\` must be configured to \`selected\`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)." You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
     *
     * @tags actions
     * @name ActionsListSelectedRepositoriesEnabledGithubActionsOrganization
     * @summary List selected repositories enabled for GitHub Actions in an organization
     * @request GET:/orgs/{org}/actions/permissions/repositories
     */
    actionsListSelectedRepositoriesEnabledGithubActionsOrganization: (
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          repositories: Repository[];
          total_count: number;
        },
        any
      >({
        path: \`/orgs/\${org}/actions/permissions/repositories\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for \`enabled_repositories\` must be configured to \`selected\`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)." You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
     *
     * @tags actions
     * @name ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization
     * @summary Set selected repositories enabled for GitHub Actions in an organization
     * @request PUT:/orgs/{org}/actions/permissions/repositories
     */
    actionsSetSelectedRepositoriesEnabledGithubActionsOrganization: (
      org: string,
      data: {
        /** List of repository IDs to enable for GitHub Actions. */
        selected_repository_ids: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/permissions/repositories\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for \`enabled_repositories\` must be must be configured to \`selected\`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)." You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
     *
     * @tags actions
     * @name ActionsEnableSelectedRepositoryGithubActionsOrganization
     * @summary Enable a selected repository for GitHub Actions in an organization
     * @request PUT:/orgs/{org}/actions/permissions/repositories/{repository_id}
     */
    actionsEnableSelectedRepositoryGithubActionsOrganization: (
      org: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/permissions/repositories/\${repositoryId}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for \`enabled_repositories\` must be configured to \`selected\`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)." You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
     *
     * @tags actions
     * @name ActionsDisableSelectedRepositoryGithubActionsOrganization
     * @summary Disable a selected repository for GitHub Actions in an organization
     * @request DELETE:/orgs/{org}/actions/permissions/repositories/{repository_id}
     */
    actionsDisableSelectedRepositoryGithubActionsOrganization: (
      org: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/permissions/repositories/\${repositoryId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."" You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
     *
     * @tags actions
     * @name ActionsGetAllowedActionsOrganization
     * @summary Get allowed actions for an organization
     * @request GET:/orgs/{org}/actions/permissions/selected-actions
     */
    actionsGetAllowedActionsOrganization: (org: string, params: RequestParams = {}) =>
      this.request<SelectedActions, any>({
        path: \`/orgs/\${org}/actions/permissions/selected-actions\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)." If the organization belongs to an enterprise that has \`selected\` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings. To use the \`patterns_allowed\` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the \`patterns_allowed\` setting only applies to public repositories in the organization. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`administration\` organization permission to use this API.
     *
     * @tags actions
     * @name ActionsSetAllowedActionsOrganization
     * @summary Set allowed actions for an organization
     * @request PUT:/orgs/{org}/actions/permissions/selected-actions
     */
    actionsSetAllowedActionsOrganization: (org: string, data: SelectedActions, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/permissions/selected-actions\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)." Lists all self-hosted runner groups configured in an organization and inherited from an enterprise. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListSelfHostedRunnerGroupsForOrg
     * @summary List self-hosted runner groups for an organization
     * @request GET:/orgs/{org}/actions/runner-groups
     */
    actionsListSelfHostedRunnerGroupsForOrg: (
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          runner_groups: RunnerGroupsOrg[];
          total_count: number;
        },
        any
      >({
        path: \`/orgs/\${org}/actions/runner-groups\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)." Creates a new self-hosted runner group for an organization. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsCreateSelfHostedRunnerGroupForOrg
     * @summary Create a self-hosted runner group for an organization
     * @request POST:/orgs/{org}/actions/runner-groups
     */
    actionsCreateSelfHostedRunnerGroupForOrg: (
      org: string,
      data: {
        /** Name of the runner group. */
        name: string;
        /** List of runner IDs to add to the runner group. */
        runners?: number[];
        /** List of repository IDs that can access the runner group. */
        selected_repository_ids?: number[];
        /**
         * Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: \`all\`, \`selected\`, or \`private\`.
         * @default "all"
         */
        visibility?: "selected" | "all" | "private";
      },
      params: RequestParams = {},
    ) =>
      this.request<RunnerGroupsOrg, any>({
        path: \`/orgs/\${org}/actions/runner-groups\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)." Gets a specific self-hosted runner group for an organization. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetSelfHostedRunnerGroupForOrg
     * @summary Get a self-hosted runner group for an organization
     * @request GET:/orgs/{org}/actions/runner-groups/{runner_group_id}
     */
    actionsGetSelfHostedRunnerGroupForOrg: (org: string, runnerGroupId: number, params: RequestParams = {}) =>
      this.request<RunnerGroupsOrg, any>({
        path: \`/orgs/\${org}/actions/runner-groups/\${runnerGroupId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)." Updates the \`name\` and \`visibility\` of a self-hosted runner group in an organization. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsUpdateSelfHostedRunnerGroupForOrg
     * @summary Update a self-hosted runner group for an organization
     * @request PATCH:/orgs/{org}/actions/runner-groups/{runner_group_id}
     */
    actionsUpdateSelfHostedRunnerGroupForOrg: (
      org: string,
      runnerGroupId: number,
      data: {
        /** Name of the runner group. */
        name?: string;
        /** Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: \`all\`, \`selected\`, or \`private\`. */
        visibility?: "selected" | "all" | "private";
      },
      params: RequestParams = {},
    ) =>
      this.request<RunnerGroupsOrg, any>({
        path: \`/orgs/\${org}/actions/runner-groups/\${runnerGroupId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)." Deletes a self-hosted runner group for an organization. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteSelfHostedRunnerGroupFromOrg
     * @summary Delete a self-hosted runner group from an organization
     * @request DELETE:/orgs/{org}/actions/runner-groups/{runner_group_id}
     */
    actionsDeleteSelfHostedRunnerGroupFromOrg: (org: string, runnerGroupId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/runner-groups/\${runnerGroupId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)." Lists the repositories with access to a self-hosted runner group configured in an organization. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListRepoAccessToSelfHostedRunnerGroupInOrg
     * @summary List repository access to a self-hosted runner group in an organization
     * @request GET:/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories
     */
    actionsListRepoAccessToSelfHostedRunnerGroupInOrg: (
      org: string,
      runnerGroupId: number,
      params: RequestParams = {},
    ) =>
      this.request<
        {
          repositories: Repository[];
          total_count: number;
        },
        any
      >({
        path: \`/orgs/\${org}/actions/runner-groups/\${runnerGroupId}/repositories\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)." Replaces the list of repositories that have access to a self-hosted runner group configured in an organization. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetRepoAccessToSelfHostedRunnerGroupInOrg
     * @summary Set repository access for a self-hosted runner group in an organization
     * @request PUT:/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories
     */
    actionsSetRepoAccessToSelfHostedRunnerGroupInOrg: (
      org: string,
      runnerGroupId: number,
      data: {
        /** List of repository IDs that can access the runner group. */
        selected_repository_ids: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/runner-groups/\${runnerGroupId}/repositories\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)." Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have \`visibility\` set to \`selected\`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)." You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsAddRepoAccessToSelfHostedRunnerGroupInOrg
     * @summary Add repository access to a self-hosted runner group in an organization
     * @request PUT:/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}
     */
    actionsAddRepoAccessToSelfHostedRunnerGroupInOrg: (
      org: string,
      runnerGroupId: number,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/runner-groups/\${runnerGroupId}/repositories/\${repositoryId}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)." Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have \`visibility\` set to \`selected\`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)." You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg
     * @summary Remove repository access to a self-hosted runner group in an organization
     * @request DELETE:/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}
     */
    actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg: (
      org: string,
      runnerGroupId: number,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/runner-groups/\${runnerGroupId}/repositories/\${repositoryId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)." Lists self-hosted runners that are in a specific organization group. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListSelfHostedRunnersInGroupForOrg
     * @summary List self-hosted runners in a group for an organization
     * @request GET:/orgs/{org}/actions/runner-groups/{runner_group_id}/runners
     */
    actionsListSelfHostedRunnersInGroupForOrg: (
      org: string,
      runnerGroupId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          runners: Runner[];
          total_count: number;
        },
        any
      >({
        path: \`/orgs/\${org}/actions/runner-groups/\${runnerGroupId}/runners\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)." Replaces the list of self-hosted runners that are part of an organization runner group. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetSelfHostedRunnersInGroupForOrg
     * @summary Set self-hosted runners in a group for an organization
     * @request PUT:/orgs/{org}/actions/runner-groups/{runner_group_id}/runners
     */
    actionsSetSelfHostedRunnersInGroupForOrg: (
      org: string,
      runnerGroupId: number,
      data: {
        /** List of runner IDs to add to the runner group. */
        runners: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/runner-groups/\${runnerGroupId}/runners\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)." Adds a self-hosted runner to a runner group configured in an organization. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsAddSelfHostedRunnerToGroupForOrg
     * @summary Add a self-hosted runner to a group for an organization
     * @request PUT:/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
     */
    actionsAddSelfHostedRunnerToGroupForOrg: (
      org: string,
      runnerGroupId: number,
      runnerId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/runner-groups/\${runnerGroupId}/runners/\${runnerId}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)." Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsRemoveSelfHostedRunnerFromGroupForOrg
     * @summary Remove a self-hosted runner from a group for an organization
     * @request DELETE:/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}
     */
    actionsRemoveSelfHostedRunnerFromGroupForOrg: (
      org: string,
      runnerGroupId: number,
      runnerId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/runner-groups/\${runnerGroupId}/runners/\${runnerId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all self-hosted runners configured in an organization. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListSelfHostedRunnersForOrg
     * @summary List self-hosted runners for an organization
     * @request GET:/orgs/{org}/actions/runners
     */
    actionsListSelfHostedRunnersForOrg: (
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          runners: Runner[];
          total_count: number;
        },
        any
      >({
        path: \`/orgs/\${org}/actions/runners\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists binaries for the runner application that you can download and run. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListRunnerApplicationsForOrg
     * @summary List runner applications for an organization
     * @request GET:/orgs/{org}/actions/runners/downloads
     */
    actionsListRunnerApplicationsForOrg: (org: string, params: RequestParams = {}) =>
      this.request<RunnerApplication[], any>({
        path: \`/orgs/\${org}/actions/runners/downloads\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a token that you can pass to the \`config\` script. The token expires after one hour. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. #### Example using registration token Configure your self-hosted runner, replacing \`TOKEN\` with the registration token provided by this endpoint. \`\`\` ./config.sh --url https://github.com/octo-org --token TOKEN \`\`\`
     *
     * @tags actions
     * @name ActionsCreateRegistrationTokenForOrg
     * @summary Create a registration token for an organization
     * @request POST:/orgs/{org}/actions/runners/registration-token
     */
    actionsCreateRegistrationTokenForOrg: (org: string, params: RequestParams = {}) =>
      this.request<AuthenticationToken, any>({
        path: \`/orgs/\${org}/actions/runners/registration-token\`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a token that you can pass to the \`config\` script to remove a self-hosted runner from an organization. The token expires after one hour. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. #### Example using remove token To remove your self-hosted runner from an organization, replace \`TOKEN\` with the remove token provided by this endpoint. \`\`\` ./config.sh remove --token TOKEN \`\`\`
     *
     * @tags actions
     * @name ActionsCreateRemoveTokenForOrg
     * @summary Create a remove token for an organization
     * @request POST:/orgs/{org}/actions/runners/remove-token
     */
    actionsCreateRemoveTokenForOrg: (org: string, params: RequestParams = {}) =>
      this.request<AuthenticationToken, any>({
        path: \`/orgs/\${org}/actions/runners/remove-token\`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific self-hosted runner configured in an organization. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetSelfHostedRunnerForOrg
     * @summary Get a self-hosted runner for an organization
     * @request GET:/orgs/{org}/actions/runners/{runner_id}
     */
    actionsGetSelfHostedRunnerForOrg: (org: string, runnerId: number, params: RequestParams = {}) =>
      this.request<Runner, any>({
        path: \`/orgs/\${org}/actions/runners/\${runnerId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteSelfHostedRunnerFromOrg
     * @summary Delete a self-hosted runner from an organization
     * @request DELETE:/orgs/{org}/actions/runners/{runner_id}
     */
    actionsDeleteSelfHostedRunnerFromOrg: (org: string, runnerId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/runners/\${runnerId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsListOrgSecrets
     * @summary List organization secrets
     * @request GET:/orgs/{org}/actions/secrets
     */
    actionsListOrgSecrets: (
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          secrets: OrganizationActionsSecret[];
          total_count: number;
        },
        any
      >({
        path: \`/orgs/\${org}/actions/secrets\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetOrgPublicKey
     * @summary Get an organization public key
     * @request GET:/orgs/{org}/actions/secrets/public-key
     */
    actionsGetOrgPublicKey: (org: string, params: RequestParams = {}) =>
      this.request<ActionsPublicKey, any>({
        path: \`/orgs/\${org}/actions/secrets/public-key\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetOrgSecret
     * @summary Get an organization secret
     * @request GET:/orgs/{org}/actions/secrets/{secret_name}
     */
    actionsGetOrgSecret: (org: string, secretName: string, params: RequestParams = {}) =>
      this.request<OrganizationActionsSecret, any>({
        path: \`/orgs/\${org}/actions/secrets/\${secretName}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint. #### Example encrypting a secret using Node.js Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library. \`\`\` const sodium = require('tweetsodium'); const key = "base64-encoded-public-key"; const value = "plain-text-secret"; // Convert the message and key to Uint8Array's (Buffer implements that interface) const messageBytes = Buffer.from(value); const keyBytes = Buffer.from(key, 'base64'); // Encrypt using LibSodium. const encryptedBytes = sodium.seal(messageBytes, keyBytes); // Base64 the encrypted secret const encrypted = Buffer.from(encryptedBytes).toString('base64'); console.log(encrypted); \`\`\` #### Example encrypting a secret using Python Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3. \`\`\` from base64 import b64encode from nacl import encoding, public def encrypt(public_key: str, secret_value: str) -> str: """Encrypt a Unicode string using the public key.""" public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder()) sealed_box = public.SealedBox(public_key) encrypted = sealed_box.encrypt(secret_value.encode("utf-8")) return b64encode(encrypted).decode("utf-8") \`\`\` #### Example encrypting a secret using C# Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package. \`\`\` var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret"); var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU="); var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey); Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); \`\`\` #### Example encrypting a secret using Ruby Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem. \`\`\`ruby require "rbnacl" require "base64" key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=") public_key = RbNaCl::PublicKey.new(key) box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt("my_secret") # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) \`\`\`
     *
     * @tags actions
     * @name ActionsCreateOrUpdateOrgSecret
     * @summary Create or update an organization secret
     * @request PUT:/orgs/{org}/actions/secrets/{secret_name}
     */
    actionsCreateOrUpdateOrgSecret: (
      org: string,
      secretName: string,
      data: {
        /** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint. */
        encrypted_value?: string;
        /** ID of the key you used to encrypt the secret. */
        key_id?: string;
        /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the \`visibility\` is set to \`selected\`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */
        selected_repository_ids?: string[];
        /**
         * Configures the access that repositories have to the organization secret. Can be one of:
         * \\- \`all\` - All repositories in an organization can access the secret.
         * \\- \`private\` - Private repositories in an organization can access the secret.
         * \\- \`selected\` - Only specific repositories can access the secret.
         */
        visibility?: "all" | "private" | "selected";
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/secrets/\${secretName}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Deletes a secret in an organization using the secret name. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteOrgSecret
     * @summary Delete an organization secret
     * @request DELETE:/orgs/{org}/actions/secrets/{secret_name}
     */
    actionsDeleteOrgSecret: (org: string, secretName: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/secrets/\${secretName}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all repositories that have been selected when the \`visibility\` for repository access to a secret is set to \`selected\`. You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsListSelectedReposForOrgSecret
     * @summary List selected repositories for an organization secret
     * @request GET:/orgs/{org}/actions/secrets/{secret_name}/repositories
     */
    actionsListSelectedReposForOrgSecret: (org: string, secretName: string, params: RequestParams = {}) =>
      this.request<
        {
          repositories: MinimalRepository[];
          total_count: number;
        },
        any
      >({
        path: \`/orgs/\${org}/actions/secrets/\${secretName}/repositories\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Replaces all repositories for an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsSetSelectedReposForOrgSecret
     * @summary Set selected repositories for an organization secret
     * @request PUT:/orgs/{org}/actions/secrets/{secret_name}/repositories
     */
    actionsSetSelectedReposForOrgSecret: (
      org: string,
      secretName: string,
      data: {
        /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the \`visibility\` is set to \`selected\`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */
        selected_repository_ids?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/actions/secrets/\${secretName}/repositories\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Adds a repository to an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsAddSelectedRepoToOrgSecret
     * @summary Add selected repository to an organization secret
     * @request PUT:/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
     */
    actionsAddSelectedRepoToOrgSecret: (
      org: string,
      secretName: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: \`/orgs/\${org}/actions/secrets/\${secretName}/repositories/\${repositoryId}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removes a repository from an organization secret when the \`visibility\` for repository access is set to \`selected\`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the \`admin:org\` scope to use this endpoint. GitHub Apps must have the \`secrets\` organization permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsRemoveSelectedRepoFromOrgSecret
     * @summary Remove selected repository from an organization secret
     * @request DELETE:/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
     */
    actionsRemoveSelectedRepoFromOrgSecret: (
      org: string,
      secretName: string,
      repositoryId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: \`/orgs/\${org}/actions/secrets/\${secretName}/repositories/\${repositoryId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description **Note:** The audit log REST API is currently in beta and is subject to change. Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)." To use this endpoint, you must be an organization owner, and you must use an access token with the \`admin:org\` scope. GitHub Apps must have the \`organization_administration\` read permission to use this endpoint.
     *
     * @tags orgs
     * @name OrgsGetAuditLog
     * @summary Get the audit log for an organization
     * @request GET:/orgs/{org}/audit-log
     */
    orgsGetAuditLog: (
      org: string,
      query?: {
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */
        after?: string;
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */
        before?: string;
        /**
         * The event types to include:
         *
         * - \`web\` - returns web (non-Git) events
         * - \`git\` - returns Git events
         * - \`all\` - returns both web and Git events
         *
         * The default is \`web\`.
         */
        include?: "web" | "git" | "all";
        /**
         * The order of audit log events. To list newest events first, specify \`desc\`. To list oldest events first, specify \`asc\`.
         *
         * The default is \`desc\`.
         */
        order?: "desc" | "asc";
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */
        phrase?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<AuditLogEvent[], any>({
        path: \`/orgs/\${org}/audit-log\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List the users blocked by an organization.
     *
     * @tags orgs
     * @name OrgsListBlockedUsers
     * @summary List users blocked by an organization
     * @request GET:/orgs/{org}/blocks
     */
    orgsListBlockedUsers: (org: string, params: RequestParams = {}) =>
      this.request<
        SimpleUser[],
        {
          documentation_url: string;
          message: string;
        }
      >({
        path: \`/orgs/\${org}/blocks\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags orgs
     * @name OrgsCheckBlockedUser
     * @summary Check if a user is blocked by an organization
     * @request GET:/orgs/{org}/blocks/{username}
     */
    orgsCheckBlockedUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/orgs/\${org}/blocks/\${username}\`,
        method: "GET",
        ...params,
      }),

    /**
     * No description
     *
     * @tags orgs
     * @name OrgsBlockUser
     * @summary Block a user from an organization
     * @request PUT:/orgs/{org}/blocks/{username}
     */
    orgsBlockUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, ValidationError>({
        path: \`/orgs/\${org}/blocks/\${username}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * No description
     *
     * @tags orgs
     * @name OrgsUnblockUser
     * @summary Unblock a user from an organization
     * @request DELETE:/orgs/{org}/blocks/{username}
     */
    orgsUnblockUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/blocks/\${username}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products). An authenticated organization owner with the \`read:org\` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).
     *
     * @tags orgs
     * @name OrgsListSamlSsoAuthorizations
     * @summary List SAML SSO authorizations for an organization
     * @request GET:/orgs/{org}/credential-authorizations
     */
    orgsListSamlSsoAuthorizations: (org: string, params: RequestParams = {}) =>
      this.request<CredentialAuthorization[], any>({
        path: \`/orgs/\${org}/credential-authorizations\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products). An authenticated organization owner with the \`admin:org\` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
     *
     * @tags orgs
     * @name OrgsRemoveSamlSsoAuthorization
     * @summary Remove a SAML SSO authorization for an organization
     * @request DELETE:/orgs/{org}/credential-authorizations/{credential_id}
     */
    orgsRemoveSamlSsoAuthorization: (org: string, credentialId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/orgs/\${org}/credential-authorizations/\${credentialId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags activity
     * @name ActivityListPublicOrgEvents
     * @summary List public organization events
     * @request GET:/orgs/{org}/events
     */
    activityListPublicOrgEvents: (
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], any>({
        path: \`/orgs/\${org}/events\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description The return hash contains \`failed_at\` and \`failed_reason\` fields which represent the time at which the invitation failed and the reason for the failure.
     *
     * @tags orgs
     * @name OrgsListFailedInvitations
     * @summary List failed organization invitations
     * @request GET:/orgs/{org}/failed_invitations
     */
    orgsListFailedInvitations: (
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationInvitation[], BasicError>({
        path: \`/orgs/\${org}/failed_invitations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags orgs
     * @name OrgsListWebhooks
     * @summary List organization webhooks
     * @request GET:/orgs/{org}/hooks
     */
    orgsListWebhooks: (
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrgHook[], BasicError>({
        path: \`/orgs/\${org}/hooks\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Here's how you can create a hook that posts payloads in JSON format:
     *
     * @tags orgs
     * @name OrgsCreateWebhook
     * @summary Create an organization webhook
     * @request POST:/orgs/{org}/hooks
     */
    orgsCreateWebhook: (
      org: string,
      data: {
        /**
         * Determines if notifications are sent when the webhook is triggered. Set to \`true\` to send notifications.
         * @default true
         */
        active?: boolean;
        /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params). */
        config: {
          /** The media type used to serialize the payloads. Supported values include \`json\` and \`form\`. The default is \`form\`. */
          content_type?: WebhookConfigContentType;
          /** Determines whether the SSL certificate of the host for \`url\` will be verified when delivering payloads. Supported values include \`0\` (verification is performed) and \`1\` (verification is not performed). The default is \`0\`. **We strongly recommend not setting this to \`1\` as you are subject to man-in-the-middle and other attacks.** */
          insecure_ssl?: WebhookConfigInsecureSsl;
          /** @example ""password"" */
          password?: string;
          /** If provided, the \`secret\` will be used as the \`key\` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
          secret?: WebhookConfigSecret;
          /** The URL to which the payloads will be delivered. */
          url: WebhookConfigUrl;
          /** @example ""kdaigle"" */
          username?: string;
        };
        /**
         * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
         * @default ["push"]
         */
        events?: string[];
        /** Must be passed as "web". */
        name: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrgHook, BasicError | ValidationError>({
        path: \`/orgs/\${org}/hooks\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a webhook configured in an organization. To get only the webhook \`config\` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
     *
     * @tags orgs
     * @name OrgsGetWebhook
     * @summary Get an organization webhook
     * @request GET:/orgs/{org}/hooks/{hook_id}
     */
    orgsGetWebhook: (org: string, hookId: number, params: RequestParams = {}) =>
      this.request<OrgHook, BasicError>({
        path: \`/orgs/\${org}/hooks/\${hookId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a webhook configured in an organization. When you update a webhook, the \`secret\` will be overwritten. If you previously had a \`secret\` set, you must provide the same \`secret\` or set a new \`secret\` or the secret will be removed. If you are only updating individual webhook \`config\` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
     *
     * @tags orgs
     * @name OrgsUpdateWebhook
     * @summary Update an organization webhook
     * @request PATCH:/orgs/{org}/hooks/{hook_id}
     */
    orgsUpdateWebhook: (
      org: string,
      hookId: number,
      data: {
        /**
         * Determines if notifications are sent when the webhook is triggered. Set to \`true\` to send notifications.
         * @default true
         */
        active?: boolean;
        /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params). */
        config?: {
          /** The media type used to serialize the payloads. Supported values include \`json\` and \`form\`. The default is \`form\`. */
          content_type?: WebhookConfigContentType;
          /** Determines whether the SSL certificate of the host for \`url\` will be verified when delivering payloads. Supported values include \`0\` (verification is performed) and \`1\` (verification is not performed). The default is \`0\`. **We strongly recommend not setting this to \`1\` as you are subject to man-in-the-middle and other attacks.** */
          insecure_ssl?: WebhookConfigInsecureSsl;
          /** If provided, the \`secret\` will be used as the \`key\` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
          secret?: WebhookConfigSecret;
          /** The URL to which the payloads will be delivered. */
          url: WebhookConfigUrl;
        };
        /**
         * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
         * @default ["push"]
         */
        events?: string[];
        /** @example ""web"" */
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrgHook, BasicError | ValidationError>({
        path: \`/orgs/\${org}/hooks/\${hookId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags orgs
     * @name OrgsDeleteWebhook
     * @summary Delete an organization webhook
     * @request DELETE:/orgs/{org}/hooks/{hook_id}
     */
    orgsDeleteWebhook: (org: string, hookId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/orgs/\${org}/hooks/\${hookId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Returns the webhook configuration for an organization. To get more information about the webhook, including the \`active\` state and \`events\`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)." Access tokens must have the \`admin:org_hook\` scope, and GitHub Apps must have the \`organization_hooks:read\` permission.
     *
     * @tags orgs
     * @name OrgsGetWebhookConfigForOrg
     * @summary Get a webhook configuration for an organization
     * @request GET:/orgs/{org}/hooks/{hook_id}/config
     */
    orgsGetWebhookConfigForOrg: (org: string, hookId: number, params: RequestParams = {}) =>
      this.request<WebhookConfig, any>({
        path: \`/orgs/\${org}/hooks/\${hookId}/config\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the webhook configuration for an organization. To update more information about the webhook, including the \`active\` state and \`events\`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)." Access tokens must have the \`admin:org_hook\` scope, and GitHub Apps must have the \`organization_hooks:write\` permission.
     *
     * @tags orgs
     * @name OrgsUpdateWebhookConfigForOrg
     * @summary Update a webhook configuration for an organization
     * @request PATCH:/orgs/{org}/hooks/{hook_id}/config
     */
    orgsUpdateWebhookConfigForOrg: (
      org: string,
      hookId: number,
      data: {
        /** The media type used to serialize the payloads. Supported values include \`json\` and \`form\`. The default is \`form\`. */
        content_type?: WebhookConfigContentType;
        /** Determines whether the SSL certificate of the host for \`url\` will be verified when delivering payloads. Supported values include \`0\` (verification is performed) and \`1\` (verification is not performed). The default is \`0\`. **We strongly recommend not setting this to \`1\` as you are subject to man-in-the-middle and other attacks.** */
        insecure_ssl?: WebhookConfigInsecureSsl;
        /** If provided, the \`secret\` will be used as the \`key\` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
        secret?: WebhookConfigSecret;
        /** The URL to which the payloads will be delivered. */
        url?: WebhookConfigUrl;
      },
      params: RequestParams = {},
    ) =>
      this.request<WebhookConfig, any>({
        path: \`/orgs/\${org}/hooks/\${hookId}/config\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
     *
     * @tags orgs
     * @name OrgsPingWebhook
     * @summary Ping an organization webhook
     * @request POST:/orgs/{org}/hooks/{hook_id}/pings
     */
    orgsPingWebhook: (org: string, hookId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/orgs/\${org}/hooks/\${hookId}/pings\`,
        method: "POST",
        ...params,
      }),

    /**
     * @description Enables an authenticated GitHub App to find the organization's installation information. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsGetOrgInstallation
     * @summary Get an organization installation for the authenticated app
     * @request GET:/orgs/{org}/installation
     */
    appsGetOrgInstallation: (org: string, params: RequestParams = {}) =>
      this.request<Installation, any>({
        path: \`/orgs/\${org}/installation\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with \`admin:read\` scope to use this endpoint.
     *
     * @tags orgs
     * @name OrgsListAppInstallations
     * @summary List app installations for an organization
     * @request GET:/orgs/{org}/installations
     */
    orgsListAppInstallations: (
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          installations: Installation[];
          total_count: number;
        },
        any
      >({
        path: \`/orgs/\${org}/installations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
     *
     * @tags interactions
     * @name InteractionsGetRestrictionsForOrg
     * @summary Get interaction restrictions for an organization
     * @request GET:/orgs/{org}/interaction-limits
     */
    interactionsGetRestrictionsForOrg: (org: string, params: RequestParams = {}) =>
      this.request<InteractionLimitResponse, any>({
        path: \`/orgs/\${org}/interaction-limits\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
     *
     * @tags interactions
     * @name InteractionsSetRestrictionsForOrg
     * @summary Set interaction restrictions for an organization
     * @request PUT:/orgs/{org}/interaction-limits
     */
    interactionsSetRestrictionsForOrg: (org: string, data: InteractionLimit, params: RequestParams = {}) =>
      this.request<InteractionLimitResponse, ValidationError>({
        path: \`/orgs/\${org}/interaction-limits\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
     *
     * @tags interactions
     * @name InteractionsRemoveRestrictionsForOrg
     * @summary Remove interaction restrictions for an organization
     * @request DELETE:/orgs/{org}/interaction-limits
     */
    interactionsRemoveRestrictionsForOrg: (org: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/interaction-limits\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description The return hash contains a \`role\` field which refers to the Organization Invitation role and will be one of the following values: \`direct_member\`, \`admin\`, \`billing_manager\`, \`hiring_manager\`, or \`reinstate\`. If the invitee is not a GitHub member, the \`login\` field in the return hash will be \`null\`.
     *
     * @tags orgs
     * @name OrgsListPendingInvitations
     * @summary List pending organization invitations
     * @request GET:/orgs/{org}/invitations
     */
    orgsListPendingInvitations: (
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationInvitation[], BasicError>({
        path: \`/orgs/\${org}/invitations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner. This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     *
     * @tags orgs
     * @name OrgsCreateInvitation
     * @summary Create an organization invitation
     * @request POST:/orgs/{org}/invitations
     */
    orgsCreateInvitation: (
      org: string,
      data: {
        /** **Required unless you provide \`invitee_id\`**. Email address of the person you are inviting, which can be an existing GitHub user. */
        email?: string;
        /** **Required unless you provide \`email\`**. GitHub user ID for the person you are inviting. */
        invitee_id?: number;
        /**
         * Specify role for new member. Can be one of:
         * \\* \`admin\` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
         * \\* \`direct_member\` - Non-owner organization members with ability to see other members and join teams by invitation.
         * \\* \`billing_manager\` - Non-owner organization members with ability to manage the billing settings of your organization.
         * @default "direct_member"
         */
        role?: "admin" | "direct_member" | "billing_manager";
        /** Specify IDs for the teams you want to invite new members to. */
        team_ids?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationInvitation, BasicError | ValidationError>({
        path: \`/orgs/\${org}/invitations\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner. This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     *
     * @tags orgs
     * @name OrgsCancelInvitation
     * @summary Cancel an organization invitation
     * @request DELETE:/orgs/{org}/invitations/{invitation_id}
     */
    orgsCancelInvitation: (org: string, invitationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationError>({
        path: \`/orgs/\${org}/invitations/\${invitationId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
     *
     * @tags orgs
     * @name OrgsListInvitationTeams
     * @summary List organization invitation teams
     * @request GET:/orgs/{org}/invitations/{invitation_id}/teams
     */
    orgsListInvitationTeams: (
      org: string,
      invitationId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Team[], BasicError>({
        path: \`/orgs/\${org}/invitations/\${invitationId}/teams\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List issues in an organization assigned to the authenticated user. **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
     *
     * @tags issues
     * @name IssuesListForOrg
     * @summary List organization issues assigned to the authenticated user
     * @request GET:/orgs/{org}/issues
     */
    issuesListForOrg: (
      org: string,
      query?: {
        /**
         * One of \`asc\` (ascending) or \`desc\` (descending).
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Indicates which sorts of issues to return. Can be one of:
         * \\* \`assigned\`: Issues assigned to you
         * \\* \`created\`: Issues created by you
         * \\* \`mentioned\`: Issues mentioning you
         * \\* \`subscribed\`: Issues you're subscribed to updates for
         * \\* \`all\`: All issues the authenticated user can see, regardless of participation or creation
         * @default "assigned"
         */
        filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all";
        /** A list of comma separated label names. Example: \`bug,ui,@high\` */
        labels?: string;
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
        /**
         * What to sort results by. Can be either \`created\`, \`updated\`, \`comments\`.
         * @default "created"
         */
        sort?: "created" | "updated" | "comments";
        /**
         * Indicates the state of the issues to return. Can be either \`open\`, \`closed\`, or \`all\`.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
      },
      params: RequestParams = {},
    ) =>
      this.request<Issue[], BasicError>({
        path: \`/orgs/\${org}/issues\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
     *
     * @tags orgs
     * @name OrgsListMembers
     * @summary List organization members
     * @request GET:/orgs/{org}/members
     */
    orgsListMembers: (
      org: string,
      query?: {
        /**
         * Filter members returned in the list. Can be one of:
         * \\* \`2fa_disabled\` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.
         * \\* \`all\` - All members the authenticated user can see.
         * @default "all"
         */
        filter?: "2fa_disabled" | "all";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * Filter members returned by their role. Can be one of:
         * \\* \`all\` - All members of the organization, regardless of role.
         * \\* \`admin\` - Organization owners.
         * \\* \`member\` - Non-owner organization members.
         * @default "all"
         */
        role?: "all" | "admin" | "member";
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], void | ValidationError>({
        path: \`/orgs/\${org}/members\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Check if a user is, publicly or privately, a member of the organization.
     *
     * @tags orgs
     * @name OrgsCheckMembershipForUser
     * @summary Check organization membership for a user
     * @request GET:/orgs/{org}/members/{username}
     */
    orgsCheckMembershipForUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: \`/orgs/\${org}/members/\${username}\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
     *
     * @tags orgs
     * @name OrgsRemoveMember
     * @summary Remove an organization member
     * @request DELETE:/orgs/{org}/members/{username}
     */
    orgsRemoveMember: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/orgs/\${org}/members/\${username}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description In order to get a user's membership with an organization, the authenticated user must be an organization member.
     *
     * @tags orgs
     * @name OrgsGetMembershipForUser
     * @summary Get organization membership for a user
     * @request GET:/orgs/{org}/memberships/{username}
     */
    orgsGetMembershipForUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<OrgMembership, BasicError>({
        path: \`/orgs/\${org}/memberships/\${username}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Only authenticated organization owners can add a member to the organization or update the member's role. *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be \`pending\` until they accept the invitation. *   Authenticated users can _update_ a user's membership by passing the \`role\` parameter. If the authenticated user changes a member's role to \`admin\`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to \`member\`, no email will be sent. **Rate limits** To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
     *
     * @tags orgs
     * @name OrgsSetMembershipForUser
     * @summary Set organization membership for a user
     * @request PUT:/orgs/{org}/memberships/{username}
     */
    orgsSetMembershipForUser: (
      org: string,
      username: string,
      data: {
        /**
         * The role to give the user in the organization. Can be one of:
         * \\* \`admin\` - The user will become an owner of the organization.
         * \\* \`member\` - The user will become a non-owner member of the organization.
         * @default "member"
         */
        role?: "admin" | "member";
      },
      params: RequestParams = {},
    ) =>
      this.request<OrgMembership, BasicError | ValidationError>({
        path: \`/orgs/\${org}/memberships/\${username}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description In order to remove a user's membership with an organization, the authenticated user must be an organization owner. If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
     *
     * @tags orgs
     * @name OrgsRemoveMembershipForUser
     * @summary Remove organization membership for a user
     * @request DELETE:/orgs/{org}/memberships/{username}
     */
    orgsRemoveMembershipForUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/orgs/\${org}/memberships/\${username}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the most recent migrations.
     *
     * @tags migrations
     * @name MigrationsListForOrg
     * @summary List organization migrations
     * @request GET:/orgs/{org}/migrations
     */
    migrationsListForOrg: (
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Migration[], any>({
        path: \`/orgs/\${org}/migrations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Initiates the generation of a migration archive.
     *
     * @tags migrations
     * @name MigrationsStartForOrg
     * @summary Start an organization migration
     * @request POST:/orgs/{org}/migrations
     */
    migrationsStartForOrg: (
      org: string,
      data: {
        exclude?: string[];
        /**
         * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
         * @default false
         */
        exclude_attachments?: boolean;
        /**
         * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
         * @default false
         */
        lock_repositories?: boolean;
        /** A list of arrays indicating which repositories should be migrated. */
        repositories: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Migration, BasicError | ValidationError>({
        path: \`/orgs/\${org}/migrations\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Fetches the status of a migration. The \`state\` of a migration can be one of the following values: *   \`pending\`, which means the migration hasn't started yet. *   \`exporting\`, which means the migration is in progress. *   \`exported\`, which means the migration finished successfully. *   \`failed\`, which means the migration failed.
     *
     * @tags migrations
     * @name MigrationsGetStatusForOrg
     * @summary Get an organization migration status
     * @request GET:/orgs/{org}/migrations/{migration_id}
     */
    migrationsGetStatusForOrg: (org: string, migrationId: number, params: RequestParams = {}) =>
      this.request<Migration, BasicError>({
        path: \`/orgs/\${org}/migrations/\${migrationId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Fetches the URL to a migration archive.
     *
     * @tags migrations
     * @name MigrationsDownloadArchiveForOrg
     * @summary Download an organization migration archive
     * @request GET:/orgs/{org}/migrations/{migration_id}/archive
     */
    migrationsDownloadArchiveForOrg: (org: string, migrationId: number, params: RequestParams = {}) =>
      this.request<any, void | BasicError>({
        path: \`/orgs/\${org}/migrations/\${migrationId}/archive\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
     *
     * @tags migrations
     * @name MigrationsDeleteArchiveForOrg
     * @summary Delete an organization migration archive
     * @request DELETE:/orgs/{org}/migrations/{migration_id}/archive
     */
    migrationsDeleteArchiveForOrg: (org: string, migrationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/orgs/\${org}/migrations/\${migrationId}/archive\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
     *
     * @tags migrations
     * @name MigrationsUnlockRepoForOrg
     * @summary Unlock an organization repository
     * @request DELETE:/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock
     */
    migrationsUnlockRepoForOrg: (org: string, migrationId: number, repoName: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/orgs/\${org}/migrations/\${migrationId}/repos/\${repoName}/lock\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List all the repositories for this organization migration.
     *
     * @tags migrations
     * @name MigrationsListReposForOrg
     * @summary List repositories in an organization migration
     * @request GET:/orgs/{org}/migrations/{migration_id}/repositories
     */
    migrationsListReposForOrg: (
      org: string,
      migrationId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], BasicError>({
        path: \`/orgs/\${org}/migrations/\${migrationId}/repositories\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List all users who are outside collaborators of an organization.
     *
     * @tags orgs
     * @name OrgsListOutsideCollaborators
     * @summary List outside collaborators for an organization
     * @request GET:/orgs/{org}/outside_collaborators
     */
    orgsListOutsideCollaborators: (
      org: string,
      query?: {
        /**
         * Filter the list of outside collaborators. Can be one of:
         * \\* \`2fa_disabled\`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.
         * \\* \`all\`: All outside collaborators.
         * @default "all"
         */
        filter?: "2fa_disabled" | "all";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: \`/orgs/\${org}/outside_collaborators\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
     *
     * @tags orgs
     * @name OrgsConvertMemberToOutsideCollaborator
     * @summary Convert an organization member to outside collaborator
     * @request PUT:/orgs/{org}/outside_collaborators/{username}
     */
    orgsConvertMemberToOutsideCollaborator: (org: string, username: string, params: RequestParams = {}) =>
      this.request<
        void,
        | {
            documentation_url?: string;
            message?: string;
          }
        | BasicError
      >({
        path: \`/orgs/\${org}/outside_collaborators/\${username}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Removing a user from this list will remove them from all the organization's repositories.
     *
     * @tags orgs
     * @name OrgsRemoveOutsideCollaborator
     * @summary Remove outside collaborator from an organization
     * @request DELETE:/orgs/{org}/outside_collaborators/{username}
     */
    orgsRemoveOutsideCollaborator: (org: string, username: string, params: RequestParams = {}) =>
      this.request<
        void,
        {
          documentation_url?: string;
          message?: string;
        }
      >({
        path: \`/orgs/\${org}/outside_collaborators/\${username}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the projects in an organization. Returns a \`404 Not Found\` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
     *
     * @tags projects
     * @name ProjectsListForOrg
     * @summary List organization projects
     * @request GET:/orgs/{org}/projects
     */
    projectsListForOrg: (
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * Indicates the state of the projects to return. Can be either \`open\`, \`closed\`, or \`all\`.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
      },
      params: RequestParams = {},
    ) =>
      this.request<Project[], ValidationErrorSimple>({
        path: \`/orgs/\${org}/projects\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates an organization project board. Returns a \`404 Not Found\` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
     *
     * @tags projects
     * @name ProjectsCreateForOrg
     * @summary Create an organization project
     * @request POST:/orgs/{org}/projects
     */
    projectsCreateForOrg: (
      org: string,
      data: {
        /** The description of the project. */
        body?: string;
        /** The name of the project. */
        name: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Project, BasicError | ValidationErrorSimple>({
        path: \`/orgs/\${org}/projects\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Members of an organization can choose to have their membership publicized or not.
     *
     * @tags orgs
     * @name OrgsListPublicMembers
     * @summary List public organization members
     * @request GET:/orgs/{org}/public_members
     */
    orgsListPublicMembers: (
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: \`/orgs/\${org}/public_members\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags orgs
     * @name OrgsCheckPublicMembershipForUser
     * @summary Check public organization membership for a user
     * @request GET:/orgs/{org}/public_members/{username}
     */
    orgsCheckPublicMembershipForUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: \`/orgs/\${org}/public_members/\${username}\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description The user can publicize their own membership. (A user cannot publicize the membership for another user.) Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     *
     * @tags orgs
     * @name OrgsSetPublicMembershipForAuthenticatedUser
     * @summary Set public organization membership for the authenticated user
     * @request PUT:/orgs/{org}/public_members/{username}
     */
    orgsSetPublicMembershipForAuthenticatedUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/orgs/\${org}/public_members/\${username}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * No description
     *
     * @tags orgs
     * @name OrgsRemovePublicMembershipForAuthenticatedUser
     * @summary Remove public organization membership for the authenticated user
     * @request DELETE:/orgs/{org}/public_members/{username}
     */
    orgsRemovePublicMembershipForAuthenticatedUser: (org: string, username: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/public_members/\${username}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists repositories for the specified organization.
     *
     * @tags repos
     * @name ReposListForOrg
     * @summary List organization repositories
     * @request GET:/orgs/{org}/repos
     */
    reposListForOrg: (
      org: string,
      query?: {
        /** Can be one of \`asc\` or \`desc\`. Default: when using \`full_name\`: \`asc\`, otherwise \`desc\` */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * Can be one of \`created\`, \`updated\`, \`pushed\`, \`full_name\`.
         * @default "created"
         */
        sort?: "created" | "updated" | "pushed" | "full_name";
        /** Specifies the types of repositories you want returned. Can be one of \`all\`, \`public\`, \`private\`, \`forks\`, \`sources\`, \`member\`, \`internal\`. Default: \`all\`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, \`type\` can also be \`internal\`. */
        type?: "all" | "public" | "private" | "forks" | "sources" | "member" | "internal";
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], any>({
        path: \`/orgs/\${org}/repos\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new repository in the specified organization. The authenticated user must be a member of the organization. **OAuth scope requirements** When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include: *   \`public_repo\` scope or \`repo\` scope to create a public repository *   \`repo\` scope to create a private repository
     *
     * @tags repos
     * @name ReposCreateInOrg
     * @summary Create an organization repository
     * @request POST:/orgs/{org}/repos
     */
    reposCreateInOrg: (
      org: string,
      data: {
        /**
         * Either \`true\` to allow merging pull requests with a merge commit, or \`false\` to prevent merging pull requests with merge commits.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Either \`true\` to allow rebase-merging pull requests, or \`false\` to prevent rebase-merging.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Either \`true\` to allow squash-merging pull requests, or \`false\` to prevent squash-merging.
         * @default true
         */
        allow_squash_merge?: boolean;
        /**
         * Pass \`true\` to create an initial commit with empty README.
         * @default false
         */
        auto_init?: boolean;
        /**
         * Either \`true\` to allow automatically deleting head branches when pull requests are merged, or \`false\` to prevent automatic deletion.
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** A short description of the repository. */
        description?: string;
        /** Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell". */
        gitignore_template?: string;
        /**
         * Either \`true\` to enable issues for this repository or \`false\` to disable them.
         * @default true
         */
        has_issues?: boolean;
        /**
         * Either \`true\` to enable projects for this repository or \`false\` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is \`false\`, and if you pass \`true\`, the API returns an error.
         * @default true
         */
        has_projects?: boolean;
        /**
         * Either \`true\` to enable the wiki for this repository or \`false\` to disable it.
         * @default true
         */
        has_wiki?: boolean;
        /** A URL with more information about the repository. */
        homepage?: string;
        /**
         * Either \`true\` to make this repo available as a template repository or \`false\` to prevent it.
         * @default false
         */
        is_template?: boolean;
        /** Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the \`license_template\` string. For example, "mit" or "mpl-2.0". */
        license_template?: string;
        /** The name of the repository. */
        name: string;
        /**
         * Either \`true\` to create a private repository or \`false\` to create a public one.
         * @default false
         */
        private?: boolean;
        /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
        team_id?: number;
        /**
         * Can be \`public\` or \`private\`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, \`visibility\` can also be \`internal\`. For more information, see "[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
         * The \`visibility\` parameter overrides the \`private\` parameter when you use both parameters with the \`nebula-preview\` preview header.
         */
        visibility?: "public" | "private" | "visibility" | "internal";
      },
      params: RequestParams = {},
    ) =>
      this.request<Repository, BasicError | ValidationError>({
        path: \`/orgs/\${org}/repos\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the summary of the free and paid GitHub Actions minutes used. Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)". Access tokens must have the \`repo\` or \`admin:org\` scope.
     *
     * @tags billing
     * @name BillingGetGithubActionsBillingOrg
     * @summary Get GitHub Actions billing for an organization
     * @request GET:/orgs/{org}/settings/billing/actions
     */
    billingGetGithubActionsBillingOrg: (org: string, params: RequestParams = {}) =>
      this.request<ActionsBillingUsage, any>({
        path: \`/orgs/\${org}/settings/billing/actions\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the free and paid storage usued for GitHub Packages in gigabytes. Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)." Access tokens must have the \`repo\` or \`admin:org\` scope.
     *
     * @tags billing
     * @name BillingGetGithubPackagesBillingOrg
     * @summary Get GitHub Packages billing for an organization
     * @request GET:/orgs/{org}/settings/billing/packages
     */
    billingGetGithubPackagesBillingOrg: (org: string, params: RequestParams = {}) =>
      this.request<PackagesBillingUsage, any>({
        path: \`/orgs/\${org}/settings/billing/packages\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages. Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)." Access tokens must have the \`repo\` or \`admin:org\` scope.
     *
     * @tags billing
     * @name BillingGetSharedStorageBillingOrg
     * @summary Get shared storage billing for an organization
     * @request GET:/orgs/{org}/settings/billing/shared-storage
     */
    billingGetSharedStorageBillingOrg: (org: string, params: RequestParams = {}) =>
      this.request<CombinedBillingUsage, any>({
        path: \`/orgs/\${org}/settings/billing/shared-storage\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. List IdP groups available in an organization. You can limit your page results using the \`per_page\` parameter. GitHub generates a url-encoded \`page\` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)." The \`per_page\` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user \`octocat\` wants to see two groups per page in \`octo-org\` via cURL, it would look like this:
     *
     * @tags teams
     * @name TeamsListIdpGroupsForOrg
     * @summary List IdP groups for an organization
     * @request GET:/orgs/{org}/team-sync/groups
     */
    teamsListIdpGroupsForOrg: (
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<GroupMapping, any>({
        path: \`/orgs/\${org}/team-sync/groups\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all teams in an organization that are visible to the authenticated user.
     *
     * @tags teams
     * @name TeamsList
     * @summary List teams
     * @request GET:/orgs/{org}/teams
     */
    teamsList: (
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Team[], BasicError>({
        path: \`/orgs/\${org}/teams\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description To create a team, the authenticated user must be a member or owner of \`{org}\`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization)." When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of \`maintainers\`. For more information, see "[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
     *
     * @tags teams
     * @name TeamsCreate
     * @summary Create a team
     * @request POST:/orgs/{org}/teams
     */
    teamsCreate: (
      org: string,
      data: {
        /** The description of the team. */
        description?: string;
        /** List GitHub IDs for organization members who will become team maintainers. */
        maintainers?: string[];
        /** The name of the team. */
        name: string;
        /** The ID of a team to set as the parent team. */
        parent_team_id?: number;
        /**
         * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
         * \\* \`pull\` - team members can pull, but not push to or administer newly-added repositories.
         * \\* \`push\` - team members can pull and push, but not administer newly-added repositories.
         * \\* \`admin\` - team members can pull, push and administer newly-added repositories.
         * @default "pull"
         */
        permission?: "pull" | "push" | "admin";
        /**
         * The level of privacy this team should have. The options are:
         * **For a non-nested team:**
         * \\* \`secret\` - only visible to organization owners and members of this team.
         * \\* \`closed\` - visible to all members of this organization.
         * Default: \`secret\`
         * **For a parent or child team:**
         * \\* \`closed\` - visible to all members of this organization.
         * Default for child team: \`closed\`
         */
        privacy?: "secret" | "closed";
        /** The full name (e.g., "organization-name/repository-name") of repositories to add the team to. */
        repo_names?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamFull, BasicError | ValidationError>({
        path: \`/orgs/\${org}/teams\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a team using the team's \`slug\`. GitHub generates the \`slug\` from the team \`name\`. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}\`.
     *
     * @tags teams
     * @name TeamsGetByName
     * @summary Get a team by name
     * @request GET:/orgs/{org}/teams/{team_slug}
     */
    teamsGetByName: (org: string, teamSlug: string, params: RequestParams = {}) =>
      this.request<TeamFull, BasicError>({
        path: \`/orgs/\${org}/teams/\${teamSlug}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description To edit a team, the authenticated user must either be an organization owner or a team maintainer. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PATCH /organizations/{org_id}/team/{team_id}\`.
     *
     * @tags teams
     * @name TeamsUpdateInOrg
     * @summary Update a team
     * @request PATCH:/orgs/{org}/teams/{team_slug}
     */
    teamsUpdateInOrg: (
      org: string,
      teamSlug: string,
      data: {
        /** The description of the team. */
        description?: string;
        /** The name of the team. */
        name: string;
        /** The ID of a team to set as the parent team. */
        parent_team_id?: number;
        /**
         * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
         * \\* \`pull\` - team members can pull, but not push to or administer newly-added repositories.
         * \\* \`push\` - team members can pull and push, but not administer newly-added repositories.
         * \\* \`admin\` - team members can pull, push and administer newly-added repositories.
         * @default "pull"
         */
        permission?: "pull" | "push" | "admin";
        /**
         * The level of privacy this team should have. Editing teams without specifying this parameter leaves \`privacy\` intact. When a team is nested, the \`privacy\` for parent teams cannot be \`secret\`. The options are:
         * **For a non-nested team:**
         * \\* \`secret\` - only visible to organization owners and members of this team.
         * \\* \`closed\` - visible to all members of this organization.
         * **For a parent or child team:**
         * \\* \`closed\` - visible to all members of this organization.
         */
        privacy?: "secret" | "closed";
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamFull, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description To delete a team, the authenticated user must be an organization owner or team maintainer. If you are an organization owner, deleting a parent team will delete all of its child teams as well. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}\`.
     *
     * @tags teams
     * @name TeamsDeleteInOrg
     * @summary Delete a team
     * @request DELETE:/orgs/{org}/teams/{team_slug}
     */
    teamsDeleteInOrg: (org: string, teamSlug: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List all discussions on a team's page. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/discussions\`.
     *
     * @tags teams
     * @name TeamsListDiscussionsInOrg
     * @summary List discussions
     * @request GET:/orgs/{org}/teams/{team_slug}/discussions
     */
    teamsListDiscussionsInOrg: (
      org: string,
      teamSlug: string,
      query?: {
        /**
         * One of \`asc\` (ascending) or \`desc\` (descending).
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussion[], any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new discussion post on a team's page. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`POST /organizations/{org_id}/team/{team_id}/discussions\`.
     *
     * @tags teams
     * @name TeamsCreateDiscussionInOrg
     * @summary Create a discussion
     * @request POST:/orgs/{org}/teams/{team_slug}/discussions
     */
    teamsCreateDiscussionInOrg: (
      org: string,
      teamSlug: string,
      data: {
        /** The discussion post's body text. */
        body: string;
        /**
         * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to \`true\` to create a private post.
         * @default false
         */
        private?: boolean;
        /** The discussion post's title. */
        title: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussion, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Get a specific discussion on a team's page. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}\`.
     *
     * @tags teams
     * @name TeamsGetDiscussionInOrg
     * @summary Get a discussion
     * @request GET:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
     */
    teamsGetDiscussionInOrg: (org: string, teamSlug: string, discussionNumber: number, params: RequestParams = {}) =>
      this.request<TeamDiscussion, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions/\${discussionNumber}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}\`.
     *
     * @tags teams
     * @name TeamsUpdateDiscussionInOrg
     * @summary Update a discussion
     * @request PATCH:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
     */
    teamsUpdateDiscussionInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      data: {
        /** The discussion post's body text. */
        body?: string;
        /** The discussion post's title. */
        title?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussion, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions/\${discussionNumber}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Delete a discussion from a team's page. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}\`.
     *
     * @tags teams
     * @name TeamsDeleteDiscussionInOrg
     * @summary Delete a discussion
     * @request DELETE:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
     */
    teamsDeleteDiscussionInOrg: (org: string, teamSlug: string, discussionNumber: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions/\${discussionNumber}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List all comments on a team discussion. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments\`.
     *
     * @tags teams
     * @name TeamsListDiscussionCommentsInOrg
     * @summary List discussion comments
     * @request GET:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
     */
    teamsListDiscussionCommentsInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      query?: {
        /**
         * One of \`asc\` (ascending) or \`desc\` (descending).
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment[], any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions/\${discussionNumber}/comments\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new comment on a team discussion. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments\`.
     *
     * @tags teams
     * @name TeamsCreateDiscussionCommentInOrg
     * @summary Create a discussion comment
     * @request POST:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
     */
    teamsCreateDiscussionCommentInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      data: {
        /** The discussion comment's body text. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions/\${discussionNumber}/comments\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Get a specific comment on a team discussion. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}\`.
     *
     * @tags teams
     * @name TeamsGetDiscussionCommentInOrg
     * @summary Get a discussion comment
     * @request GET:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
     */
    teamsGetDiscussionCommentInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      commentNumber: number,
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions/\${discussionNumber}/comments/\${commentNumber}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Edits the body text of a discussion comment. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}\`.
     *
     * @tags teams
     * @name TeamsUpdateDiscussionCommentInOrg
     * @summary Update a discussion comment
     * @request PATCH:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
     */
    teamsUpdateDiscussionCommentInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      commentNumber: number,
      data: {
        /** The discussion comment's body text. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions/\${discussionNumber}/comments/\${commentNumber}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a comment on a team discussion. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}\`.
     *
     * @tags teams
     * @name TeamsDeleteDiscussionCommentInOrg
     * @summary Delete a discussion comment
     * @request DELETE:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
     */
    teamsDeleteDiscussionCommentInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      commentNumber: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions/\${discussionNumber}/comments/\${commentNumber}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions\`.
     *
     * @tags reactions
     * @name ReactionsListForTeamDiscussionCommentInOrg
     * @summary List reactions for a team discussion comment
     * @request GET:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
     */
    reactionsListForTeamDiscussionCommentInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      commentNumber: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction[], any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions/\${discussionNumber}/comments/\${commentNumber}/reactions\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a \`Status: 200 OK\` means that you already added the reaction type to this team discussion comment. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions\`.
     *
     * @tags reactions
     * @name ReactionsCreateForTeamDiscussionCommentInOrg
     * @summary Create reaction for a team discussion comment
     * @request POST:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
     */
    reactionsCreateForTeamDiscussionCommentInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      commentNumber: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions/\${discussionNumber}/comments/\${commentNumber}/reactions\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** You can also specify a team or organization with \`team_id\` and \`org_id\` using the route \`DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id\`. Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags reactions
     * @name ReactionsDeleteForTeamDiscussionComment
     * @summary Delete team discussion comment reaction
     * @request DELETE:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}
     */
    reactionsDeleteForTeamDiscussionComment: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      commentNumber: number,
      reactionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions/\${discussionNumber}/comments/\${commentNumber}/reactions/\${reactionId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions\`.
     *
     * @tags reactions
     * @name ReactionsListForTeamDiscussionInOrg
     * @summary List reactions for a team discussion
     * @request GET:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
     */
    reactionsListForTeamDiscussionInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction[], any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions/\${discussionNumber}/reactions\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a \`Status: 200 OK\` means that you already added the reaction type to this team discussion. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions\`.
     *
     * @tags reactions
     * @name ReactionsCreateForTeamDiscussionInOrg
     * @summary Create reaction for a team discussion
     * @request POST:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
     */
    reactionsCreateForTeamDiscussionInOrg: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions/\${discussionNumber}/reactions\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** You can also specify a team or organization with \`team_id\` and \`org_id\` using the route \`DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id\`. Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags reactions
     * @name ReactionsDeleteForTeamDiscussion
     * @summary Delete team discussion reaction
     * @request DELETE:/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}
     */
    reactionsDeleteForTeamDiscussion: (
      org: string,
      teamSlug: string,
      discussionNumber: number,
      reactionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/discussions/\${discussionNumber}/reactions/\${reactionId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description The return hash contains a \`role\` field which refers to the Organization Invitation role and will be one of the following values: \`direct_member\`, \`admin\`, \`billing_manager\`, \`hiring_manager\`, or \`reinstate\`. If the invitee is not a GitHub member, the \`login\` field in the return hash will be \`null\`. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/invitations\`.
     *
     * @tags teams
     * @name TeamsListPendingInvitationsInOrg
     * @summary List pending team invitations
     * @request GET:/orgs/{org}/teams/{team_slug}/invitations
     */
    teamsListPendingInvitationsInOrg: (
      org: string,
      teamSlug: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationInvitation[], any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/invitations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Team members will include the members of child teams. To list members in a team, the team must be visible to the authenticated user.
     *
     * @tags teams
     * @name TeamsListMembersInOrg
     * @summary List team members
     * @request GET:/orgs/{org}/teams/{team_slug}/members
     */
    teamsListMembersInOrg: (
      org: string,
      teamSlug: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * Filters members returned by their role in the team. Can be one of:
         * \\* \`member\` - normal members of the team.
         * \\* \`maintainer\` - team maintainers.
         * \\* \`all\` - all members of the team.
         * @default "all"
         */
        role?: "member" | "maintainer" | "all";
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/members\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Team members will include the members of child teams. To get a user's membership with a team, the team must be visible to the authenticated user. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/memberships/{username}\`. **Note:** The \`role\` for organization owners returns as \`maintainer\`. For more information about \`maintainer\` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
     *
     * @tags teams
     * @name TeamsGetMembershipForUserInOrg
     * @summary Get team membership for a user
     * @request GET:/orgs/{org}/teams/{team_slug}/memberships/{username}
     */
    teamsGetMembershipForUserInOrg: (org: string, teamSlug: string, username: string, params: RequestParams = {}) =>
      this.request<TeamMembership, void>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/memberships/\${username}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team. **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)." An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PUT /organizations/{org_id}/team/{team_id}/memberships/{username}\`.
     *
     * @tags teams
     * @name TeamsAddOrUpdateMembershipForUserInOrg
     * @summary Add or update team membership for a user
     * @request PUT:/orgs/{org}/teams/{team_slug}/memberships/{username}
     */
    teamsAddOrUpdateMembershipForUserInOrg: (
      org: string,
      teamSlug: string,
      username: string,
      data: {
        /**
         * The role that this user should have in the team. Can be one of:
         * \\* \`member\` - a normal member of the team.
         * \\* \`maintainer\` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
         * @default "member"
         */
        role?: "member" | "maintainer";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        TeamMembership,
        void | {
          errors?: {
            code?: string;
            field?: string;
            resource?: string;
          }[];
          message?: string;
        }
      >({
        path: \`/orgs/\${org}/teams/\${teamSlug}/memberships/\${username}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team. **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)." **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}\`.
     *
     * @tags teams
     * @name TeamsRemoveMembershipForUserInOrg
     * @summary Remove team membership for a user
     * @request DELETE:/orgs/{org}/teams/{team_slug}/memberships/{username}
     */
    teamsRemoveMembershipForUserInOrg: (org: string, teamSlug: string, username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/memberships/\${username}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the organization projects for a team. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/projects\`.
     *
     * @tags teams
     * @name TeamsListProjectsInOrg
     * @summary List team projects
     * @request GET:/orgs/{org}/teams/{team_slug}/projects
     */
    teamsListProjectsInOrg: (
      org: string,
      teamSlug: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamProject[], any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/projects\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Checks whether a team has \`read\`, \`write\`, or \`admin\` permissions for an organization project. The response includes projects inherited from a parent team. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/projects/{project_id}\`.
     *
     * @tags teams
     * @name TeamsCheckPermissionsForProjectInOrg
     * @summary Check team permissions for a project
     * @request GET:/orgs/{org}/teams/{team_slug}/projects/{project_id}
     */
    teamsCheckPermissionsForProjectInOrg: (
      org: string,
      teamSlug: string,
      projectId: number,
      params: RequestParams = {},
    ) =>
      this.request<TeamProject, void>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/projects/\${projectId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have \`admin\` permissions for the project. The project and team must be part of the same organization. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}\`.
     *
     * @tags teams
     * @name TeamsAddOrUpdateProjectPermissionsInOrg
     * @summary Add or update team project permissions
     * @request PUT:/orgs/{org}/teams/{team_slug}/projects/{project_id}
     */
    teamsAddOrUpdateProjectPermissionsInOrg: (
      org: string,
      teamSlug: string,
      projectId: number,
      data: {
        /**
         * The permission to grant to the team for this project. Can be one of:
         * \\* \`read\` - team members can read, but not write to or administer this project.
         * \\* \`write\` - team members can read and write, but not administer this project.
         * \\* \`admin\` - team members can read, write and administer this project.
         * Default: the team's \`permission\` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
         */
        permission?: "read" | "write" | "admin";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        void,
        {
          documentation_url?: string;
          message?: string;
        }
      >({
        path: \`/orgs/\${org}/teams/\${teamSlug}/projects/\${projectId}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have \`read\` access to both the team and project, or \`admin\` access to the team or project. This endpoint removes the project from the team, but does not delete the project. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}\`.
     *
     * @tags teams
     * @name TeamsRemoveProjectInOrg
     * @summary Remove a project from a team
     * @request DELETE:/orgs/{org}/teams/{team_slug}/projects/{project_id}
     */
    teamsRemoveProjectInOrg: (org: string, teamSlug: string, projectId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/projects/\${projectId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists a team's repositories visible to the authenticated user. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/repos\`.
     *
     * @tags teams
     * @name TeamsListReposInOrg
     * @summary List team repositories
     * @request GET:/orgs/{org}/teams/{team_slug}/repos
     */
    teamsListReposInOrg: (
      org: string,
      teamSlug: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/repos\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Checks whether a team has \`admin\`, \`push\`, \`maintain\`, \`triage\`, or \`pull\` permission for a repository. Repositories inherited through a parent team will also be checked. You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`application/vnd.github.v3.repository+json\` accept header. If a team doesn't have permission for the repository, you will receive a \`404 Not Found\` response status. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}\`.
     *
     * @tags teams
     * @name TeamsCheckPermissionsForRepoInOrg
     * @summary Check team permissions for a repository
     * @request GET:/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
     */
    teamsCheckPermissionsForRepoInOrg: (
      org: string,
      teamSlug: string,
      owner: string,
      repo: string,
      params: RequestParams = {},
    ) =>
      this.request<TeamRepository, void>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/repos/\${owner}/\${repo}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a \`422 Unprocessable Entity\` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)." **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}\`. For more information about the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
     *
     * @tags teams
     * @name TeamsAddOrUpdateRepoPermissionsInOrg
     * @summary Add or update team repository permissions
     * @request PUT:/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
     */
    teamsAddOrUpdateRepoPermissionsInOrg: (
      org: string,
      teamSlug: string,
      owner: string,
      repo: string,
      data: {
        /**
         * The permission to grant the team on this repository. Can be one of:
         * \\* \`pull\` - team members can pull, but not push to or administer this repository.
         * \\* \`push\` - team members can pull and push, but not administer this repository.
         * \\* \`admin\` - team members can pull, push and administer this repository.
         * \\* \`maintain\` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.
         * \\* \`triage\` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.
         *
         * If no permission is specified, the team's \`permission\` attribute will be used to determine what permission to grant the team on this repository.
         */
        permission?: "pull" | "push" | "admin" | "maintain" | "triage";
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/repos/\${owner}/\${repo}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}\`.
     *
     * @tags teams
     * @name TeamsRemoveRepoInOrg
     * @summary Remove a repository from a team
     * @request DELETE:/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
     */
    teamsRemoveRepoInOrg: (org: string, teamSlug: string, owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/repos/\${owner}/\${repo}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. List IdP groups connected to a team on GitHub. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings\`.
     *
     * @tags teams
     * @name TeamsListIdpGroupsInOrg
     * @summary List IdP groups for a team
     * @request GET:/orgs/{org}/teams/{team_slug}/team-sync/group-mappings
     */
    teamsListIdpGroupsInOrg: (org: string, teamSlug: string, params: RequestParams = {}) =>
      this.request<GroupMapping, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/team-sync/group-mappings\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty \`groups\` array will remove all connections for a team. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings\`.
     *
     * @tags teams
     * @name TeamsCreateOrUpdateIdpGroupConnectionsInOrg
     * @summary Create or update IdP group connections
     * @request PATCH:/orgs/{org}/teams/{team_slug}/team-sync/group-mappings
     */
    teamsCreateOrUpdateIdpGroupConnectionsInOrg: (
      org: string,
      teamSlug: string,
      data: {
        /** The IdP groups you want to connect to a GitHub team. When updating, the new \`groups\` object will replace the original one. You must include any existing groups that you don't want to remove. */
        groups: {
          /** Description of the IdP group. */
          group_description: string;
          /** ID of the IdP group. */
          group_id: string;
          /** Name of the IdP group. */
          group_name: string;
        }[];
      },
      params: RequestParams = {},
    ) =>
      this.request<GroupMapping, any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/team-sync/group-mappings\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the child teams of the team specified by \`{team_slug}\`. **Note:** You can also specify a team by \`org_id\` and \`team_id\` using the route \`GET /organizations/{org_id}/team/{team_id}/teams\`.
     *
     * @tags teams
     * @name TeamsListChildInOrg
     * @summary List child teams
     * @request GET:/orgs/{org}/teams/{team_slug}/teams
     */
    teamsListChildInOrg: (
      org: string,
      teamSlug: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Team[], any>({
        path: \`/orgs/\${org}/teams/\${teamSlug}/teams\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  projects = {
    /**
     * No description
     *
     * @tags projects
     * @name ProjectsGetCard
     * @summary Get a project card
     * @request GET:/projects/columns/cards/{card_id}
     */
    projectsGetCard: (cardId: number, params: RequestParams = {}) =>
      this.request<ProjectCard, BasicError>({
        path: \`/projects/columns/cards/\${cardId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags projects
     * @name ProjectsUpdateCard
     * @summary Update an existing project card
     * @request PATCH:/projects/columns/cards/{card_id}
     */
    projectsUpdateCard: (
      cardId: number,
      data: {
        /**
         * Whether or not the card is archived
         * @example false
         */
        archived?: boolean;
        /**
         * The project card's note
         * @example "Update all gems"
         */
        note?: string | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<ProjectCard, BasicError | ValidationErrorSimple>({
        path: \`/projects/columns/cards/\${cardId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags projects
     * @name ProjectsDeleteCard
     * @summary Delete a project card
     * @request DELETE:/projects/columns/cards/{card_id}
     */
    projectsDeleteCard: (cardId: number, params: RequestParams = {}) =>
      this.request<
        void,
        | BasicError
        | {
            documentation_url?: string;
            errors?: string[];
            message?: string;
          }
      >({
        path: \`/projects/columns/cards/\${cardId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags projects
     * @name ProjectsMoveCard
     * @summary Move a project card
     * @request POST:/projects/columns/cards/{card_id}/moves
     */
    projectsMoveCard: (
      cardId: number,
      data: {
        /**
         * The unique identifier of the column the card should be moved to
         * @example 42
         */
        column_id?: number;
        /**
         * The position of the card in a column
         * @pattern ^(?:top|bottom|after:\\d+)$
         * @example "bottom"
         */
        position: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        object,
        | BasicError
        | {
            documentation_url?: string;
            errors?: {
              code?: string;
              field?: string;
              message?: string;
              resource?: string;
            }[];
            message?: string;
          }
        | ValidationError
        | {
            code?: string;
            documentation_url?: string;
            errors?: {
              code?: string;
              message?: string;
            }[];
            message?: string;
          }
      >({
        path: \`/projects/columns/cards/\${cardId}/moves\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags projects
     * @name ProjectsGetColumn
     * @summary Get a project column
     * @request GET:/projects/columns/{column_id}
     */
    projectsGetColumn: (columnId: number, params: RequestParams = {}) =>
      this.request<ProjectColumn, BasicError>({
        path: \`/projects/columns/\${columnId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags projects
     * @name ProjectsUpdateColumn
     * @summary Update an existing project column
     * @request PATCH:/projects/columns/{column_id}
     */
    projectsUpdateColumn: (
      columnId: number,
      data: {
        /**
         * Name of the project column
         * @example "Remaining tasks"
         */
        name: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ProjectColumn, BasicError>({
        path: \`/projects/columns/\${columnId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags projects
     * @name ProjectsDeleteColumn
     * @summary Delete a project column
     * @request DELETE:/projects/columns/{column_id}
     */
    projectsDeleteColumn: (columnId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/projects/columns/\${columnId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags projects
     * @name ProjectsListCards
     * @summary List project cards
     * @request GET:/projects/columns/{column_id}/cards
     */
    projectsListCards: (
      columnId: number,
      query?: {
        /**
         * Filters the project cards that are returned by the card's state. Can be one of \`all\`,\`archived\`, or \`not_archived\`.
         * @default "not_archived"
         */
        archived_state?: "all" | "archived" | "not_archived";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ProjectCard[], BasicError>({
        path: \`/projects/columns/\${columnId}/cards\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
     *
     * @tags projects
     * @name ProjectsCreateCard
     * @summary Create a project card
     * @request POST:/projects/columns/{column_id}/cards
     */
    projectsCreateCard: (
      columnId: number,
      data:
        | {
            /**
             * The project card's note
             * @example "Update all gems"
             */
            note: string | null;
          }
        | {
            /**
             * The unique identifier of the content associated with the card
             * @example 42
             */
            content_id: number;
            /**
             * The piece of content associated with the card
             * @example "PullRequest"
             */
            content_type: string;
          },
      params: RequestParams = {},
    ) =>
      this.request<
        ProjectCard,
        | BasicError
        | (ValidationError | ValidationErrorSimple)
        | {
            code?: string;
            documentation_url?: string;
            errors?: {
              code?: string;
              message?: string;
            }[];
            message?: string;
          }
      >({
        path: \`/projects/columns/\${columnId}/cards\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags projects
     * @name ProjectsMoveColumn
     * @summary Move a project column
     * @request POST:/projects/columns/{column_id}/moves
     */
    projectsMoveColumn: (
      columnId: number,
      data: {
        /**
         * The position of the column in a project
         * @pattern ^(?:first|last|after:\\d+)$
         * @example "last"
         */
        position: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<object, BasicError | ValidationErrorSimple>({
        path: \`/projects/columns/\${columnId}/moves\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a project by its \`id\`. Returns a \`404 Not Found\` status if projects are disabled. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
     *
     * @tags projects
     * @name ProjectsGet
     * @summary Get a project
     * @request GET:/projects/{project_id}
     */
    projectsGet: (projectId: number, params: RequestParams = {}) =>
      this.request<Project, BasicError>({
        path: \`/projects/\${projectId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a project board's information. Returns a \`404 Not Found\` status if projects are disabled. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
     *
     * @tags projects
     * @name ProjectsUpdate
     * @summary Update a project
     * @request PATCH:/projects/{project_id}
     */
    projectsUpdate: (
      projectId: number,
      data: {
        /**
         * Body of the project
         * @example "This project represents the sprint of the first week in January"
         */
        body?: string | null;
        /**
         * Name of the project
         * @example "Week One Sprint"
         */
        name?: string;
        /** The baseline permission that all organization members have on this project */
        organization_permission?: "read" | "write" | "admin" | "none";
        /** Whether or not this project can be seen by everyone. */
        private?: boolean;
        /**
         * State of the project; either 'open' or 'closed'
         * @example "open"
         */
        state?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Project,
        | BasicError
        | {
            documentation_url?: string;
            errors?: string[];
            message?: string;
          }
        | void
        | ValidationErrorSimple
      >({
        path: \`/projects/\${projectId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a project board. Returns a \`404 Not Found\` status if projects are disabled.
     *
     * @tags projects
     * @name ProjectsDelete
     * @summary Delete a project
     * @request DELETE:/projects/{project_id}
     */
    projectsDelete: (projectId: number, params: RequestParams = {}) =>
      this.request<
        void,
        | BasicError
        | {
            documentation_url?: string;
            errors?: string[];
            message?: string;
          }
      >({
        path: \`/projects/\${projectId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project \`admin\` to list collaborators.
     *
     * @tags projects
     * @name ProjectsListCollaborators
     * @summary List project collaborators
     * @request GET:/projects/{project_id}/collaborators
     */
    projectsListCollaborators: (
      projectId: number,
      query?: {
        /**
         * Filters the collaborators by their affiliation. Can be one of:
         * \\* \`outside\`: Outside collaborators of a project that are not a member of the project's organization.
         * \\* \`direct\`: Collaborators with permissions to a project, regardless of organization membership status.
         * \\* \`all\`: All collaborators the authenticated user can see.
         * @default "all"
         */
        affiliation?: "outside" | "direct" | "all";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        SimpleUser[],
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/projects/\${projectId}/collaborators\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project \`admin\` to add a collaborator.
     *
     * @tags projects
     * @name ProjectsAddCollaborator
     * @summary Add project collaborator
     * @request PUT:/projects/{project_id}/collaborators/{username}
     */
    projectsAddCollaborator: (
      projectId: number,
      username: string,
      data: {
        /**
         * The permission to grant the collaborator.
         * @default "write"
         * @example "write"
         */
        permission?: "read" | "write" | "admin";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        void,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/projects/\${projectId}/collaborators/\${username}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Removes a collaborator from an organization project. You must be an organization owner or a project \`admin\` to remove a collaborator.
     *
     * @tags projects
     * @name ProjectsRemoveCollaborator
     * @summary Remove user as a collaborator
     * @request DELETE:/projects/{project_id}/collaborators/{username}
     */
    projectsRemoveCollaborator: (projectId: number, username: string, params: RequestParams = {}) =>
      this.request<
        void,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/projects/\${projectId}/collaborators/\${username}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Returns the collaborator's permission level for an organization project. Possible values for the \`permission\` key: \`admin\`, \`write\`, \`read\`, \`none\`. You must be an organization owner or a project \`admin\` to review a user's permission level.
     *
     * @tags projects
     * @name ProjectsGetPermissionForUser
     * @summary Get project permission for a user
     * @request GET:/projects/{project_id}/collaborators/{username}/permission
     */
    projectsGetPermissionForUser: (projectId: number, username: string, params: RequestParams = {}) =>
      this.request<
        RepositoryCollaboratorPermission,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/projects/\${projectId}/collaborators/\${username}/permission\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags projects
     * @name ProjectsListColumns
     * @summary List project columns
     * @request GET:/projects/{project_id}/columns
     */
    projectsListColumns: (
      projectId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ProjectColumn[], BasicError>({
        path: \`/projects/\${projectId}/columns\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags projects
     * @name ProjectsCreateColumn
     * @summary Create a project column
     * @request POST:/projects/{project_id}/columns
     */
    projectsCreateColumn: (
      projectId: number,
      data: {
        /**
         * Name of the project column
         * @example "Remaining tasks"
         */
        name: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ProjectColumn, BasicError | ValidationErrorSimple>({
        path: \`/projects/\${projectId}/columns\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),
  };
  rateLimit = {
    /**
     * @description **Note:** Accessing this endpoint does not count against your REST API rate limit. **Note:** The \`rate\` object is deprecated. If you're writing new API client code or updating existing code, you should use the \`core\` object instead of the \`rate\` object. The \`core\` object contains the same information that is present in the \`rate\` object.
     *
     * @tags rate-limit
     * @name RateLimitGet
     * @summary Get rate limit status for the authenticated user
     * @request GET:/rate_limit
     */
    rateLimitGet: (params: RequestParams = {}) =>
      this.request<RateLimitOverview, BasicError>({
        path: \`/rate_limit\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  reactions = {
    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).
     *
     * @tags reactions
     * @name ReactionsDeleteLegacy
     * @summary Delete a reaction (Legacy)
     * @request DELETE:/reactions/{reaction_id}
     * @deprecated
     */
    reactionsDeleteLegacy: (reactionId: number, params: RequestParams = {}) =>
      this.request<
        void,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/reactions/\${reactionId}\`,
        method: "DELETE",
        ...params,
      }),
  };
  repos = {
    /**
     * @description When you pass the \`scarlet-witch-preview\` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file. The \`parent\` and \`source\` objects are present when the repository is a fork. \`parent\` is the repository this repository was forked from, \`source\` is the ultimate source for the network.
     *
     * @tags repos
     * @name ReposGet
     * @summary Get a repository
     * @request GET:/repos/{owner}/{repo}
     */
    reposGet: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<FullRepository, BasicError>({
        path: \`/repos/\${owner}/\${repo}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.
     *
     * @tags repos
     * @name ReposUpdate
     * @summary Update a repository
     * @request PATCH:/repos/{owner}/{repo}
     */
    reposUpdate: (
      owner: string,
      repo: string,
      data: {
        /**
         * Either \`true\` to allow merging pull requests with a merge commit, or \`false\` to prevent merging pull requests with merge commits.
         * @default true
         */
        allow_merge_commit?: boolean;
        /**
         * Either \`true\` to allow rebase-merging pull requests, or \`false\` to prevent rebase-merging.
         * @default true
         */
        allow_rebase_merge?: boolean;
        /**
         * Either \`true\` to allow squash-merging pull requests, or \`false\` to prevent squash-merging.
         * @default true
         */
        allow_squash_merge?: boolean;
        /**
         * \`true\` to archive this repository. **Note**: You cannot unarchive repositories through the API.
         * @default false
         */
        archived?: boolean;
        /** Updates the default branch for this repository. */
        default_branch?: string;
        /**
         * Either \`true\` to allow automatically deleting head branches when pull requests are merged, or \`false\` to prevent automatic deletion.
         * @default false
         */
        delete_branch_on_merge?: boolean;
        /** A short description of the repository. */
        description?: string;
        /**
         * Either \`true\` to enable issues for this repository or \`false\` to disable them.
         * @default true
         */
        has_issues?: boolean;
        /**
         * Either \`true\` to enable projects for this repository or \`false\` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is \`false\`, and if you pass \`true\`, the API returns an error.
         * @default true
         */
        has_projects?: boolean;
        /**
         * Either \`true\` to enable the wiki for this repository or \`false\` to disable it.
         * @default true
         */
        has_wiki?: boolean;
        /** A URL with more information about the repository. */
        homepage?: string;
        /**
         * Either \`true\` to make this repo available as a template repository or \`false\` to prevent it.
         * @default false
         */
        is_template?: boolean;
        /** The name of the repository. */
        name?: string;
        /**
         * Either \`true\` to make the repository private or \`false\` to make it public. Default: \`false\`.
         * **Note**: You will get a \`422\` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a \`422\` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
         * @default false
         */
        private?: boolean;
        /** Can be \`public\` or \`private\`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, \`visibility\` can also be \`internal\`. The \`visibility\` parameter overrides the \`private\` parameter when you use both along with the \`nebula-preview\` preview header. */
        visibility?: "public" | "private" | "visibility" | "internal";
      },
      params: RequestParams = {},
    ) =>
      this.request<FullRepository, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deleting a repository requires admin access. If OAuth is used, the \`delete_repo\` scope is required. If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, you will get a \`403 Forbidden\` response.
     *
     * @tags repos
     * @name ReposDelete
     * @summary Delete a repository
     * @request DELETE:/repos/{owner}/{repo}
     */
    reposDelete: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<
        void,
        | {
            documentation_url?: string;
            message?: string;
          }
        | BasicError
      >({
        path: \`/repos/\${owner}/\${repo}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsListArtifactsForRepo
     * @summary List artifacts for a repository
     * @request GET:/repos/{owner}/{repo}/actions/artifacts
     */
    actionsListArtifactsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          artifacts: Artifact[];
          total_count: number;
        },
        any
      >({
        path: \`/repos/\${owner}/\${repo}/actions/artifacts\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetArtifact
     * @summary Get an artifact
     * @request GET:/repos/{owner}/{repo}/actions/artifacts/{artifact_id}
     */
    actionsGetArtifact: (owner: string, repo: string, artifactId: number, params: RequestParams = {}) =>
      this.request<Artifact, any>({
        path: \`/repos/\${owner}/\${repo}/actions/artifacts/\${artifactId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes an artifact for a workflow run. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteArtifact
     * @summary Delete an artifact
     * @request DELETE:/repos/{owner}/{repo}/actions/artifacts/{artifact_id}
     */
    actionsDeleteArtifact: (owner: string, repo: string, artifactId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/actions/artifacts/\${artifactId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for \`Location:\` in the response header to find the URL for the download. The \`:archive_format\` must be \`zip\`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsDownloadArtifact
     * @summary Download an artifact
     * @request GET:/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}
     */
    actionsDownloadArtifact: (
      owner: string,
      repo: string,
      artifactId: number,
      archiveFormat: string,
      params: RequestParams = {},
    ) =>
      this.request<any, void>({
        path: \`/repos/\${owner}/\${repo}/actions/artifacts/\${artifactId}/\${archiveFormat}\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetJobForWorkflowRun
     * @summary Get a job for a workflow run
     * @request GET:/repos/{owner}/{repo}/actions/jobs/{job_id}
     */
    actionsGetJobForWorkflowRun: (owner: string, repo: string, jobId: number, params: RequestParams = {}) =>
      this.request<Job, any>({
        path: \`/repos/\${owner}/\${repo}/actions/jobs/\${jobId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for \`Location:\` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsDownloadJobLogsForWorkflowRun
     * @summary Download job logs for a workflow run
     * @request GET:/repos/{owner}/{repo}/actions/jobs/{job_id}/logs
     */
    actionsDownloadJobLogsForWorkflowRun: (owner: string, repo: string, jobId: number, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/repos/\${owner}/\${repo}/actions/jobs/\${jobId}/logs\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`administration\` repository permission to use this API.
     *
     * @tags actions
     * @name ActionsGetGithubActionsPermissionsRepository
     * @summary Get GitHub Actions permissions for a repository
     * @request GET:/repos/{owner}/{repo}/actions/permissions
     */
    actionsGetGithubActionsPermissionsRepository: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<ActionsRepositoryPermissions, any>({
        path: \`/repos/\${owner}/\${repo}/actions/permissions\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository. If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as \`allowed_actions\` to \`selected\` actions, then you cannot override them for the repository. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`administration\` repository permission to use this API.
     *
     * @tags actions
     * @name ActionsSetGithubActionsPermissionsRepository
     * @summary Set GitHub Actions permissions for a repository
     * @request PUT:/repos/{owner}/{repo}/actions/permissions
     */
    actionsSetGithubActionsPermissionsRepository: (
      owner: string,
      repo: string,
      data: {
        /** The permissions policy that controls the actions that are allowed to run. Can be one of: \`all\`, \`local_only\`, or \`selected\`. */
        allowed_actions?: AllowedActions;
        /** Whether GitHub Actions is enabled on the repository. */
        enabled: ActionsEnabled;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/actions/permissions\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)." You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`administration\` repository permission to use this API.
     *
     * @tags actions
     * @name ActionsGetAllowedActionsRepository
     * @summary Get allowed actions for a repository
     * @request GET:/repos/{owner}/{repo}/actions/permissions/selected-actions
     */
    actionsGetAllowedActionsRepository: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<SelectedActions, any>({
        path: \`/repos/\${owner}/\${repo}/actions/permissions/selected-actions\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for \`allowed_actions\` must be configured to \`selected\`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)." If the repository belongs to an organization or enterprise that has \`selected\` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings. To use the \`patterns_allowed\` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the \`patterns_allowed\` setting only applies to public repositories. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`administration\` repository permission to use this API.
     *
     * @tags actions
     * @name ActionsSetAllowedActionsRepository
     * @summary Set allowed actions for a repository
     * @request PUT:/repos/{owner}/{repo}/actions/permissions/selected-actions
     */
    actionsSetAllowedActionsRepository: (
      owner: string,
      repo: string,
      data: SelectedActions,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/actions/permissions/selected-actions\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the \`repo\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListSelfHostedRunnersForRepo
     * @summary List self-hosted runners for a repository
     * @request GET:/repos/{owner}/{repo}/actions/runners
     */
    actionsListSelfHostedRunnersForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          runners: Runner[];
          total_count: number;
        },
        any
      >({
        path: \`/repos/\${owner}/\${repo}/actions/runners\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists binaries for the runner application that you can download and run. You must authenticate using an access token with the \`repo\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsListRunnerApplicationsForRepo
     * @summary List runner applications for a repository
     * @request GET:/repos/{owner}/{repo}/actions/runners/downloads
     */
    actionsListRunnerApplicationsForRepo: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<RunnerApplication[], any>({
        path: \`/repos/\${owner}/\${repo}/actions/runners/downloads\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a token that you can pass to the \`config\` script. The token expires after one hour. You must authenticate using an access token with the \`repo\` scope to use this endpoint. #### Example using registration token Configure your self-hosted runner, replacing \`TOKEN\` with the registration token provided by this endpoint. \`\`\` ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN \`\`\`
     *
     * @tags actions
     * @name ActionsCreateRegistrationTokenForRepo
     * @summary Create a registration token for a repository
     * @request POST:/repos/{owner}/{repo}/actions/runners/registration-token
     */
    actionsCreateRegistrationTokenForRepo: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<AuthenticationToken, any>({
        path: \`/repos/\${owner}/\${repo}/actions/runners/registration-token\`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the \`repo\` scope to use this endpoint. #### Example using remove token To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint. \`\`\` ./config.sh remove --token TOKEN \`\`\`
     *
     * @tags actions
     * @name ActionsCreateRemoveTokenForRepo
     * @summary Create a remove token for a repository
     * @request POST:/repos/{owner}/{repo}/actions/runners/remove-token
     */
    actionsCreateRemoveTokenForRepo: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<AuthenticationToken, any>({
        path: \`/repos/\${owner}/\${repo}/actions/runners/remove-token\`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific self-hosted runner configured in a repository. You must authenticate using an access token with the \`repo\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetSelfHostedRunnerForRepo
     * @summary Get a self-hosted runner for a repository
     * @request GET:/repos/{owner}/{repo}/actions/runners/{runner_id}
     */
    actionsGetSelfHostedRunnerForRepo: (owner: string, repo: string, runnerId: number, params: RequestParams = {}) =>
      this.request<Runner, any>({
        path: \`/repos/\${owner}/\${repo}/actions/runners/\${runnerId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists. You must authenticate using an access token with the \`repo\` scope to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteSelfHostedRunnerFromRepo
     * @summary Delete a self-hosted runner from a repository
     * @request DELETE:/repos/{owner}/{repo}/actions/runners/{runner_id}
     */
    actionsDeleteSelfHostedRunnerFromRepo: (
      owner: string,
      repo: string,
      runnerId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/actions/runners/\${runnerId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters). Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsListWorkflowRunsForRepo
     * @summary List workflow runs for a repository
     * @request GET:/repos/{owner}/{repo}/actions/runs
     */
    actionsListWorkflowRunsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /** Returns someone's workflow runs. Use the login for the user who created the \`push\` associated with the check suite or workflow run. */
        actor?: string;
        /** Returns workflow runs associated with a branch. Use the name of the branch of the \`push\`. */
        branch?: string;
        /** Returns workflow run triggered by the event you specify. For example, \`push\`, \`pull_request\` or \`issue\`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
        event?: string;
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Returns workflow runs associated with the check run \`status\` or \`conclusion\` you specify. For example, a conclusion can be \`success\` or a status can be \`completed\`. For more information, see the \`status\` and \`conclusion\` options available in "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run)." */
        status?: "completed" | "status" | "conclusion";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          workflow_runs: WorkflowRun[];
        },
        any
      >({
        path: \`/repos/\${owner}/\${repo}/actions/runs\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetWorkflowRun
     * @summary Get a workflow run
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}
     */
    actionsGetWorkflowRun: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<WorkflowRun, any>({
        path: \`/repos/\${owner}/\${repo}/actions/runs/\${runId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteWorkflowRun
     * @summary Delete a workflow run
     * @request DELETE:/repos/{owner}/{repo}/actions/runs/{run_id}
     */
    actionsDeleteWorkflowRun: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/actions/runs/\${runId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsListWorkflowRunArtifacts
     * @summary List workflow run artifacts
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts
     */
    actionsListWorkflowRunArtifacts: (
      owner: string,
      repo: string,
      runId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          artifacts: Artifact[];
          total_count: number;
        },
        any
      >({
        path: \`/repos/\${owner}/\${repo}/actions/runs/\${runId}/artifacts\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Cancels a workflow run using its \`id\`. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsCancelWorkflowRun
     * @summary Cancel a workflow run
     * @request POST:/repos/{owner}/{repo}/actions/runs/{run_id}/cancel
     */
    actionsCancelWorkflowRun: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/actions/runs/\${runId}/cancel\`,
        method: "POST",
        ...params,
      }),

    /**
     * @description Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
     *
     * @tags actions
     * @name ActionsListJobsForWorkflowRun
     * @summary List jobs for a workflow run
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}/jobs
     */
    actionsListJobsForWorkflowRun: (
      owner: string,
      repo: string,
      runId: number,
      query?: {
        /**
         * Filters jobs by their \`completed_at\` timestamp. Can be one of:
         * \\* \`latest\`: Returns jobs from the most recent execution of the workflow run.
         * \\* \`all\`: Returns all jobs for a workflow run, including from old executions of the workflow run.
         * @default "latest"
         */
        filter?: "latest" | "all";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          jobs: Job[];
          total_count: number;
        },
        any
      >({
        path: \`/repos/\${owner}/\${repo}/actions/runs/\${runId}/jobs\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for \`Location:\` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsDownloadWorkflowRunLogs
     * @summary Download workflow run logs
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}/logs
     */
    actionsDownloadWorkflowRunLogs: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/repos/\${owner}/\${repo}/actions/runs/\${runId}/logs\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Deletes all logs for a workflow run. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteWorkflowRunLogs
     * @summary Delete workflow run logs
     * @request DELETE:/repos/{owner}/{repo}/actions/runs/{run_id}/logs
     */
    actionsDeleteWorkflowRunLogs: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/actions/runs/\${runId}/logs\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Re-runs your workflow run using its \`id\`. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsReRunWorkflow
     * @summary Re-run a workflow
     * @request POST:/repos/{owner}/{repo}/actions/runs/{run_id}/rerun
     */
    actionsReRunWorkflow: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/actions/runs/\${runId}/rerun\`,
        method: "POST",
        ...params,
      }),

    /**
     * @description Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)". Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetWorkflowRunUsage
     * @summary Get workflow run usage
     * @request GET:/repos/{owner}/{repo}/actions/runs/{run_id}/timing
     */
    actionsGetWorkflowRunUsage: (owner: string, repo: string, runId: number, params: RequestParams = {}) =>
      this.request<WorkflowRunUsage, any>({
        path: \`/repos/\${owner}/\${repo}/actions/runs/\${runId}/timing\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsListRepoSecrets
     * @summary List repository secrets
     * @request GET:/repos/{owner}/{repo}/actions/secrets
     */
    actionsListRepoSecrets: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          secrets: ActionsSecret[];
          total_count: number;
        },
        any
      >({
        path: \`/repos/\${owner}/\${repo}/actions/secrets\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetRepoPublicKey
     * @summary Get a repository public key
     * @request GET:/repos/{owner}/{repo}/actions/secrets/public-key
     */
    actionsGetRepoPublicKey: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<ActionsPublicKey, any>({
        path: \`/repos/\${owner}/\${repo}/actions/secrets/public-key\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetRepoSecret
     * @summary Get a repository secret
     * @request GET:/repos/{owner}/{repo}/actions/secrets/{secret_name}
     */
    actionsGetRepoSecret: (owner: string, repo: string, secretName: string, params: RequestParams = {}) =>
      this.request<ActionsSecret, any>({
        path: \`/repos/\${owner}/\${repo}/actions/secrets/\${secretName}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint. #### Example encrypting a secret using Node.js Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library. \`\`\` const sodium = require('tweetsodium'); const key = "base64-encoded-public-key"; const value = "plain-text-secret"; // Convert the message and key to Uint8Array's (Buffer implements that interface) const messageBytes = Buffer.from(value); const keyBytes = Buffer.from(key, 'base64'); // Encrypt using LibSodium. const encryptedBytes = sodium.seal(messageBytes, keyBytes); // Base64 the encrypted secret const encrypted = Buffer.from(encryptedBytes).toString('base64'); console.log(encrypted); \`\`\` #### Example encrypting a secret using Python Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3. \`\`\` from base64 import b64encode from nacl import encoding, public def encrypt(public_key: str, secret_value: str) -> str: """Encrypt a Unicode string using the public key.""" public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder()) sealed_box = public.SealedBox(public_key) encrypted = sealed_box.encrypt(secret_value.encode("utf-8")) return b64encode(encrypted).decode("utf-8") \`\`\` #### Example encrypting a secret using C# Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package. \`\`\` var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret"); var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU="); var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey); Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); \`\`\` #### Example encrypting a secret using Ruby Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem. \`\`\`ruby require "rbnacl" require "base64" key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=") public_key = RbNaCl::PublicKey.new(key) box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt("my_secret") # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) \`\`\`
     *
     * @tags actions
     * @name ActionsCreateOrUpdateRepoSecret
     * @summary Create or update a repository secret
     * @request PUT:/repos/{owner}/{repo}/actions/secrets/{secret_name}
     */
    actionsCreateOrUpdateRepoSecret: (
      owner: string,
      repo: string,
      secretName: string,
      data: {
        /** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint. */
        encrypted_value?: string;
        /** ID of the key you used to encrypt the secret. */
        key_id?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/actions/secrets/\${secretName}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Deletes a secret in a repository using the secret name. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`secrets\` repository permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsDeleteRepoSecret
     * @summary Delete a repository secret
     * @request DELETE:/repos/{owner}/{repo}/actions/secrets/{secret_name}
     */
    actionsDeleteRepoSecret: (owner: string, repo: string, secretName: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/actions/secrets/\${secretName}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsListRepoWorkflows
     * @summary List repository workflows
     * @request GET:/repos/{owner}/{repo}/actions/workflows
     */
    actionsListRepoWorkflows: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          workflows: Workflow[];
        },
        any
      >({
        path: \`/repos/\${owner}/\${repo}/actions/workflows\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a specific workflow. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetWorkflow
     * @summary Get a workflow
     * @request GET:/repos/{owner}/{repo}/actions/workflows/{workflow_id}
     */
    actionsGetWorkflow: (owner: string, repo: string, workflowId: number | string, params: RequestParams = {}) =>
      this.request<Workflow, any>({
        path: \`/repos/\${owner}/\${repo}/actions/workflows/\${workflowId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Disables a workflow and sets the \`state\` of the workflow to \`disabled_manually\`. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsDisableWorkflow
     * @summary Disable a workflow
     * @request PUT:/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable
     */
    actionsDisableWorkflow: (owner: string, repo: string, workflowId: number | string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/actions/workflows/\${workflowId}/disable\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`. You must configure your GitHub Actions workflow to run when the [\`workflow_dispatch\` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The \`inputs\` are configured in the workflow file. For more information about how to configure the \`workflow_dispatch\` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)." You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
     *
     * @tags actions
     * @name ActionsCreateWorkflowDispatch
     * @summary Create a workflow dispatch event
     * @request POST:/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches
     */
    actionsCreateWorkflowDispatch: (
      owner: string,
      repo: string,
      workflowId: number | string,
      data: {
        /** Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when \`inputs\` are omitted. */
        inputs?: Record<string, string>;
        /** The git reference for the workflow. The reference can be a branch or tag name. */
        ref: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/actions/workflows/\${workflowId}/dispatches\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Enables a workflow and sets the \`state\` of the workflow to \`active\`. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`. You must authenticate using an access token with the \`repo\` scope to use this endpoint. GitHub Apps must have the \`actions:write\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsEnableWorkflow
     * @summary Enable a workflow
     * @request PUT:/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable
     */
    actionsEnableWorkflow: (owner: string, repo: string, workflowId: number | string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/actions/workflows/\${workflowId}/enable\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description List all workflow runs for a workflow. You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters). Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope.
     *
     * @tags actions
     * @name ActionsListWorkflowRuns
     * @summary List workflow runs
     * @request GET:/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs
     */
    actionsListWorkflowRuns: (
      owner: string,
      repo: string,
      workflowId: number | string,
      query?: {
        /** Returns someone's workflow runs. Use the login for the user who created the \`push\` associated with the check suite or workflow run. */
        actor?: string;
        /** Returns workflow runs associated with a branch. Use the name of the branch of the \`push\`. */
        branch?: string;
        /** Returns workflow run triggered by the event you specify. For example, \`push\`, \`pull_request\` or \`issue\`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
        event?: string;
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Returns workflow runs associated with the check run \`status\` or \`conclusion\` you specify. For example, a conclusion can be \`success\` or a status can be \`completed\`. For more information, see the \`status\` and \`conclusion\` options available in "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run)." */
        status?: "completed" | "status" | "conclusion";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          total_count: number;
          workflow_runs: WorkflowRun[];
        },
        any
      >({
        path: \`/repos/\${owner}/\${repo}/actions/workflows/\${workflowId}/runs\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)". You can replace \`workflow_id\` with the workflow file name. For example, you could use \`main.yaml\`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the \`repo\` scope. GitHub Apps must have the \`actions:read\` permission to use this endpoint.
     *
     * @tags actions
     * @name ActionsGetWorkflowUsage
     * @summary Get workflow usage
     * @request GET:/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing
     */
    actionsGetWorkflowUsage: (owner: string, repo: string, workflowId: number | string, params: RequestParams = {}) =>
      this.request<WorkflowUsage, any>({
        path: \`/repos/\${owner}/\${repo}/actions/workflows/\${workflowId}/timing\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
     *
     * @tags issues
     * @name IssuesListAssignees
     * @summary List assignees
     * @request GET:/repos/{owner}/{repo}/assignees
     */
    issuesListAssignees: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/assignees\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Checks if a user has permission to be assigned to an issue in this repository. If the \`assignee\` can be assigned to issues in the repository, a \`204\` header with no content is returned. Otherwise a \`404\` status code is returned.
     *
     * @tags issues
     * @name IssuesCheckUserCanBeAssigned
     * @summary Check if a user can be assigned
     * @request GET:/repos/{owner}/{repo}/assignees/{assignee}
     */
    issuesCheckUserCanBeAssigned: (owner: string, repo: string, assignee: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/repos/\${owner}/\${repo}/assignees/\${assignee}\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
     *
     * @tags repos
     * @name ReposEnableAutomatedSecurityFixes
     * @summary Enable automated security fixes
     * @request PUT:/repos/{owner}/{repo}/automated-security-fixes
     */
    reposEnableAutomatedSecurityFixes: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/automated-security-fixes\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
     *
     * @tags repos
     * @name ReposDisableAutomatedSecurityFixes
     * @summary Disable automated security fixes
     * @request DELETE:/repos/{owner}/{repo}/automated-security-fixes
     */
    reposDisableAutomatedSecurityFixes: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/automated-security-fixes\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposListBranches
     * @summary List branches
     * @request GET:/repos/{owner}/{repo}/branches
     */
    reposListBranches: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Setting to \`true\` returns only protected branches. When set to \`false\`, only unprotected branches are returned. Omitting this parameter returns all branches. */
        protected?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<ShortBranch[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/branches\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposGetBranch
     * @summary Get a branch
     * @request GET:/repos/{owner}/{repo}/branches/{branch}
     */
    reposGetBranch: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<
        BranchWithProtection,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposGetBranchProtection
     * @summary Get branch protection
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection
     */
    reposGetBranchProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<BranchProtection, BasicError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Protecting a branch requires admin or owner permissions to the repository. **Note**: Passing new arrays of \`users\` and \`teams\` replaces their previous values. **Note**: The list of users, apps, and teams in total is limited to 100 items.
     *
     * @tags repos
     * @name ReposUpdateBranchProtection
     * @summary Update branch protection
     * @request PUT:/repos/{owner}/{repo}/branches/{branch}/protection
     */
    reposUpdateBranchProtection: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** Allows deletion of the protected branch by anyone with write access to the repository. Set to \`false\` to prevent deletion of the protected branch. Default: \`false\`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation. */
        allow_deletions?: boolean;
        /** Permits force pushes to the protected branch by anyone with write access to the repository. Set to \`true\` to allow force pushes. Set to \`false\` or \`null\` to block force pushes. Default: \`false\`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation." */
        allow_force_pushes?: boolean | null;
        /** Enforce all configured restrictions for administrators. Set to \`true\` to enforce required status checks for repository administrators. Set to \`null\` to disable. */
        enforce_admins: boolean | null;
        /** Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to \`true\` to enforce a linear commit history. Set to \`false\` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: \`false\`. For more information, see "[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation. */
        required_linear_history?: boolean;
        /** Require at least one approving review on a pull request, before merging. Set to \`null\` to disable. */
        required_pull_request_reviews: {
          /** Set to \`true\` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
          dismiss_stale_reviews?: boolean;
          /** Specify which users and teams can dismiss pull request reviews. Pass an empty \`dismissal_restrictions\` object to disable. User and team \`dismissal_restrictions\` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
          dismissal_restrictions?: {
            /** The list of team \`slug\`s with dismissal access */
            teams?: string[];
            /** The list of user \`login\`s with dismissal access */
            users?: string[];
          };
          /** Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) review them. */
          require_code_owner_reviews?: boolean;
          /** Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6. */
          required_approving_review_count?: number;
        } | null;
        /** Require status checks to pass before merging. Set to \`null\` to disable. */
        required_status_checks: {
          /** The list of status checks to require in order to merge into this branch */
          contexts: string[];
          /** Require branches to be up to date before merging. */
          strict: boolean;
        } | null;
        /** Restrict who can push to the protected branch. User, app, and team \`restrictions\` are only available for organization-owned repositories. Set to \`null\` to disable. */
        restrictions: {
          /** The list of app \`slug\`s with push access */
          apps?: string[];
          /** The list of team \`slug\`s with push access */
          teams: string[];
          /** The list of user \`login\`s with push access */
          users: string[];
        } | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        ProtectedBranch,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationErrorSimple
      >({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposDeleteBranchProtection
     * @summary Delete branch protection
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection
     */
    reposDeleteBranchProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposGetAdminBranchProtection
     * @summary Get admin branch protection
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
     */
    reposGetAdminBranchProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<ProtectedBranchAdminEnforced, any>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/enforce_admins\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     *
     * @tags repos
     * @name ReposSetAdminBranchProtection
     * @summary Set admin branch protection
     * @request POST:/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
     */
    reposSetAdminBranchProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<ProtectedBranchAdminEnforced, any>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/enforce_admins\`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     *
     * @tags repos
     * @name ReposDeleteAdminBranchProtection
     * @summary Delete admin branch protection
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
     */
    reposDeleteAdminBranchProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/enforce_admins\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposGetPullRequestReviewProtection
     * @summary Get pull request review protection
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
     */
    reposGetPullRequestReviewProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<ProtectedBranchPullRequestReview, any>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/required_pull_request_reviews\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled. **Note**: Passing new arrays of \`users\` and \`teams\` replaces their previous values.
     *
     * @tags repos
     * @name ReposUpdatePullRequestReviewProtection
     * @summary Update pull request review protection
     * @request PATCH:/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
     */
    reposUpdatePullRequestReviewProtection: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** Set to \`true\` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
        dismiss_stale_reviews?: boolean;
        /** Specify which users and teams can dismiss pull request reviews. Pass an empty \`dismissal_restrictions\` object to disable. User and team \`dismissal_restrictions\` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
        dismissal_restrictions?: {
          /** The list of team \`slug\`s with dismissal access */
          teams?: string[];
          /** The list of user \`login\`s with dismissal access */
          users?: string[];
        };
        /** Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed. */
        require_code_owner_reviews?: boolean;
        /** Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6. */
        required_approving_review_count?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ProtectedBranchPullRequestReview, ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/required_pull_request_reviews\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposDeletePullRequestReviewProtection
     * @summary Delete pull request review protection
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
     */
    reposDeletePullRequestReviewProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/required_pull_request_reviews\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of \`true\` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help. **Note**: You must enable branch protection to require signed commits.
     *
     * @tags repos
     * @name ReposGetCommitSignatureProtection
     * @summary Get commit signature protection
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
     */
    reposGetCommitSignatureProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<ProtectedBranchAdminEnforced, BasicError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/required_signatures\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
     *
     * @tags repos
     * @name ReposCreateCommitSignatureProtection
     * @summary Create commit signature protection
     * @request POST:/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
     */
    reposCreateCommitSignatureProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<ProtectedBranchAdminEnforced, BasicError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/required_signatures\`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
     *
     * @tags repos
     * @name ReposDeleteCommitSignatureProtection
     * @summary Delete commit signature protection
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
     */
    reposDeleteCommitSignatureProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/required_signatures\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposGetStatusChecksProtection
     * @summary Get status checks protection
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
     */
    reposGetStatusChecksProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<StatusCheckPolicy, BasicError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/required_status_checks\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
     *
     * @tags repos
     * @name ReposUpdateStatusCheckProtection
     * @summary Update status check protection
     * @request PATCH:/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
     */
    reposUpdateStatusCheckProtection: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** The list of status checks to require in order to merge into this branch */
        contexts?: string[];
        /** Require branches to be up to date before merging. */
        strict?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<StatusCheckPolicy, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/required_status_checks\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposRemoveStatusCheckProtection
     * @summary Remove status check protection
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
     */
    reposRemoveStatusCheckProtection: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/required_status_checks\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposGetAllStatusCheckContexts
     * @summary Get all status check contexts
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     */
    reposGetAllStatusCheckContexts: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<string[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/required_status_checks/contexts\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposAddStatusCheckContexts
     * @summary Add status check contexts
     * @request POST:/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     */
    reposAddStatusCheckContexts: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** contexts parameter */
        contexts: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<string[], BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/required_status_checks/contexts\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposSetStatusCheckContexts
     * @summary Set status check contexts
     * @request PUT:/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     */
    reposSetStatusCheckContexts: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** contexts parameter */
        contexts: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<string[], BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/required_status_checks/contexts\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags repos
     * @name ReposRemoveStatusCheckContexts
     * @summary Remove status check contexts
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
     */
    reposRemoveStatusCheckContexts: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** contexts parameter */
        contexts: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<string[], BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/required_status_checks/contexts\`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Lists who has access to this protected branch. **Note**: Users, apps, and teams \`restrictions\` are only available for organization-owned repositories.
     *
     * @tags repos
     * @name ReposGetAccessRestrictions
     * @summary Get access restrictions
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions
     */
    reposGetAccessRestrictions: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<BranchRestrictionPolicy, BasicError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/restrictions\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Disables the ability to restrict who can push to this branch.
     *
     * @tags repos
     * @name ReposDeleteAccessRestrictions
     * @summary Delete access restrictions
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions
     */
    reposDeleteAccessRestrictions: (owner: string, repo: string, branch: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/restrictions\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with \`write\` access to the \`contents\` permission can be added as authorized actors on a protected branch.
     *
     * @tags repos
     * @name ReposGetAppsWithAccessToProtectedBranch
     * @summary Get apps with access to the protected branch
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     */
    reposGetAppsWithAccessToProtectedBranch: (
      owner: string,
      repo: string,
      branch: string,
      params: RequestParams = {},
    ) =>
      this.request<Integration[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/restrictions/apps\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Grants the specified apps push access for this branch. Only installed GitHub Apps with \`write\` access to the \`contents\` permission can be added as authorized actors on a protected branch. | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | \`array\` | The GitHub Apps that have push access to this branch. Use the app's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     *
     * @tags repos
     * @name ReposAddAppAccessRestrictions
     * @summary Add app access restrictions
     * @request POST:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     */
    reposAddAppAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** apps parameter */
        apps: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Integration[], ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/restrictions/apps\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with \`write\` access to the \`contents\` permission can be added as authorized actors on a protected branch. | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | \`array\` | The GitHub Apps that have push access to this branch. Use the app's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     *
     * @tags repos
     * @name ReposSetAppAccessRestrictions
     * @summary Set app access restrictions
     * @request PUT:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     */
    reposSetAppAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** apps parameter */
        apps: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Integration[], ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/restrictions/apps\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Removes the ability of an app to push to this branch. Only installed GitHub Apps with \`write\` access to the \`contents\` permission can be added as authorized actors on a protected branch. | Type    | Description                                                                                                                                                | | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | | \`array\` | The GitHub Apps that have push access to this branch. Use the app's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     *
     * @tags repos
     * @name ReposRemoveAppAccessRestrictions
     * @summary Remove app access restrictions
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
     */
    reposRemoveAppAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** apps parameter */
        apps: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Integration[], ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/restrictions/apps\`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Lists the teams who have push access to this branch. The list includes child teams.
     *
     * @tags repos
     * @name ReposGetTeamsWithAccessToProtectedBranch
     * @summary Get teams with access to the protected branch
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     */
    reposGetTeamsWithAccessToProtectedBranch: (
      owner: string,
      repo: string,
      branch: string,
      params: RequestParams = {},
    ) =>
      this.request<Team[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/restrictions/teams\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Grants the specified teams push access for this branch. You can also give push access to child teams. | Type    | Description                                                                                                                                | | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ | | \`array\` | The teams that can have push access. Use the team's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     *
     * @tags repos
     * @name ReposAddTeamAccessRestrictions
     * @summary Add team access restrictions
     * @request POST:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     */
    reposAddTeamAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** teams parameter */
        teams: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Team[], ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/restrictions/teams\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams. | Type    | Description                                                                                                                                | | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ | | \`array\` | The teams that can have push access. Use the team's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     *
     * @tags repos
     * @name ReposSetTeamAccessRestrictions
     * @summary Set team access restrictions
     * @request PUT:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     */
    reposSetTeamAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** teams parameter */
        teams: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Team[], ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/restrictions/teams\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Removes the ability of a team to push to this branch. You can also remove push access for child teams. | Type    | Description                                                                                                                                         | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- | | \`array\` | Teams that should no longer have push access. Use the team's \`slug\`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     *
     * @tags repos
     * @name ReposRemoveTeamAccessRestrictions
     * @summary Remove team access restrictions
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
     */
    reposRemoveTeamAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** teams parameter */
        teams: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Team[], ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/restrictions/teams\`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Lists the people who have push access to this branch.
     *
     * @tags repos
     * @name ReposGetUsersWithAccessToProtectedBranch
     * @summary Get users with access to the protected branch
     * @request GET:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     */
    reposGetUsersWithAccessToProtectedBranch: (
      owner: string,
      repo: string,
      branch: string,
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/restrictions/users\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Grants the specified people push access for this branch. | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | \`array\` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     *
     * @tags repos
     * @name ReposAddUserAccessRestrictions
     * @summary Add user access restrictions
     * @request POST:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     */
    reposAddUserAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** users parameter */
        users: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/restrictions/users\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people. | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | \`array\` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     *
     * @tags repos
     * @name ReposSetUserAccessRestrictions
     * @summary Set user access restrictions
     * @request PUT:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     */
    reposSetUserAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** users parameter */
        users: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/restrictions/users\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Removes the ability of a user to push to this branch. | Type    | Description                                                                                                                                   | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- | | \`array\` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     *
     * @tags repos
     * @name ReposRemoveUserAccessRestrictions
     * @summary Remove user access restrictions
     * @request DELETE:/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
     */
    reposRemoveUserAccessRestrictions: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** users parameter */
        users: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/protection/restrictions/users\`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Renames a branch in a repository. **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)". The permissions required to use this endpoint depends on whether you are renaming the default branch. To rename a non-default branch: * Users must have push access. * GitHub Apps must have the \`contents:write\` repository permission. To rename the default branch: * Users must have admin or owner permissions. * GitHub Apps must have the \`administration:write\` repository permission.
     *
     * @tags repos
     * @name ReposRenameBranch
     * @summary Rename a branch
     * @request POST:/repos/{owner}/{repo}/branches/{branch}/rename
     */
    reposRenameBranch: (
      owner: string,
      repo: string,
      branch: string,
      data: {
        /** The new name of the branch. */
        new_name: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<BranchWithProtection, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/branches/\${branch}/rename\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array. Creates a new check run for a specific commit in a repository. Your GitHub App must have the \`checks:write\` permission to create check runs. In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
     *
     * @tags checks
     * @name ChecksCreate
     * @summary Create a check run
     * @request POST:/repos/{owner}/{repo}/check-runs
     */
    checksCreate: (
      owner: string,
      repo: string,
      data: (
        | {
            status?: "completed";
            [key: string]: any;
          }
        | {
            status?: "queued" | "in_progress";
            [key: string]: any;
          }
      ) & {
        /**
         * Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [\`check_run.requested_action\` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a \`label\`, \`identifier\` and \`description\`. A maximum of three actions are accepted. See the [\`actions\` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)." To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."
         * @maxItems 3
         */
        actions?: {
          /**
           * A short explanation of what this action would do. The maximum size is 40 characters.
           * @maxLength 40
           */
          description: string;
          /**
           * A reference for the action on the integrator's system. The maximum size is 20 characters.
           * @maxLength 20
           */
          identifier: string;
          /**
           * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
           * @maxLength 20
           */
          label: string;
        }[];
        /** The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        completed_at?: string;
        /**
         * **Required if you provide \`completed_at\` or a \`status\` of \`completed\`**. The final conclusion of the check. Can be one of \`success\`, \`failure\`, \`neutral\`, \`cancelled\`, \`skipped\`, \`timed_out\`, or \`action_required\`. When the conclusion is \`action_required\`, additional details should be provided on the site specified by \`details_url\`.
         * **Note:** Providing \`conclusion\` will automatically set the \`status\` parameter to \`completed\`. Only GitHub can change a check run conclusion to \`stale\`.
         */
        conclusion?: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required";
        /** The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used. */
        details_url?: string;
        /** A reference for the run on the integrator's system. */
        external_id?: string;
        /** The SHA of the commit. */
        head_sha: string;
        /** The name of the check. For example, "code-coverage". */
        name: string;
        /** Check runs can accept a variety of data in the \`output\` object, including a \`title\` and \`summary\` and can optionally provide descriptive details about the run. See the [\`output\` object](https://docs.github.com/rest/reference/checks#output-object) description. */
        output?: {
          /**
           * Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see "[About status checks](https://help.github.com/articles/about-status-checks#checks)". See the [\`annotations\` object](https://docs.github.com/rest/reference/checks#annotations-object) description for details about how to use this parameter.
           * @maxItems 50
           */
          annotations?: {
            /** The level of the annotation. Can be one of \`notice\`, \`warning\`, or \`failure\`. */
            annotation_level: "notice" | "warning" | "failure";
            /** The end column of the annotation. Annotations only support \`start_column\` and \`end_column\` on the same line. Omit this parameter if \`start_line\` and \`end_line\` have different values. */
            end_column?: number;
            /** The end line of the annotation. */
            end_line: number;
            /** A short description of the feedback for these lines of code. The maximum size is 64 KB. */
            message: string;
            /** The path of the file to add an annotation to. For example, \`assets/css/main.css\`. */
            path: string;
            /** Details about this annotation. The maximum size is 64 KB. */
            raw_details?: string;
            /** The start column of the annotation. Annotations only support \`start_column\` and \`end_column\` on the same line. Omit this parameter if \`start_line\` and \`end_line\` have different values. */
            start_column?: number;
            /** The start line of the annotation. */
            start_line: number;
            /** The title that represents the annotation. The maximum size is 255 characters. */
            title?: string;
          }[];
          /** Adds images to the output displayed in the GitHub pull request UI. See the [\`images\` object](https://docs.github.com/rest/reference/checks#images-object) description for details. */
          images?: {
            /** The alternative text for the image. */
            alt: string;
            /** A short image description. */
            caption?: string;
            /** The full URL of the image. */
            image_url: string;
          }[];
          /**
           * The summary of the check run. This parameter supports Markdown.
           * @maxLength 65535
           */
          summary: string;
          /**
           * The details of the check run. This parameter supports Markdown.
           * @maxLength 65535
           */
          text?: string;
          /** The title of the check run. */
          title: string;
        };
        /** The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        started_at?: string;
        /**
         * The current status. Can be one of \`queued\`, \`in_progress\`, or \`completed\`.
         * @default "queued"
         */
        status?: "queued" | "in_progress" | "completed";
      },
      params: RequestParams = {},
    ) =>
      this.request<CheckRun, any>({
        path: \`/repos/\${owner}/\${repo}/check-runs\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array. Gets a single check run using its \`id\`. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the \`repo\` scope to get check runs in a private repository.
     *
     * @tags checks
     * @name ChecksGet
     * @summary Get a check run
     * @request GET:/repos/{owner}/{repo}/check-runs/{check_run_id}
     */
    checksGet: (owner: string, repo: string, checkRunId: number, params: RequestParams = {}) =>
      this.request<CheckRun, any>({
        path: \`/repos/\${owner}/\${repo}/check-runs/\${checkRunId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array. Updates a check run for a specific commit in a repository. Your GitHub App must have the \`checks:write\` permission to edit check runs.
     *
     * @tags checks
     * @name ChecksUpdate
     * @summary Update a check run
     * @request PATCH:/repos/{owner}/{repo}/check-runs/{check_run_id}
     */
    checksUpdate: (
      owner: string,
      repo: string,
      checkRunId: number,
      data: (
        | {
            status?: "completed";
            [key: string]: any;
          }
        | {
            status?: "queued" | "in_progress";
            [key: string]: any;
          }
      ) & {
        /**
         * Possible further actions the integrator can perform, which a user may trigger. Each action includes a \`label\`, \`identifier\` and \`description\`. A maximum of three actions are accepted. See the [\`actions\` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."
         * @maxItems 3
         */
        actions?: {
          /**
           * A short explanation of what this action would do. The maximum size is 40 characters.
           * @maxLength 40
           */
          description: string;
          /**
           * A reference for the action on the integrator's system. The maximum size is 20 characters.
           * @maxLength 20
           */
          identifier: string;
          /**
           * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
           * @maxLength 20
           */
          label: string;
        }[];
        /** The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        completed_at?: string;
        /**
         * **Required if you provide \`completed_at\` or a \`status\` of \`completed\`**. The final conclusion of the check. Can be one of \`success\`, \`failure\`, \`neutral\`, \`cancelled\`, \`skipped\`, \`timed_out\`, or \`action_required\`.
         * **Note:** Providing \`conclusion\` will automatically set the \`status\` parameter to \`completed\`. Only GitHub can change a check run conclusion to \`stale\`.
         */
        conclusion?: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required";
        /** The URL of the integrator's site that has the full details of the check. */
        details_url?: string;
        /** A reference for the run on the integrator's system. */
        external_id?: string;
        /** The name of the check. For example, "code-coverage". */
        name?: string;
        /** Check runs can accept a variety of data in the \`output\` object, including a \`title\` and \`summary\` and can optionally provide descriptive details about the run. See the [\`output\` object](https://docs.github.com/rest/reference/checks#output-object-1) description. */
        output?: {
          /**
           * Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see "[About status checks](https://help.github.com/articles/about-status-checks#checks)". See the [\`annotations\` object](https://docs.github.com/rest/reference/checks#annotations-object-1) description for details.
           * @maxItems 50
           */
          annotations?: {
            /** The level of the annotation. Can be one of \`notice\`, \`warning\`, or \`failure\`. */
            annotation_level: "notice" | "warning" | "failure";
            /** The end column of the annotation. Annotations only support \`start_column\` and \`end_column\` on the same line. Omit this parameter if \`start_line\` and \`end_line\` have different values. */
            end_column?: number;
            /** The end line of the annotation. */
            end_line: number;
            /** A short description of the feedback for these lines of code. The maximum size is 64 KB. */
            message: string;
            /** The path of the file to add an annotation to. For example, \`assets/css/main.css\`. */
            path: string;
            /** Details about this annotation. The maximum size is 64 KB. */
            raw_details?: string;
            /** The start column of the annotation. Annotations only support \`start_column\` and \`end_column\` on the same line. Omit this parameter if \`start_line\` and \`end_line\` have different values. */
            start_column?: number;
            /** The start line of the annotation. */
            start_line: number;
            /** The title that represents the annotation. The maximum size is 255 characters. */
            title?: string;
          }[];
          /** Adds images to the output displayed in the GitHub pull request UI. See the [\`images\` object](https://docs.github.com/rest/reference/checks#annotations-object-1) description for details. */
          images?: {
            /** The alternative text for the image. */
            alt: string;
            /** A short image description. */
            caption?: string;
            /** The full URL of the image. */
            image_url: string;
          }[];
          /**
           * Can contain Markdown.
           * @maxLength 65535
           */
          summary: string;
          /**
           * Can contain Markdown.
           * @maxLength 65535
           */
          text?: string;
          /** **Required**. */
          title?: string;
        };
        /** This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        started_at?: string;
        /** The current status. Can be one of \`queued\`, \`in_progress\`, or \`completed\`. */
        status?: "queued" | "in_progress" | "completed";
      },
      params: RequestParams = {},
    ) =>
      this.request<CheckRun, any>({
        path: \`/repos/\${owner}/\${repo}/check-runs/\${checkRunId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists annotations for a check run using the annotation \`id\`. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the \`repo\` scope to get annotations for a check run in a private repository.
     *
     * @tags checks
     * @name ChecksListAnnotations
     * @summary List check run annotations
     * @request GET:/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations
     */
    checksListAnnotations: (
      owner: string,
      repo: string,
      checkRunId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<CheckAnnotation[], any>({
        path: \`/repos/\${owner}/\${repo}/check-runs/\${checkRunId}/annotations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array and a \`null\` value for \`head_branch\`. By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the \`checks:write\` permission to create check suites.
     *
     * @tags checks
     * @name ChecksCreateSuite
     * @summary Create a check suite
     * @request POST:/repos/{owner}/{repo}/check-suites
     */
    checksCreateSuite: (
      owner: string,
      repo: string,
      data: {
        /** The sha of the head commit. */
        head_sha: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<CheckSuite, any>({
        path: \`/repos/\${owner}/\${repo}/check-suites\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
     *
     * @tags checks
     * @name ChecksSetSuitesPreferences
     * @summary Update repository preferences for check suites
     * @request PATCH:/repos/{owner}/{repo}/check-suites/preferences
     */
    checksSetSuitesPreferences: (
      owner: string,
      repo: string,
      data: {
        /** Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [\`auto_trigger_checks\` object](https://docs.github.com/rest/reference/checks#auto_trigger_checks-object) description for details. */
        auto_trigger_checks?: {
          /** The \`id\` of the GitHub App. */
          app_id: number;
          /**
           * Set to \`true\` to enable automatic creation of CheckSuite events upon pushes to the repository, or \`false\` to disable them.
           * @default true
           */
          setting: boolean;
        }[];
      },
      params: RequestParams = {},
    ) =>
      this.request<CheckSuitePreference, any>({
        path: \`/repos/\${owner}/\${repo}/check-suites/preferences\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array and a \`null\` value for \`head_branch\`. Gets a single check suite using its \`id\`. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the \`repo\` scope to get check suites in a private repository.
     *
     * @tags checks
     * @name ChecksGetSuite
     * @summary Get a check suite
     * @request GET:/repos/{owner}/{repo}/check-suites/{check_suite_id}
     */
    checksGetSuite: (owner: string, repo: string, checkSuiteId: number, params: RequestParams = {}) =>
      this.request<CheckSuite, any>({
        path: \`/repos/\${owner}/\${repo}/check-suites/\${checkSuiteId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array. Lists check runs for a check suite using its \`id\`. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the \`repo\` scope to get check runs in a private repository.
     *
     * @tags checks
     * @name ChecksListForSuite
     * @summary List check runs in a check suite
     * @request GET:/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs
     */
    checksListForSuite: (
      owner: string,
      repo: string,
      checkSuiteId: number,
      query?: {
        /** Returns check runs with the specified \`name\`. */
        check_name?: string;
        /**
         * Filters check runs by their \`completed_at\` timestamp. Can be one of \`latest\` (returning the most recent check runs) or \`all\`.
         * @default "latest"
         */
        filter?: "latest" | "all";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Returns check runs with the specified \`status\`. Can be one of \`queued\`, \`in_progress\`, or \`completed\`. */
        status?: "queued" | "in_progress" | "completed";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          check_runs: CheckRun[];
          total_count: number;
        },
        any
      >({
        path: \`/repos/\${owner}/\${repo}/check-suites/\${checkSuiteId}/check-runs\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [\`check_suite\` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action \`rerequested\`. When a check suite is \`rerequested\`, its \`status\` is reset to \`queued\` and the \`conclusion\` is cleared. To rerequest a check suite, your GitHub App must have the \`checks:read\` permission on a private repository or pull access to a public repository.
     *
     * @tags checks
     * @name ChecksRerequestSuite
     * @summary Rerequest a check suite
     * @request POST:/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest
     */
    checksRerequestSuite: (owner: string, repo: string, checkSuiteId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/check-suites/\${checkSuiteId}/rerequest\`,
        method: "POST",
        ...params,
      }),

    /**
     * @description Lists all open code scanning alerts for the default branch (usually \`main\` or \`master\`). You must use an access token with the \`security_events\` scope to use this endpoint. GitHub Apps must have the \`security_events\` read permission to use this endpoint.
     *
     * @tags code-scanning
     * @name CodeScanningListAlertsForRepo
     * @summary List code scanning alerts for a repository
     * @request GET:/repos/{owner}/{repo}/code-scanning/alerts
     */
    codeScanningListAlertsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /** Set a full Git reference to list alerts for a specific branch. The \`ref\` must be formatted as \`refs/heads/<branch name>\`. */
        ref?: CodeScanningAlertRef;
        /** Set to \`open\`, \`fixed\`, or \`dismissed\` to list code scanning alerts in a specific state. */
        state?: CodeScanningAlertState;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        CodeScanningAlertCodeScanningAlertItems[],
        void | {
          code?: string;
          documentation_url?: string;
          message?: string;
        }
      >({
        path: \`/repos/\${owner}/\${repo}/code-scanning/alerts\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single code scanning alert. You must use an access token with the \`security_events\` scope to use this endpoint. GitHub Apps must have the \`security_events\` read permission to use this endpoint. The security \`alert_number\` is found at the end of the security alert's URL. For example, the security alert ID for \`https://github.com/Octo-org/octo-repo/security/code-scanning/88\` is \`88\`.
     *
     * @tags code-scanning
     * @name CodeScanningGetAlert
     * @summary Get a code scanning alert
     * @request GET:/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
     */
    codeScanningGetAlert: (owner: string, repo: string, alertNumber: number, params: RequestParams = {}) =>
      this.request<
        CodeScanningAlertCodeScanningAlert,
        | void
        | BasicError
        | {
            code?: string;
            documentation_url?: string;
            message?: string;
          }
      >({
        path: \`/repos/\${owner}/\${repo}/code-scanning/alerts/\${alertNumber}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the status of a single code scanning alert. You must use an access token with the \`security_events\` scope to use this endpoint. GitHub Apps must have the \`security_events\` write permission to use this endpoint.
     *
     * @tags code-scanning
     * @name CodeScanningUpdateAlert
     * @summary Update a code scanning alert
     * @request PATCH:/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
     */
    codeScanningUpdateAlert: (
      owner: string,
      repo: string,
      alertNumber: AlertNumber,
      data: {
        /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: \`false positive\`, \`won't fix\`, and \`used in tests\`. */
        dismissed_reason?: CodeScanningAlertDismissedReason;
        /** Sets the state of the code scanning alert. Can be one of \`open\` or \`dismissed\`. You must provide \`dismissed_reason\` when you set the state to \`dismissed\`. */
        state: CodeScanningAlertSetState;
      },
      params: RequestParams = {},
    ) =>
      this.request<CodeScanningAlertCodeScanningAlert, void>({
        path: \`/repos/\${owner}/\${repo}/code-scanning/alerts/\${alertNumber}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description List the details of recent code scanning analyses for a repository. You must use an access token with the \`security_events\` scope to use this endpoint. GitHub Apps must have the \`security_events\` read permission to use this endpoint.
     *
     * @tags code-scanning
     * @name CodeScanningListRecentAnalyses
     * @summary List recent code scanning analyses for a repository
     * @request GET:/repos/{owner}/{repo}/code-scanning/analyses
     */
    codeScanningListRecentAnalyses: (
      owner: string,
      repo: string,
      query?: {
        /** Set a full Git reference to list alerts for a specific branch. The \`ref\` must be formatted as \`refs/heads/<branch name>\`. */
        ref?: CodeScanningAnalysisRef;
        /** Set a single code scanning tool name to filter alerts by tool. */
        tool_name?: CodeScanningAnalysisToolName;
      },
      params: RequestParams = {},
    ) =>
      this.request<CodeScanningAnalysisCodeScanningAnalysis[], void>({
        path: \`/repos/\${owner}/\${repo}/code-scanning/analyses\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Upload a SARIF file containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the \`security_events\` scope to use this endpoint. GitHub Apps must have the \`security_events\` write permission to use this endpoint.
     *
     * @tags code-scanning
     * @name CodeScanningUploadSarif
     * @summary Upload a SARIF file
     * @request POST:/repos/{owner}/{repo}/code-scanning/sarifs
     */
    codeScanningUploadSarif: (
      owner: string,
      repo: string,
      data: {
        /**
         * The base directory used in the analysis, as it appears in the SARIF file.
         * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
         * @format uri
         * @example "file:///github/workspace/"
         */
        checkout_uri?: string;
        /** The commit SHA of the code scanning analysis file. */
        commit_sha: CodeScanningAnalysisCommitSha;
        /** The full Git reference of the code scanning analysis file, formatted as \`refs/heads/<branch name>\`. */
        ref: CodeScanningAnalysisRef;
        /** A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [\`gzip\`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. */
        sarif: CodeScanningAnalysisSarifFile;
        /**
         * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`.
         * @format date
         */
        started_at?: string;
        /** The name of the tool used to generate the code scanning analysis alert. */
        tool_name: CodeScanningAnalysisToolName;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, void>({
        path: \`/repos/\${owner}/\${repo}/code-scanning/sarifs\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. Team members will include the members of child teams.
     *
     * @tags repos
     * @name ReposListCollaborators
     * @summary List repository collaborators
     * @request GET:/repos/{owner}/{repo}/collaborators
     */
    reposListCollaborators: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Filter collaborators returned by their affiliation. Can be one of:
         * \\* \`outside\`: All outside collaborators of an organization-owned repository.
         * \\* \`direct\`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.
         * \\* \`all\`: All collaborators the authenticated user can see.
         * @default "all"
         */
        affiliation?: "outside" | "direct" | "all";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Collaborator[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/collaborators\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. Team members will include the members of child teams.
     *
     * @tags repos
     * @name ReposCheckCollaborator
     * @summary Check if a user is a repository collaborator
     * @request GET:/repos/{owner}/{repo}/collaborators/{username}
     */
    reposCheckCollaborator: (owner: string, repo: string, username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: \`/repos/\${owner}/\${repo}/collaborators/\${username}\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details. For more information the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)." The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations). **Rate limits** To prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
     *
     * @tags repos
     * @name ReposAddCollaborator
     * @summary Add a repository collaborator
     * @request PUT:/repos/{owner}/{repo}/collaborators/{username}
     */
    reposAddCollaborator: (
      owner: string,
      repo: string,
      username: string,
      data: {
        /**
         * The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:
         * \\* \`pull\` - can pull, but not push to or administer this repository.
         * \\* \`push\` - can pull and push, but not administer this repository.
         * \\* \`admin\` - can pull, push and administer this repository.
         * \\* \`maintain\` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
         * \\* \`triage\` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
         * @default "push"
         */
        permission?: "pull" | "push" | "admin" | "maintain" | "triage";
        /** @example ""push"" */
        permissions?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryInvitation, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/collaborators/\${username}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposRemoveCollaborator
     * @summary Remove a repository collaborator
     * @request DELETE:/repos/{owner}/{repo}/collaborators/{username}
     */
    reposRemoveCollaborator: (owner: string, repo: string, username: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/collaborators/\${username}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Checks the repository permission of a collaborator. The possible repository permissions are \`admin\`, \`write\`, \`read\`, and \`none\`.
     *
     * @tags repos
     * @name ReposGetCollaboratorPermissionLevel
     * @summary Get repository permissions for a user
     * @request GET:/repos/{owner}/{repo}/collaborators/{username}/permission
     */
    reposGetCollaboratorPermissionLevel: (owner: string, repo: string, username: string, params: RequestParams = {}) =>
      this.request<RepositoryCollaboratorPermission, BasicError>({
        path: \`/repos/\${owner}/\${repo}/collaborators/\${username}/permission\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/). Comments are ordered by ascending ID.
     *
     * @tags repos
     * @name ReposListCommitCommentsForRepo
     * @summary List commit comments for a repository
     * @request GET:/repos/{owner}/{repo}/comments
     */
    reposListCommitCommentsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<CommitComment[], any>({
        path: \`/repos/\${owner}/\${repo}/comments\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposGetCommitComment
     * @summary Get a commit comment
     * @request GET:/repos/{owner}/{repo}/comments/{comment_id}
     */
    reposGetCommitComment: (owner: string, repo: string, commentId: number, params: RequestParams = {}) =>
      this.request<CommitComment, BasicError>({
        path: \`/repos/\${owner}/\${repo}/comments/\${commentId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposUpdateCommitComment
     * @summary Update a commit comment
     * @request PATCH:/repos/{owner}/{repo}/comments/{comment_id}
     */
    reposUpdateCommitComment: (
      owner: string,
      repo: string,
      commentId: number,
      data: {
        /** The contents of the comment */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<CommitComment, BasicError>({
        path: \`/repos/\${owner}/\${repo}/comments/\${commentId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposDeleteCommitComment
     * @summary Delete a commit comment
     * @request DELETE:/repos/{owner}/{repo}/comments/{comment_id}
     */
    reposDeleteCommitComment: (owner: string, repo: string, commentId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/repos/\${owner}/\${repo}/comments/\${commentId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
     *
     * @tags reactions
     * @name ReactionsListForCommitComment
     * @summary List reactions for a commit comment
     * @request GET:/repos/{owner}/{repo}/comments/{comment_id}/reactions
     */
    reactionsListForCommitComment: (
      owner: string,
      repo: string,
      commentId: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Reaction[],
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/repos/\${owner}/\${repo}/comments/\${commentId}/reactions\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with a \`Status: 200 OK\` means that you already added the reaction type to this commit comment.
     *
     * @tags reactions
     * @name ReactionsCreateForCommitComment
     * @summary Create reaction for a commit comment
     * @request POST:/repos/{owner}/{repo}/comments/{comment_id}/reactions
     */
    reactionsCreateForCommitComment: (
      owner: string,
      repo: string,
      commentId: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Reaction,
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/repos/\${owner}/\${repo}/comments/\${commentId}/reactions\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** You can also specify a repository by \`repository_id\` using the route \`DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id\`. Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
     *
     * @tags reactions
     * @name ReactionsDeleteForCommitComment
     * @summary Delete a commit comment reaction
     * @request DELETE:/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}
     */
    reactionsDeleteForCommitComment: (
      owner: string,
      repo: string,
      commentId: number,
      reactionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/comments/\${commentId}/reactions/\${reactionId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description **Signature verification object** The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object: | Name | Type | Description | | ---- | ---- | ----------- | | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. | | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | \`signature\` | \`string\` | The signature that was extracted from the commit. | | \`payload\` | \`string\` | The value that was signed. | These are the possible values for \`reason\` in the \`verification\` object: | Value | Description | | ----- | ----------- | | \`expired_key\` | The key that made the signature is expired. | | \`not_signing_key\` | The "signing" flag is not among the usage flags in the GPG key that made the signature. | | \`gpgverify_error\` | There was an error communicating with the signature verification service. | | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. | | \`unsigned\` | The object does not include a signature. | | \`unknown_signature_type\` | A non-PGP signature was found in the commit. | | \`no_user\` | No user was associated with the \`committer\` email address in the commit. | | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. | | \`unknown_key\` | The key that made the signature has not been registered with any user's account. | | \`malformed_signature\` | There was an error parsing the signature. | | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @tags repos
     * @name ReposListCommits
     * @summary List commits
     * @request GET:/repos/{owner}/{repo}/commits
     */
    reposListCommits: (
      owner: string,
      repo: string,
      query?: {
        /** GitHub login or email address by which to filter by commit author. */
        author?: string;
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /** Only commits containing this file path will be returned. */
        path?: string;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** SHA or branch to start listing commits from. Default: the repository’s default branch (usually \`master\`). */
        sha?: string;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
        /** Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        until?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Commit[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/commits\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
     *
     * @tags repos
     * @name ReposListBranchesForHeadCommit
     * @summary List branches for HEAD commit
     * @request GET:/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head
     */
    reposListBranchesForHeadCommit: (owner: string, repo: string, commitSha: string, params: RequestParams = {}) =>
      this.request<
        BranchShort[],
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/repos/\${owner}/\${repo}/commits/\${commitSha}/branches-where-head\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Use the \`:commit_sha\` to specify the commit that will have its comments listed.
     *
     * @tags repos
     * @name ReposListCommentsForCommit
     * @summary List commit comments
     * @request GET:/repos/{owner}/{repo}/commits/{commit_sha}/comments
     */
    reposListCommentsForCommit: (
      owner: string,
      repo: string,
      commitSha: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<CommitComment[], any>({
        path: \`/repos/\${owner}/\${repo}/commits/\${commitSha}/comments\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a comment for a commit using its \`:commit_sha\`. This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     *
     * @tags repos
     * @name ReposCreateCommitComment
     * @summary Create a commit comment
     * @request POST:/repos/{owner}/{repo}/commits/{commit_sha}/comments
     */
    reposCreateCommitComment: (
      owner: string,
      repo: string,
      commitSha: string,
      data: {
        /** The contents of the comment. */
        body: string;
        /** **Deprecated**. Use **position** parameter instead. Line number in the file to comment on. */
        line?: number;
        /** Relative path of the file to comment on. */
        path?: string;
        /** Line index in the diff to comment on. */
        position?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<CommitComment, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/commits/\${commitSha}/comments\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint.
     *
     * @tags repos
     * @name ReposListPullRequestsAssociatedWithCommit
     * @summary List pull requests associated with a commit
     * @request GET:/repos/{owner}/{repo}/commits/{commit_sha}/pulls
     */
    reposListPullRequestsAssociatedWithCommit: (
      owner: string,
      repo: string,
      commitSha: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        PullRequestSimple[],
        {
          documentation_url: string;
          message: string;
        }
      >({
        path: \`/repos/\${owner}/\${repo}/commits/\${commitSha}/pulls\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns the contents of a single commit reference. You must have \`read\` access for the repository to use this endpoint. **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch \`diff\` and \`patch\` formats. Diffs with binary data will have no \`patch\` property. To return only the SHA-1 hash of the commit reference, you can provide the \`sha\` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the \`Accept\` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag. **Signature verification object** The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object: | Name | Type | Description | | ---- | ---- | ----------- | | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. | | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | \`signature\` | \`string\` | The signature that was extracted from the commit. | | \`payload\` | \`string\` | The value that was signed. | These are the possible values for \`reason\` in the \`verification\` object: | Value | Description | | ----- | ----------- | | \`expired_key\` | The key that made the signature is expired. | | \`not_signing_key\` | The "signing" flag is not among the usage flags in the GPG key that made the signature. | | \`gpgverify_error\` | There was an error communicating with the signature verification service. | | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. | | \`unsigned\` | The object does not include a signature. | | \`unknown_signature_type\` | A non-PGP signature was found in the commit. | | \`no_user\` | No user was associated with the \`committer\` email address in the commit. | | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. | | \`unknown_key\` | The key that made the signature has not been registered with any user's account. | | \`malformed_signature\` | There was an error parsing the signature. | | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @tags repos
     * @name ReposGetCommit
     * @summary Get a commit
     * @request GET:/repos/{owner}/{repo}/commits/{ref}
     */
    reposGetCommit: (owner: string, repo: string, ref: string, params: RequestParams = {}) =>
      this.request<Commit, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/commits/\${ref}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array. Lists check runs for a commit ref. The \`ref\` can be a SHA, branch name, or a tag name. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the \`repo\` scope to get check runs in a private repository.
     *
     * @tags checks
     * @name ChecksListForRef
     * @summary List check runs for a Git reference
     * @request GET:/repos/{owner}/{repo}/commits/{ref}/check-runs
     */
    checksListForRef: (
      owner: string,
      repo: string,
      ref: string,
      query?: {
        /** Returns check runs with the specified \`name\`. */
        check_name?: string;
        /**
         * Filters check runs by their \`completed_at\` timestamp. Can be one of \`latest\` (returning the most recent check runs) or \`all\`.
         * @default "latest"
         */
        filter?: "latest" | "all";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Returns check runs with the specified \`status\`. Can be one of \`queued\`, \`in_progress\`, or \`completed\`. */
        status?: "queued" | "in_progress" | "completed";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          check_runs: CheckRun[];
          total_count: number;
        },
        any
      >({
        path: \`/repos/\${owner}/\${repo}/commits/\${ref}/check-runs\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty \`pull_requests\` array and a \`null\` value for \`head_branch\`. Lists check suites for a commit \`ref\`. The \`ref\` can be a SHA, branch name, or a tag name. GitHub Apps must have the \`checks:read\` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the \`repo\` scope to get check suites in a private repository.
     *
     * @tags checks
     * @name ChecksListSuitesForRef
     * @summary List check suites for a Git reference
     * @request GET:/repos/{owner}/{repo}/commits/{ref}/check-suites
     */
    checksListSuitesForRef: (
      owner: string,
      repo: string,
      ref: string,
      query?: {
        /**
         * Filters check suites by GitHub App \`id\`.
         * @example 1
         */
        app_id?: number;
        /** Returns check runs with the specified \`name\`. */
        check_name?: string;
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          check_suites: CheckSuite[];
          total_count: number;
        },
        any
      >({
        path: \`/repos/\${owner}/\${repo}/commits/\${ref}/check-suites\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts. Additionally, a combined \`state\` is returned. The \`state\` is one of: *   **failure** if any of the contexts report as \`error\` or \`failure\` *   **pending** if there are no statuses or a context is \`pending\` *   **success** if the latest status for all contexts is \`success\`
     *
     * @tags repos
     * @name ReposGetCombinedStatusForRef
     * @summary Get the combined status for a specific reference
     * @request GET:/repos/{owner}/{repo}/commits/{ref}/status
     */
    reposGetCombinedStatusForRef: (owner: string, repo: string, ref: string, params: RequestParams = {}) =>
      this.request<CombinedCommitStatus, BasicError>({
        path: \`/repos/\${owner}/\${repo}/commits/\${ref}/status\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one. This resource is also available via a legacy route: \`GET /repos/:owner/:repo/statuses/:ref\`.
     *
     * @tags repos
     * @name ReposListCommitStatusesForRef
     * @summary List commit statuses for a reference
     * @request GET:/repos/{owner}/{repo}/commits/{ref}/statuses
     */
    reposListCommitStatusesForRef: (
      owner: string,
      repo: string,
      ref: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Status[], any>({
        path: \`/repos/\${owner}/\${repo}/commits/\${ref}/statuses\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns the contents of the repository's code of conduct file, if one is detected. A code of conduct is detected if there is a file named \`CODE_OF_CONDUCT\` in the root directory of the repository. GitHub detects which code of conduct it is using fuzzy matching.
     *
     * @tags codes-of-conduct
     * @name CodesOfConductGetForRepo
     * @summary Get the code of conduct for a repository
     * @request GET:/repos/{owner}/{repo}/community/code_of_conduct
     */
    codesOfConductGetForRepo: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<CodeOfConduct, any>({
        path: \`/repos/\${owner}/\${repo}/community/code_of_conduct\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description This endpoint will return all community profile metrics, including an overall health score, repository description, the presence of documentation, detected code of conduct, detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE, README, and CONTRIBUTING files. The \`health_percentage\` score is defined as a percentage of how many of these four documents are present: README, CONTRIBUTING, LICENSE, and CODE_OF_CONDUCT. For example, if all four documents are present, then the \`health_percentage\` is \`100\`. If only one is present, then the \`health_percentage\` is \`25\`. \`content_reports_enabled\` is only returned for organization-owned repositories.
     *
     * @tags repos
     * @name ReposGetCommunityProfileMetrics
     * @summary Get community profile metrics
     * @request GET:/repos/{owner}/{repo}/community/profile
     */
    reposGetCommunityProfileMetrics: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<CommunityProfile, any>({
        path: \`/repos/\${owner}/\${repo}/community/profile\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Both \`:base\` and \`:head\` must be branch names in \`:repo\`. To compare branches across other repositories in the same network as \`:repo\`, use the format \`<USERNAME>:branch\`. The response from the API is equivalent to running the \`git log base..head\` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats. The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a \`renamed\` status have a \`previous_filename\` field showing the previous filename of the file, and files with a \`modified\` status have a \`patch\` field showing the changes made to the file. **Working with large comparisons** The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) to enumerate all commits in the range. For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long to generate. You can typically resolve this error by using a smaller commit range. **Signature verification object** The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object: | Name | Type | Description | | ---- | ---- | ----------- | | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. | | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | \`signature\` | \`string\` | The signature that was extracted from the commit. | | \`payload\` | \`string\` | The value that was signed. | These are the possible values for \`reason\` in the \`verification\` object: | Value | Description | | ----- | ----------- | | \`expired_key\` | The key that made the signature is expired. | | \`not_signing_key\` | The "signing" flag is not among the usage flags in the GPG key that made the signature. | | \`gpgverify_error\` | There was an error communicating with the signature verification service. | | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. | | \`unsigned\` | The object does not include a signature. | | \`unknown_signature_type\` | A non-PGP signature was found in the commit. | | \`no_user\` | No user was associated with the \`committer\` email address in the commit. | | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. | | \`unknown_key\` | The key that made the signature has not been registered with any user's account. | | \`malformed_signature\` | There was an error parsing the signature. | | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @tags repos
     * @name ReposCompareCommits
     * @summary Compare two commits
     * @request GET:/repos/{owner}/{repo}/compare/{base}...{head}
     */
    reposCompareCommits: (owner: string, repo: string, base: string, head: string, params: RequestParams = {}) =>
      this.request<CommitComparison, BasicError>({
        path: \`/repos/\${owner}/\${repo}/compare/\${base}...\${head}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the contents of a file or directory in a repository. Specify the file path or directory in \`:path\`. If you omit \`:path\`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories. Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML (when supported). All content types support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent object format. **Note**: *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees). *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees API](https://docs.github.com/rest/reference/git#get-a-tree). *   This API supports files up to 1 megabyte in size. #### If the content is a directory The response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as "submodule". #### If the content is a symlink If the requested \`:path\` points to a symlink, and the symlink's target is a normal file in the repository, then the API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object describing the symlink itself. #### If the content is a submodule The \`submodule_git_url\` identifies the location of the submodule repository, and the \`sha\` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (\`git_url\` and \`_links["git"]\`) and the github.com URLs (\`html_url\` and \`_links["html"]\`) will have null values.
     *
     * @tags repos
     * @name ReposGetContent
     * @summary Get repository content
     * @request GET:/repos/{owner}/{repo}/contents/{path}
     */
    reposGetContent: (
      owner: string,
      repo: string,
      path: string,
      query?: {
        /** The name of the commit/branch/tag. Default: the repository’s default branch (usually \`master\`) */
        ref?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ContentTree, BasicError>({
        path: \`/repos/\${owner}/\${repo}/contents/\${path}\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new file or replaces an existing file in a repository.
     *
     * @tags repos
     * @name ReposCreateOrUpdateFileContents
     * @summary Create or update file contents
     * @request PUT:/repos/{owner}/{repo}/contents/{path}
     */
    reposCreateOrUpdateFileContents: (
      owner: string,
      repo: string,
      path: string,
      data: {
        /** The author of the file. Default: The \`committer\` or the authenticated user if you omit \`committer\`. */
        author?: {
          /** @example ""2013-01-15T17:13:22+05:00"" */
          date?: string;
          /** The email of the author or committer of the commit. You'll receive a \`422\` status code if \`email\` is omitted. */
          email: string;
          /** The name of the author or committer of the commit. You'll receive a \`422\` status code if \`name\` is omitted. */
          name: string;
        };
        /** The branch name. Default: the repository’s default branch (usually \`master\`) */
        branch?: string;
        /** The person that committed the file. Default: the authenticated user. */
        committer?: {
          /** @example ""2013-01-05T13:13:22+05:00"" */
          date?: string;
          /** The email of the author or committer of the commit. You'll receive a \`422\` status code if \`email\` is omitted. */
          email: string;
          /** The name of the author or committer of the commit. You'll receive a \`422\` status code if \`name\` is omitted. */
          name: string;
        };
        /** The new file content, using Base64 encoding. */
        content: string;
        /** The commit message. */
        message: string;
        /** **Required if you are updating a file**. The blob SHA of the file being replaced. */
        sha?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<FileCommit, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/contents/\${path}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a file in a repository. You can provide an additional \`committer\` parameter, which is an object containing information about the committer. Or, you can provide an \`author\` parameter, which is an object containing information about the author. The \`author\` section is optional and is filled in with the \`committer\` information if omitted. If the \`committer\` information is omitted, the authenticated user's information is used. You must provide values for both \`name\` and \`email\`, whether you choose to use \`author\` or \`committer\`. Otherwise, you'll receive a \`422\` status code.
     *
     * @tags repos
     * @name ReposDeleteFile
     * @summary Delete a file
     * @request DELETE:/repos/{owner}/{repo}/contents/{path}
     */
    reposDeleteFile: (
      owner: string,
      repo: string,
      path: string,
      data: {
        /** object containing information about the author. */
        author?: {
          /** The email of the author (or committer) of the commit */
          email?: string;
          /** The name of the author (or committer) of the commit */
          name?: string;
        };
        /** The branch name. Default: the repository’s default branch (usually \`master\`) */
        branch?: string;
        /** object containing information about the committer. */
        committer?: {
          /** The email of the author (or committer) of the commit */
          email?: string;
          /** The name of the author (or committer) of the commit */
          name?: string;
        };
        /** The commit message. */
        message: string;
        /** The blob SHA of the file being replaced. */
        sha: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        FileCommit,
        | BasicError
        | ValidationError
        | {
            code?: string;
            documentation_url?: string;
            message?: string;
          }
      >({
        path: \`/repos/\${owner}/\${repo}/contents/\${path}\`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance. GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
     *
     * @tags repos
     * @name ReposListContributors
     * @summary List repository contributors
     * @request GET:/repos/{owner}/{repo}/contributors
     */
    reposListContributors: (
      owner: string,
      repo: string,
      query?: {
        /** Set to \`1\` or \`true\` to include anonymous contributors in results. */
        anon?: string;
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Contributor[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/contributors\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Simple filtering of deployments is available via query parameters:
     *
     * @tags repos
     * @name ReposListDeployments
     * @summary List deployments
     * @request GET:/repos/{owner}/{repo}/deployments
     */
    reposListDeployments: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The name of the environment that was deployed to (e.g., \`staging\` or \`production\`).
         * @default "none"
         */
        environment?: string;
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * The name of the ref. This can be a branch, tag, or SHA.
         * @default "none"
         */
        ref?: string;
        /**
         * The SHA recorded at creation time.
         * @default "none"
         */
        sha?: string;
        /**
         * The name of the task for the deployment (e.g., \`deploy\` or \`deploy:migrations\`).
         * @default "none"
         */
        task?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Deployment[], any>({
        path: \`/repos/\${owner}/\${repo}/deployments\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Deployments offer a few configurable parameters with certain defaults. The \`ref\` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them before we merge a pull request. The \`environment\` parameter allows deployments to be issued to different runtime environments. Teams often have multiple environments for verifying their applications, such as \`production\`, \`staging\`, and \`qa\`. This parameter makes it easier to track which environments have requested deployments. The default environment is \`production\`. The \`auto_merge\` parameter is used to ensure that the requested ref is not behind the repository's default branch. If the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds, the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will return a failure response. By default, [commit statuses](https://docs.github.com/rest/reference/repos#statuses) for every submitted context must be in a \`success\` state. The \`required_contexts\` parameter allows you to specify a subset of contexts that must be \`success\`, or to specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do not require any contexts or create any commit statuses, the deployment will always succeed. The \`payload\` parameter is available for any extra information that a deployment system might need. It is a JSON text field that will be passed on when a deployment event is dispatched. The \`task\` parameter is used by the deployment system to allow different execution paths. In the web world this might be \`deploy:migrations\` to run schema changes on the system. In the compiled world this could be a flag to compile an application with debugging enabled. Users with \`repo\` or \`repo_deployment\` scopes can create a deployment for a given ref. #### Merged branch response You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating a deployment. This auto-merge happens when: *   Auto-merge option is enabled in the repository *   Topic branch does not include the latest changes on the base branch, which is \`master\` in the response example *   There are no merge conflicts If there are no new commits in the base branch, a new request to create a deployment should give a successful response. #### Merge conflict response This error happens when the \`auto_merge\` option is enabled and when the default branch (in this case \`master\`), can't be merged into the branch that's being deployed (in this case \`topic-branch\`), due to merge conflicts. #### Failed commit status checks This error happens when the \`required_contexts\` parameter indicates that one or more contexts need to have a \`success\` status for the commit to be deployed, but one or more of the required contexts do not have a state of \`success\`.
     *
     * @tags repos
     * @name ReposCreateDeployment
     * @summary Create a deployment
     * @request POST:/repos/{owner}/{repo}/deployments
     */
    reposCreateDeployment: (
      owner: string,
      repo: string,
      data: {
        /**
         * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
         * @default true
         */
        auto_merge?: boolean;
        /** @example ""1776-07-04T00:00:00.000-07:52"" */
        created_at?: string;
        /**
         * Short description of the deployment.
         * @default ""
         */
        description?: string | null;
        /**
         * Name for the target deployment environment (e.g., \`production\`, \`staging\`, \`qa\`).
         * @default "production"
         */
        environment?: string;
        /** JSON payload with extra information about the deployment. */
        payload?: Record<string, any> | string;
        /**
         * Specifies if the given environment is one that end-users directly interact with. Default: \`true\` when \`environment\` is \`production\` and \`false\` otherwise.
         * **Note:** This parameter requires you to use the [\`application/vnd.github.ant-man-preview+json\`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
         */
        production_environment?: boolean;
        /** The ref to deploy. This can be a branch, tag, or SHA. */
        ref: string;
        /** The [status](https://docs.github.com/rest/reference/repos#statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts. */
        required_contexts?: string[];
        /**
         * Specifies a task to execute (e.g., \`deploy\` or \`deploy:migrations\`).
         * @default "deploy"
         */
        task?: string;
        /**
         * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: \`false\`
         * **Note:** This parameter requires you to use the [\`application/vnd.github.ant-man-preview+json\`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [\`application/vnd.github.ant-man-preview+json\`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
         * @default false
         */
        transient_environment?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Deployment,
        | {
            /** @example ""https://docs.github.com/rest/reference/repos#create-a-deployment"" */
            documentation_url?: string;
            message?: string;
          }
        | ValidationError
      >({
        path: \`/repos/\${owner}/\${repo}/deployments\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposGetDeployment
     * @summary Get a deployment
     * @request GET:/repos/{owner}/{repo}/deployments/{deployment_id}
     */
    reposGetDeployment: (owner: string, repo: string, deploymentId: number, params: RequestParams = {}) =>
      this.request<Deployment, BasicError>({
        path: \`/repos/\${owner}/\${repo}/deployments/\${deploymentId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with \`repo\` or \`repo_deployment\` scopes can delete an inactive deployment. To set a deployment as inactive, you must: *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment. *   Mark the active deployment as inactive by adding any non-successful deployment status. For more information, see "[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status)."
     *
     * @tags repos
     * @name ReposDeleteDeployment
     * @summary Delete a deployment
     * @request DELETE:/repos/{owner}/{repo}/deployments/{deployment_id}
     */
    reposDeleteDeployment: (owner: string, repo: string, deploymentId: number, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationErrorSimple>({
        path: \`/repos/\${owner}/\${repo}/deployments/\${deploymentId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Users with pull access can view deployment statuses for a deployment:
     *
     * @tags repos
     * @name ReposListDeploymentStatuses
     * @summary List deployment statuses
     * @request GET:/repos/{owner}/{repo}/deployments/{deployment_id}/statuses
     */
    reposListDeploymentStatuses: (
      owner: string,
      repo: string,
      deploymentId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<DeploymentStatus[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/deployments/\${deploymentId}/statuses\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Users with \`push\` access can create deployment statuses for a given deployment. GitHub Apps require \`read & write\` access to "Deployments" and \`read-only\` access to "Repo contents" (for private repos). OAuth Apps require the \`repo_deployment\` scope.
     *
     * @tags repos
     * @name ReposCreateDeploymentStatus
     * @summary Create a deployment status
     * @request POST:/repos/{owner}/{repo}/deployments/{deployment_id}/statuses
     */
    reposCreateDeploymentStatus: (
      owner: string,
      repo: string,
      deploymentId: number,
      data: {
        /**
         * Adds a new \`inactive\` status to all prior non-transient, non-production environment deployments with the same repository and \`environment\` name as the created status's deployment. An \`inactive\` status is only added to deployments that had a \`success\` state. Default: \`true\`
         * **Note:** To add an \`inactive\` status to \`production\` environments, you must use the [\`application/vnd.github.flash-preview+json\`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type.
         * **Note:** This parameter requires you to use the [\`application/vnd.github.ant-man-preview+json\`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
         */
        auto_inactive?: boolean;
        /**
         * A short description of the status. The maximum description length is 140 characters.
         * @default ""
         */
        description?: string;
        /** Name for the target deployment environment, which can be changed when setting a deploy status. For example, \`production\`, \`staging\`, or \`qa\`. **Note:** This parameter requires you to use the [\`application/vnd.github.flash-preview+json\`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type. */
        environment?: "production" | "staging" | "qa";
        /**
         * Sets the URL for accessing your environment. Default: \`""\`
         * **Note:** This parameter requires you to use the [\`application/vnd.github.ant-man-preview+json\`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [\`application/vnd.github.ant-man-preview+json\`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
         * @default ""
         */
        environment_url?: string;
        /**
         * The full URL of the deployment's output. This parameter replaces \`target_url\`. We will continue to accept \`target_url\` to support legacy uses, but we recommend replacing \`target_url\` with \`log_url\`. Setting \`log_url\` will automatically set \`target_url\` to the same value. Default: \`""\`
         * **Note:** This parameter requires you to use the [\`application/vnd.github.ant-man-preview+json\`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [\`application/vnd.github.ant-man-preview+json\`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
         * @default ""
         */
        log_url?: string;
        /** The state of the status. Can be one of \`error\`, \`failure\`, \`inactive\`, \`in_progress\`, \`queued\` \`pending\`, or \`success\`. **Note:** To use the \`inactive\` state, you must provide the [\`application/vnd.github.ant-man-preview+json\`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. To use the \`in_progress\` and \`queued\` states, you must provide the [\`application/vnd.github.flash-preview+json\`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type. When you set a transient deployment to \`inactive\`, the deployment will be shown as \`destroyed\` in GitHub. */
        state: "error" | "failure" | "inactive" | "in_progress" | "queued" | "pending" | "success";
        /**
         * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the \`log_url\` parameter, which replaces \`target_url\`.
         * @default ""
         */
        target_url?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<DeploymentStatus, ValidationError>({
        path: \`/repos/\${owner}/\${repo}/deployments/\${deploymentId}/statuses\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Users with pull access can view a deployment status for a deployment:
     *
     * @tags repos
     * @name ReposGetDeploymentStatus
     * @summary Get a deployment status
     * @request GET:/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}
     */
    reposGetDeploymentStatus: (
      owner: string,
      repo: string,
      deploymentId: number,
      statusId: number,
      params: RequestParams = {},
    ) =>
      this.request<
        DeploymentStatus,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/repos/\${owner}/\${repo}/deployments/\${deploymentId}/statuses/\${statusId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description You can use this endpoint to trigger a webhook event called \`repository_dispatch\` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the \`repository_dispatch\` event occurs. For an example \`repository_dispatch\` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)." The \`client_payload\` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the \`client_payload\` can include a message that a user would like to send using a GitHub Actions workflow. Or the \`client_payload\` can be used as a test to debug your workflow. This endpoint requires write access to the repository by providing either: - Personal access tokens with \`repo\` scope. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation. - GitHub Apps with both \`metadata:read\` and \`contents:read&write\` permissions. This input example shows how you can use the \`client_payload\` as a test to debug your workflow.
     *
     * @tags repos
     * @name ReposCreateDispatchEvent
     * @summary Create a repository dispatch event
     * @request POST:/repos/{owner}/{repo}/dispatches
     */
    reposCreateDispatchEvent: (
      owner: string,
      repo: string,
      data: {
        /** JSON payload with extra information about the webhook event that your action or worklow may use. */
        client_payload?: Record<string, any>;
        /** A custom webhook event name. */
        event_type: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, ValidationError>({
        path: \`/repos/\${owner}/\${repo}/dispatches\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * No description
     *
     * @tags activity
     * @name ActivityListRepoEvents
     * @summary List repository events
     * @request GET:/repos/{owner}/{repo}/events
     */
    activityListRepoEvents: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], any>({
        path: \`/repos/\${owner}/\${repo}/events\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposListForks
     * @summary List forks
     * @request GET:/repos/{owner}/{repo}/forks
     */
    reposListForks: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * The sort order. Can be either \`newest\`, \`oldest\`, or \`stargazers\`.
         * @default "newest"
         */
        sort?: "newest" | "oldest" | "stargazers";
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/forks\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a fork for the authenticated user. **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com).
     *
     * @tags repos
     * @name ReposCreateFork
     * @summary Create a fork
     * @request POST:/repos/{owner}/{repo}/forks
     */
    reposCreateFork: (
      owner: string,
      repo: string,
      data: {
        /** Optional parameter to specify the organization name if forking into an organization. */
        organization?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Repository, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/forks\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags git
     * @name GitCreateBlob
     * @summary Create a blob
     * @request POST:/repos/{owner}/{repo}/git/blobs
     */
    gitCreateBlob: (
      owner: string,
      repo: string,
      data: {
        /** The new blob's content. */
        content: string;
        /**
         * The encoding used for \`content\`. Currently, \`"utf-8"\` and \`"base64"\` are supported.
         * @default "utf-8"
         */
        encoding?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ShortBlob, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/git/blobs\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description The \`content\` in the response will always be Base64 encoded. _Note_: This API supports blobs up to 100 megabytes in size.
     *
     * @tags git
     * @name GitGetBlob
     * @summary Get a blob
     * @request GET:/repos/{owner}/{repo}/git/blobs/{file_sha}
     */
    gitGetBlob: (owner: string, repo: string, fileSha: string, params: RequestParams = {}) =>
      this.request<Blob, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/git/blobs/\${fileSha}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects). **Signature verification object** The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object: | Name | Type | Description | | ---- | ---- | ----------- | | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. | | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | \`signature\` | \`string\` | The signature that was extracted from the commit. | | \`payload\` | \`string\` | The value that was signed. | These are the possible values for \`reason\` in the \`verification\` object: | Value | Description | | ----- | ----------- | | \`expired_key\` | The key that made the signature is expired. | | \`not_signing_key\` | The "signing" flag is not among the usage flags in the GPG key that made the signature. | | \`gpgverify_error\` | There was an error communicating with the signature verification service. | | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. | | \`unsigned\` | The object does not include a signature. | | \`unknown_signature_type\` | A non-PGP signature was found in the commit. | | \`no_user\` | No user was associated with the \`committer\` email address in the commit. | | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. | | \`unknown_key\` | The key that made the signature has not been registered with any user's account. | | \`malformed_signature\` | There was an error parsing the signature. | | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @tags git
     * @name GitCreateCommit
     * @summary Create a commit
     * @request POST:/repos/{owner}/{repo}/git/commits
     */
    gitCreateCommit: (
      owner: string,
      repo: string,
      data: {
        /** Information about the author of the commit. By default, the \`author\` will be the authenticated user and the current date. See the \`author\` and \`committer\` object below for details. */
        author?: {
          /** Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
          date?: string;
          /** The email of the author (or committer) of the commit */
          email?: string;
          /** The name of the author (or committer) of the commit */
          name?: string;
        };
        /** Information about the person who is making the commit. By default, \`committer\` will use the information set in \`author\`. See the \`author\` and \`committer\` object below for details. */
        committer?: {
          /** Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
          date?: string;
          /** The email of the author (or committer) of the commit */
          email?: string;
          /** The name of the author (or committer) of the commit */
          name?: string;
        };
        /** The commit message */
        message: string;
        /** The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided. */
        parents?: string[];
        /** The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the \`gpgsig\` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a \`signature\` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. */
        signature?: string;
        /** The SHA of the tree object this commit points to */
        tree: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GitCommit, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/git/commits\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects). **Signature verification object** The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object: | Name | Type | Description | | ---- | ---- | ----------- | | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. | | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | \`signature\` | \`string\` | The signature that was extracted from the commit. | | \`payload\` | \`string\` | The value that was signed. | These are the possible values for \`reason\` in the \`verification\` object: | Value | Description | | ----- | ----------- | | \`expired_key\` | The key that made the signature is expired. | | \`not_signing_key\` | The "signing" flag is not among the usage flags in the GPG key that made the signature. | | \`gpgverify_error\` | There was an error communicating with the signature verification service. | | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. | | \`unsigned\` | The object does not include a signature. | | \`unknown_signature_type\` | A non-PGP signature was found in the commit. | | \`no_user\` | No user was associated with the \`committer\` email address in the commit. | | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. | | \`unknown_key\` | The key that made the signature has not been registered with any user's account. | | \`malformed_signature\` | There was an error parsing the signature. | | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @tags git
     * @name GitGetCommit
     * @summary Get a commit
     * @request GET:/repos/{owner}/{repo}/git/commits/{commit_sha}
     */
    gitGetCommit: (owner: string, repo: string, commitSha: string, params: RequestParams = {}) =>
      this.request<GitCommit, BasicError>({
        path: \`/repos/\${owner}/\${repo}/git/commits/\${commitSha}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns an array of references from your Git database that match the supplied name. The \`:ref\` in the URL must be formatted as \`heads/<branch name>\` for branches and \`tags/<tag name>\` for tags. If the \`:ref\` doesn't exist in the repository, but existing refs start with \`:ref\`, they will be returned as an array. When you use this endpoint without providing a \`:ref\`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just \`heads\` and \`tags\`. **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)". If you request matching references for a branch named \`feature\` but the branch \`feature\` doesn't exist, the response can still include other matching head refs that start with the word \`feature\`, such as \`featureA\` and \`featureB\`.
     *
     * @tags git
     * @name GitListMatchingRefs
     * @summary List matching references
     * @request GET:/repos/{owner}/{repo}/git/matching-refs/{ref}
     */
    gitListMatchingRefs: (
      owner: string,
      repo: string,
      ref: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<GitRef[], any>({
        path: \`/repos/\${owner}/\${repo}/git/matching-refs/\${ref}\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a single reference from your Git database. The \`:ref\` in the URL must be formatted as \`heads/<branch name>\` for branches and \`tags/<tag name>\` for tags. If the \`:ref\` doesn't match an existing ref, a \`404\` is returned. **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
     *
     * @tags git
     * @name GitGetRef
     * @summary Get a reference
     * @request GET:/repos/{owner}/{repo}/git/ref/{ref}
     */
    gitGetRef: (owner: string, repo: string, ref: string, params: RequestParams = {}) =>
      this.request<GitRef, BasicError>({
        path: \`/repos/\${owner}/\${repo}/git/ref/\${ref}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
     *
     * @tags git
     * @name GitCreateRef
     * @summary Create a reference
     * @request POST:/repos/{owner}/{repo}/git/refs
     */
    gitCreateRef: (
      owner: string,
      repo: string,
      data: {
        /** @example ""refs/heads/newbranch"" */
        key?: string;
        /** The name of the fully qualified reference (ie: \`refs/heads/master\`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected. */
        ref: string;
        /** The SHA1 value for this reference. */
        sha: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GitRef, ValidationError>({
        path: \`/repos/\${owner}/\${repo}/git/refs\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags git
     * @name GitUpdateRef
     * @summary Update a reference
     * @request PATCH:/repos/{owner}/{repo}/git/refs/{ref}
     */
    gitUpdateRef: (
      owner: string,
      repo: string,
      ref: string,
      data: {
        /**
         * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to \`false\` will make sure you're not overwriting work.
         * @default false
         */
        force?: boolean;
        /** The SHA1 value to set this reference to */
        sha: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GitRef, ValidationError>({
        path: \`/repos/\${owner}/\${repo}/git/refs/\${ref}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags git
     * @name GitDeleteRef
     * @summary Delete a reference
     * @request DELETE:/repos/{owner}/{repo}/git/refs/{ref}
     */
    gitDeleteRef: (owner: string, repo: string, ref: string, params: RequestParams = {}) =>
      this.request<void, ValidationError>({
        path: \`/repos/\${owner}/\${repo}/git/refs/\${ref}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the \`refs/tags/[tag]\` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary. **Signature verification object** The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object: | Name | Type | Description | | ---- | ---- | ----------- | | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. | | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | \`signature\` | \`string\` | The signature that was extracted from the commit. | | \`payload\` | \`string\` | The value that was signed. | These are the possible values for \`reason\` in the \`verification\` object: | Value | Description | | ----- | ----------- | | \`expired_key\` | The key that made the signature is expired. | | \`not_signing_key\` | The "signing" flag is not among the usage flags in the GPG key that made the signature. | | \`gpgverify_error\` | There was an error communicating with the signature verification service. | | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. | | \`unsigned\` | The object does not include a signature. | | \`unknown_signature_type\` | A non-PGP signature was found in the commit. | | \`no_user\` | No user was associated with the \`committer\` email address in the commit. | | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. | | \`unknown_key\` | The key that made the signature has not been registered with any user's account. | | \`malformed_signature\` | There was an error parsing the signature. | | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @tags git
     * @name GitCreateTag
     * @summary Create a tag object
     * @request POST:/repos/{owner}/{repo}/git/tags
     */
    gitCreateTag: (
      owner: string,
      repo: string,
      data: {
        /** The tag message. */
        message: string;
        /** The SHA of the git object this is tagging. */
        object: string;
        /** The tag's name. This is typically a version (e.g., "v0.0.1"). */
        tag: string;
        /** An object with information about the individual creating the tag. */
        tagger?: {
          /** When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
          date?: string;
          /** The email of the author of the tag */
          email?: string;
          /** The name of the author of the tag */
          name?: string;
        };
        /** The type of the object we're tagging. Normally this is a \`commit\` but it can also be a \`tree\` or a \`blob\`. */
        type: "commit" | "tree" | "blob";
      },
      params: RequestParams = {},
    ) =>
      this.request<GitTag, ValidationError>({
        path: \`/repos/\${owner}/\${repo}/git/tags\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Signature verification object** The response will include a \`verification\` object that describes the result of verifying the commit's signature. The following fields are included in the \`verification\` object: | Name | Type | Description | | ---- | ---- | ----------- | | \`verified\` | \`boolean\` | Indicates whether GitHub considers the signature in this commit to be verified. | | \`reason\` | \`string\` | The reason for verified value. Possible values and their meanings are enumerated in table below. | | \`signature\` | \`string\` | The signature that was extracted from the commit. | | \`payload\` | \`string\` | The value that was signed. | These are the possible values for \`reason\` in the \`verification\` object: | Value | Description | | ----- | ----------- | | \`expired_key\` | The key that made the signature is expired. | | \`not_signing_key\` | The "signing" flag is not among the usage flags in the GPG key that made the signature. | | \`gpgverify_error\` | There was an error communicating with the signature verification service. | | \`gpgverify_unavailable\` | The signature verification service is currently unavailable. | | \`unsigned\` | The object does not include a signature. | | \`unknown_signature_type\` | A non-PGP signature was found in the commit. | | \`no_user\` | No user was associated with the \`committer\` email address in the commit. | | \`unverified_email\` | The \`committer\` email address in the commit was associated with a user, but the email address is not verified on her/his account. | | \`bad_email\` | The \`committer\` email address in the commit is not included in the identities of the PGP key that made the signature. | | \`unknown_key\` | The key that made the signature has not been registered with any user's account. | | \`malformed_signature\` | There was an error parsing the signature. | | \`invalid\` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | \`valid\` | None of the above errors applied, so the signature is considered to be verified. |
     *
     * @tags git
     * @name GitGetTag
     * @summary Get a tag
     * @request GET:/repos/{owner}/{repo}/git/tags/{tag_sha}
     */
    gitGetTag: (owner: string, repo: string, tagSha: string, params: RequestParams = {}) =>
      this.request<GitTag, BasicError>({
        path: \`/repos/\${owner}/\${repo}/git/tags/\${tagSha}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure. If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."
     *
     * @tags git
     * @name GitCreateTree
     * @summary Create a tree
     * @request POST:/repos/{owner}/{repo}/git/trees
     */
    gitCreateTree: (
      owner: string,
      repo: string,
      data: {
        /**
         * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by \`base_tree\` and entries defined in the \`tree\` parameter. Entries defined in the \`tree\` parameter will overwrite items from \`base_tree\` with the same \`path\`. If you're creating new changes on a branch, then normally you'd set \`base_tree\` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
         * If not provided, GitHub will create a new Git tree object from only the entries defined in the \`tree\` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the \`tree\` parameter will be listed as deleted by the new commit.
         */
        base_tree?: string;
        /** Objects (of \`path\`, \`mode\`, \`type\`, and \`sha\`) specifying a tree structure. */
        tree: {
          /**
           * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or \`tree.sha\`.
           *
           * **Note:** Use either \`tree.sha\` or \`content\` to specify the contents of the entry. Using both \`tree.sha\` and \`content\` will return an error.
           */
          content?: string;
          /** The file mode; one of \`100644\` for file (blob), \`100755\` for executable (blob), \`040000\` for subdirectory (tree), \`160000\` for submodule (commit), or \`120000\` for a blob that specifies the path of a symlink. */
          mode?: "100644" | "100755" | "040000" | "160000" | "120000";
          /** The file referenced in the tree. */
          path?: string;
          /**
           * The SHA1 checksum ID of the object in the tree. Also called \`tree.sha\`. If the value is \`null\` then the file will be deleted.
           *
           * **Note:** Use either \`tree.sha\` or \`content\` to specify the contents of the entry. Using both \`tree.sha\` and \`content\` will return an error.
           */
          sha?: string | null;
          /** Either \`blob\`, \`tree\`, or \`commit\`. */
          type?: "blob" | "tree" | "commit";
        }[];
      },
      params: RequestParams = {},
    ) =>
      this.request<GitTree, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/git/trees\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a single tree using the SHA1 value for that tree. If \`truncated\` is \`true\` in the response then the number of items in the \`tree\` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
     *
     * @tags git
     * @name GitGetTree
     * @summary Get a tree
     * @request GET:/repos/{owner}/{repo}/git/trees/{tree_sha}
     */
    gitGetTree: (
      owner: string,
      repo: string,
      treeSha: string,
      query?: {
        /** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in \`:tree_sha\`. For example, setting \`recursive\` to any of the following will enable returning objects or subtrees: \`0\`, \`1\`, \`"true"\`, and \`"false"\`. Omit this parameter to prevent recursively returning objects or subtrees. */
        recursive?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GitTree, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/git/trees/\${treeSha}\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposListWebhooks
     * @summary List repository webhooks
     * @request GET:/repos/{owner}/{repo}/hooks
     */
    reposListWebhooks: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Hook[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/hooks\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Repositories can have multiple webhooks installed. Each webhook should have a unique \`config\`. Multiple webhooks can share the same \`config\` as long as those webhooks do not have any \`events\` that overlap.
     *
     * @tags repos
     * @name ReposCreateWebhook
     * @summary Create a repository webhook
     * @request POST:/repos/{owner}/{repo}/hooks
     */
    reposCreateWebhook: (
      owner: string,
      repo: string,
      data: {
        /**
         * Determines if notifications are sent when the webhook is triggered. Set to \`true\` to send notifications.
         * @default true
         */
        active?: boolean;
        /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params). */
        config: {
          /** The media type used to serialize the payloads. Supported values include \`json\` and \`form\`. The default is \`form\`. */
          content_type?: WebhookConfigContentType;
          /** @example ""sha256"" */
          digest?: string;
          /** Determines whether the SSL certificate of the host for \`url\` will be verified when delivering payloads. Supported values include \`0\` (verification is performed) and \`1\` (verification is not performed). The default is \`0\`. **We strongly recommend not setting this to \`1\` as you are subject to man-in-the-middle and other attacks.** */
          insecure_ssl?: WebhookConfigInsecureSsl;
          /** If provided, the \`secret\` will be used as the \`key\` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
          secret?: WebhookConfigSecret;
          /** @example ""abc"" */
          token?: string;
          /** The URL to which the payloads will be delivered. */
          url: WebhookConfigUrl;
        };
        /**
         * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
         * @default ["push"]
         */
        events?: string[];
        /** Use \`web\` to create a webhook. Default: \`web\`. This parameter only accepts the value \`web\`. */
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Hook, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/hooks\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a webhook configured in a repository. To get only the webhook \`config\` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
     *
     * @tags repos
     * @name ReposGetWebhook
     * @summary Get a repository webhook
     * @request GET:/repos/{owner}/{repo}/hooks/{hook_id}
     */
    reposGetWebhook: (owner: string, repo: string, hookId: number, params: RequestParams = {}) =>
      this.request<Hook, BasicError>({
        path: \`/repos/\${owner}/\${repo}/hooks/\${hookId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates a webhook configured in a repository. If you previously had a \`secret\` set, you must provide the same \`secret\` or set a new \`secret\` or the secret will be removed. If you are only updating individual webhook \`config\` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
     *
     * @tags repos
     * @name ReposUpdateWebhook
     * @summary Update a repository webhook
     * @request PATCH:/repos/{owner}/{repo}/hooks/{hook_id}
     */
    reposUpdateWebhook: (
      owner: string,
      repo: string,
      hookId: number,
      data: {
        /**
         * Determines if notifications are sent when the webhook is triggered. Set to \`true\` to send notifications.
         * @default true
         */
        active?: boolean;
        /** Determines a list of events to be added to the list of events that the Hook triggers for. */
        add_events?: string[];
        /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params). */
        config?: {
          /** @example ""bar@example.com"" */
          address?: string;
          /** The media type used to serialize the payloads. Supported values include \`json\` and \`form\`. The default is \`form\`. */
          content_type?: WebhookConfigContentType;
          /** Determines whether the SSL certificate of the host for \`url\` will be verified when delivering payloads. Supported values include \`0\` (verification is performed) and \`1\` (verification is not performed). The default is \`0\`. **We strongly recommend not setting this to \`1\` as you are subject to man-in-the-middle and other attacks.** */
          insecure_ssl?: WebhookConfigInsecureSsl;
          /** @example ""The Serious Room"" */
          room?: string;
          /** If provided, the \`secret\` will be used as the \`key\` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
          secret?: WebhookConfigSecret;
          /** The URL to which the payloads will be delivered. */
          url: WebhookConfigUrl;
        };
        /**
         * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
         * @default ["push"]
         */
        events?: string[];
        /** Determines a list of events to be removed from the list of events that the Hook triggers for. */
        remove_events?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Hook, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/hooks/\${hookId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposDeleteWebhook
     * @summary Delete a repository webhook
     * @request DELETE:/repos/{owner}/{repo}/hooks/{hook_id}
     */
    reposDeleteWebhook: (owner: string, repo: string, hookId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/repos/\${owner}/\${repo}/hooks/\${hookId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Returns the webhook configuration for a repository. To get more information about the webhook, including the \`active\` state and \`events\`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)." Access tokens must have the \`read:repo_hook\` or \`repo\` scope, and GitHub Apps must have the \`repository_hooks:read\` permission.
     *
     * @tags repos
     * @name ReposGetWebhookConfigForRepo
     * @summary Get a webhook configuration for a repository
     * @request GET:/repos/{owner}/{repo}/hooks/{hook_id}/config
     */
    reposGetWebhookConfigForRepo: (owner: string, repo: string, hookId: number, params: RequestParams = {}) =>
      this.request<WebhookConfig, any>({
        path: \`/repos/\${owner}/\${repo}/hooks/\${hookId}/config\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the webhook configuration for a repository. To update more information about the webhook, including the \`active\` state and \`events\`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)." Access tokens must have the \`write:repo_hook\` or \`repo\` scope, and GitHub Apps must have the \`repository_hooks:write\` permission.
     *
     * @tags repos
     * @name ReposUpdateWebhookConfigForRepo
     * @summary Update a webhook configuration for a repository
     * @request PATCH:/repos/{owner}/{repo}/hooks/{hook_id}/config
     */
    reposUpdateWebhookConfigForRepo: (
      owner: string,
      repo: string,
      hookId: number,
      data: {
        /** The media type used to serialize the payloads. Supported values include \`json\` and \`form\`. The default is \`form\`. */
        content_type?: WebhookConfigContentType;
        /** Determines whether the SSL certificate of the host for \`url\` will be verified when delivering payloads. Supported values include \`0\` (verification is performed) and \`1\` (verification is not performed). The default is \`0\`. **We strongly recommend not setting this to \`1\` as you are subject to man-in-the-middle and other attacks.** */
        insecure_ssl?: WebhookConfigInsecureSsl;
        /** If provided, the \`secret\` will be used as the \`key\` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
        secret?: WebhookConfigSecret;
        /** The URL to which the payloads will be delivered. */
        url?: WebhookConfigUrl;
      },
      params: RequestParams = {},
    ) =>
      this.request<WebhookConfig, any>({
        path: \`/repos/\${owner}/\${repo}/hooks/\${hookId}/config\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
     *
     * @tags repos
     * @name ReposPingWebhook
     * @summary Ping a repository webhook
     * @request POST:/repos/{owner}/{repo}/hooks/{hook_id}/pings
     */
    reposPingWebhook: (owner: string, repo: string, hookId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/repos/\${owner}/\${repo}/hooks/\${hookId}/pings\`,
        method: "POST",
        ...params,
      }),

    /**
     * @description This will trigger the hook with the latest push to the current repository if the hook is subscribed to \`push\` events. If the hook is not subscribed to \`push\` events, the server will respond with 204 but no test POST will be generated. **Note**: Previously \`/repos/:owner/:repo/hooks/:hook_id/test\`
     *
     * @tags repos
     * @name ReposTestPushWebhook
     * @summary Test the push repository webhook
     * @request POST:/repos/{owner}/{repo}/hooks/{hook_id}/tests
     */
    reposTestPushWebhook: (owner: string, repo: string, hookId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/repos/\${owner}/\${repo}/hooks/\${hookId}/tests\`,
        method: "POST",
        ...params,
      }),

    /**
     * @description View the progress of an import. **Import status** This section includes details about the possible values of the \`status\` field of the Import Progress response. An import that does not have errors will progress through these steps: *   \`detecting\` - the "detection" step of the import is in progress because the request did not include a \`vcs\` parameter. The import is identifying the type of source control present at the URL. *   \`importing\` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include \`commit_count\` (the total number of raw commits that will be imported) and \`percent\` (0 - 100, the current progress through the import). *   \`mapping\` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information. *   \`pushing\` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include \`push_percent\`, which is the percent value reported by \`git push\` when it is "Writing objects". *   \`complete\` - the import is complete, and the repository is ready on GitHub. If there are problems, you will see one of these in the \`status\` field: *   \`auth_failed\` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section. *   \`error\` - the import encountered an error. The import progress response will include the \`failed_step\` and an error message. Contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com) for more information. *   \`detection_needs_auth\` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section. *   \`detection_found_nothing\` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL. *   \`detection_found_multiple\` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a \`project_choices\` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section. **The project_choices field** When multiple projects are found at the provided URL, the response hash will include a \`project_choices\` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type. **Git LFS related fields** This section includes details about Git LFS related fields that may be present in the Import Progress response. *   \`use_lfs\` - describes whether the import has been opted in or out of using Git LFS. The value can be \`opt_in\`, \`opt_out\`, or \`undecided\` if no action has been taken. *   \`has_large_files\` - the boolean value describing whether files larger than 100MB were found during the \`importing\` step. *   \`large_files_size\` - the total size in gigabytes of files larger than 100MB found in the originating repository. *   \`large_files_count\` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
     *
     * @tags migrations
     * @name MigrationsGetImportStatus
     * @summary Get an import status
     * @request GET:/repos/{owner}/{repo}/import
     */
    migrationsGetImportStatus: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<Import, BasicError>({
        path: \`/repos/\${owner}/\${repo}/import\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Start a source import to a GitHub repository using GitHub Importer.
     *
     * @tags migrations
     * @name MigrationsStartImport
     * @summary Start an import
     * @request PUT:/repos/{owner}/{repo}/import
     */
    migrationsStartImport: (
      owner: string,
      repo: string,
      data: {
        /** For a tfvc import, the name of the project that is being imported. */
        tfvc_project?: string;
        /** The originating VCS type. Can be one of \`subversion\`, \`git\`, \`mercurial\`, or \`tfvc\`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response. */
        vcs?: "subversion" | "git" | "mercurial" | "tfvc";
        /** If authentication is required, the password to provide to \`vcs_url\`. */
        vcs_password?: string;
        /** The URL of the originating repository. */
        vcs_url: string;
        /** If authentication is required, the username to provide to \`vcs_url\`. */
        vcs_username?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Import, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/import\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API request. If no parameters are provided, the import will be restarted.
     *
     * @tags migrations
     * @name MigrationsUpdateImport
     * @summary Update an import
     * @request PATCH:/repos/{owner}/{repo}/import
     */
    migrationsUpdateImport: (
      owner: string,
      repo: string,
      data: {
        /** @example ""project1"" */
        tfvc_project?: string;
        /** @example ""git"" */
        vcs?: string;
        /** The password to provide to the originating repository. */
        vcs_password?: string;
        /** The username to provide to the originating repository. */
        vcs_username?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Import, any>({
        path: \`/repos/\${owner}/\${repo}/import\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Stop an import for a repository.
     *
     * @tags migrations
     * @name MigrationsCancelImport
     * @summary Cancel an import
     * @request DELETE:/repos/{owner}/{repo}/import
     */
    migrationsCancelImport: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/import\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username \`hubot\` into something like \`hubot <hubot@12341234-abab-fefe-8787-fedcba987654>\`. This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
     *
     * @tags migrations
     * @name MigrationsGetCommitAuthors
     * @summary Get commit authors
     * @request GET:/repos/{owner}/{repo}/import/authors
     */
    migrationsGetCommitAuthors: (
      owner: string,
      repo: string,
      query?: {
        /** A user ID. Only return users with an ID greater than this ID. */
        since?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<PorterAuthor[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/import/authors\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
     *
     * @tags migrations
     * @name MigrationsMapCommitAuthor
     * @summary Map a commit author
     * @request PATCH:/repos/{owner}/{repo}/import/authors/{author_id}
     */
    migrationsMapCommitAuthor: (
      owner: string,
      repo: string,
      authorId: number,
      data: {
        /** The new Git author email. */
        email?: string;
        /** The new Git author name. */
        name?: string;
        /** @example ""can't touch this"" */
        remote_id?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PorterAuthor, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/import/authors/\${authorId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description List files larger than 100MB found during the import
     *
     * @tags migrations
     * @name MigrationsGetLargeFiles
     * @summary Get large files
     * @request GET:/repos/{owner}/{repo}/import/large_files
     */
    migrationsGetLargeFiles: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<PorterLargeFile[], any>({
        path: \`/repos/\${owner}/\${repo}/import/large_files\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).
     *
     * @tags migrations
     * @name MigrationsSetLfsPreference
     * @summary Update Git LFS preference
     * @request PATCH:/repos/{owner}/{repo}/import/lfs
     */
    migrationsSetLfsPreference: (
      owner: string,
      repo: string,
      data: {
        /** Can be one of \`opt_in\` (large files will be stored using Git LFS) or \`opt_out\` (large files will be removed during the import). */
        use_lfs: "opt_in" | "opt_out";
      },
      params: RequestParams = {},
    ) =>
      this.request<Import, ValidationError>({
        path: \`/repos/\${owner}/\${repo}/import/lfs\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsGetRepoInstallation
     * @summary Get a repository installation for the authenticated app
     * @request GET:/repos/{owner}/{repo}/installation
     */
    appsGetRepoInstallation: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<Installation, BasicError>({
        path: \`/repos/\${owner}/\${repo}/installation\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
     *
     * @tags interactions
     * @name InteractionsGetRestrictionsForRepo
     * @summary Get interaction restrictions for a repository
     * @request GET:/repos/{owner}/{repo}/interaction-limits
     */
    interactionsGetRestrictionsForRepo: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<InteractionLimitResponse, any>({
        path: \`/repos/\${owner}/\${repo}/interaction-limits\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a \`409 Conflict\` response and will not be able to use this endpoint to change the interaction limit for a single repository.
     *
     * @tags interactions
     * @name InteractionsSetRestrictionsForRepo
     * @summary Set interaction restrictions for a repository
     * @request PUT:/repos/{owner}/{repo}/interaction-limits
     */
    interactionsSetRestrictionsForRepo: (
      owner: string,
      repo: string,
      data: InteractionLimit,
      params: RequestParams = {},
    ) =>
      this.request<InteractionLimitResponse, void>({
        path: \`/repos/\${owner}/\${repo}/interaction-limits\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a \`409 Conflict\` response and will not be able to use this endpoint to change the interaction limit for a single repository.
     *
     * @tags interactions
     * @name InteractionsRemoveRestrictionsForRepo
     * @summary Remove interaction restrictions for a repository
     * @request DELETE:/repos/{owner}/{repo}/interaction-limits
     */
    interactionsRemoveRestrictionsForRepo: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: \`/repos/\${owner}/\${repo}/interaction-limits\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
     *
     * @tags repos
     * @name ReposListInvitations
     * @summary List repository invitations
     * @request GET:/repos/{owner}/{repo}/invitations
     */
    reposListInvitations: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryInvitation[], any>({
        path: \`/repos/\${owner}/\${repo}/invitations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposUpdateInvitation
     * @summary Update a repository invitation
     * @request PATCH:/repos/{owner}/{repo}/invitations/{invitation_id}
     */
    reposUpdateInvitation: (
      owner: string,
      repo: string,
      invitationId: number,
      data: {
        /** The permissions that the associated user will have on the repository. Valid values are \`read\`, \`write\`, \`maintain\`, \`triage\`, and \`admin\`. */
        permissions?: "read" | "write" | "maintain" | "triage" | "admin";
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryInvitation, any>({
        path: \`/repos/\${owner}/\${repo}/invitations/\${invitationId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposDeleteInvitation
     * @summary Delete a repository invitation
     * @request DELETE:/repos/{owner}/{repo}/invitations/{invitation_id}
     */
    reposDeleteInvitation: (owner: string, repo: string, invitationId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/invitations/\${invitationId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List issues in a repository. **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
     *
     * @tags issues
     * @name IssuesListForRepo
     * @summary List repository issues
     * @request GET:/repos/{owner}/{repo}/issues
     */
    issuesListForRepo: (
      owner: string,
      repo: string,
      query?: {
        /** Can be the name of a user. Pass in \`none\` for issues with no assigned user, and \`*\` for issues assigned to any user. */
        assignee?: string;
        /** The user that created the issue. */
        creator?: string;
        /**
         * One of \`asc\` (ascending) or \`desc\` (descending).
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /** A list of comma separated label names. Example: \`bug,ui,@high\` */
        labels?: string;
        /** A user that's mentioned in the issue. */
        mentioned?: string;
        /** If an \`integer\` is passed, it should refer to a milestone by its \`number\` field. If the string \`*\` is passed, issues with any milestone are accepted. If the string \`none\` is passed, issues without milestones are returned. */
        milestone?: string;
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
        /**
         * What to sort results by. Can be either \`created\`, \`updated\`, \`comments\`.
         * @default "created"
         */
        sort?: "created" | "updated" | "comments";
        /**
         * Indicates the state of the issues to return. Can be either \`open\`, \`closed\`, or \`all\`.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueSimple[], BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/issues\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a \`410 Gone\` status. This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
     *
     * @tags issues
     * @name IssuesCreate
     * @summary Create an issue
     * @request POST:/repos/{owner}/{repo}/issues
     */
    issuesCreate: (
      owner: string,
      repo: string,
      data: {
        /** Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_ */
        assignee?: string | null;
        /** Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
        assignees?: string[];
        /** The contents of the issue. */
        body?: string;
        /** Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ */
        labels?: (
          | string
          | {
              color?: string | null;
              description?: string | null;
              id?: number;
              name?: string;
            }
        )[];
        /** The \`number\` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._ */
        milestone?: string | number | null;
        /** The title of the issue. */
        title: string | number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Issue,
        | BasicError
        | ValidationError
        | {
            code?: string;
            documentation_url?: string;
            message?: string;
          }
      >({
        path: \`/repos/\${owner}/\${repo}/issues\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description By default, Issue Comments are ordered by ascending ID.
     *
     * @tags issues
     * @name IssuesListCommentsForRepo
     * @summary List issue comments for a repository
     * @request GET:/repos/{owner}/{repo}/issues/comments
     */
    issuesListCommentsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /** Either \`asc\` or \`desc\`. Ignored without the \`sort\` parameter. */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
        /**
         * One of \`created\` (when the repository was starred) or \`updated\` (when it was last pushed to).
         * @default "created"
         */
        sort?: "created" | "updated";
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueComment[], BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/issues/comments\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesGetComment
     * @summary Get an issue comment
     * @request GET:/repos/{owner}/{repo}/issues/comments/{comment_id}
     */
    issuesGetComment: (owner: string, repo: string, commentId: number, params: RequestParams = {}) =>
      this.request<IssueComment, BasicError>({
        path: \`/repos/\${owner}/\${repo}/issues/comments/\${commentId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesUpdateComment
     * @summary Update an issue comment
     * @request PATCH:/repos/{owner}/{repo}/issues/comments/{comment_id}
     */
    issuesUpdateComment: (
      owner: string,
      repo: string,
      commentId: number,
      data: {
        /** The contents of the comment. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueComment, ValidationError>({
        path: \`/repos/\${owner}/\${repo}/issues/comments/\${commentId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesDeleteComment
     * @summary Delete an issue comment
     * @request DELETE:/repos/{owner}/{repo}/issues/comments/{comment_id}
     */
    issuesDeleteComment: (owner: string, repo: string, commentId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/issues/comments/\${commentId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
     *
     * @tags reactions
     * @name ReactionsListForIssueComment
     * @summary List reactions for an issue comment
     * @request GET:/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
     */
    reactionsListForIssueComment: (
      owner: string,
      repo: string,
      commentId: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Reaction[],
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/repos/\${owner}/\${repo}/issues/comments/\${commentId}/reactions\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with a \`Status: 200 OK\` means that you already added the reaction type to this issue comment.
     *
     * @tags reactions
     * @name ReactionsCreateForIssueComment
     * @summary Create reaction for an issue comment
     * @request POST:/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
     */
    reactionsCreateForIssueComment: (
      owner: string,
      repo: string,
      commentId: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Reaction,
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/repos/\${owner}/\${repo}/issues/comments/\${commentId}/reactions\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** You can also specify a repository by \`repository_id\` using the route \`DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id\`. Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
     *
     * @tags reactions
     * @name ReactionsDeleteForIssueComment
     * @summary Delete an issue comment reaction
     * @request DELETE:/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}
     */
    reactionsDeleteForIssueComment: (
      owner: string,
      repo: string,
      commentId: number,
      reactionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/issues/comments/\${commentId}/reactions/\${reactionId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesListEventsForRepo
     * @summary List issue events for a repository
     * @request GET:/repos/{owner}/{repo}/issues/events
     */
    issuesListEventsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueEvent[], ValidationError>({
        path: \`/repos/\${owner}/\${repo}/issues/events\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesGetEvent
     * @summary Get an issue event
     * @request GET:/repos/{owner}/{repo}/issues/events/{event_id}
     */
    issuesGetEvent: (owner: string, repo: string, eventId: number, params: RequestParams = {}) =>
      this.request<IssueEvent, BasicError>({
        path: \`/repos/\${owner}/\${repo}/issues/events/\${eventId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description The API returns a [\`301 Moved Permanently\` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API returns a \`404 Not Found\` status. If the issue was deleted from a repository where the authenticated user has read access, the API returns a \`410 Gone\` status. To receive webhook events for transferred and deleted issues, subscribe to the [\`issues\`](https://docs.github.com/webhooks/event-payloads/#issues) webhook. **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
     *
     * @tags issues
     * @name IssuesGet
     * @summary Get an issue
     * @request GET:/repos/{owner}/{repo}/issues/{issue_number}
     */
    issuesGet: (owner: string, repo: string, issueNumber: number, params: RequestParams = {}) =>
      this.request<Issue, BasicError>({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Issue owners and users with push access can edit an issue.
     *
     * @tags issues
     * @name IssuesUpdate
     * @summary Update an issue
     * @request PATCH:/repos/{owner}/{repo}/issues/{issue_number}
     */
    issuesUpdate: (
      owner: string,
      repo: string,
      issueNumber: number,
      data: {
        /** Login for the user that this issue should be assigned to. **This field is deprecated.** */
        assignee?: string | null;
        /** Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (\`[]\`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
        assignees?: string[];
        /** The contents of the issue. */
        body?: string;
        /** Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (\`[]\`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._ */
        labels?: (
          | string
          | {
              color?: string | null;
              description?: string | null;
              id?: number;
              name?: string;
            }
        )[];
        /** The \`number\` of the milestone to associate this issue with or \`null\` to remove current. _NOTE: Only users with push access can set the milestone for issues. The milestone is silently dropped otherwise._ */
        milestone?: string | number | null;
        /** State of the issue. Either \`open\` or \`closed\`. */
        state?: "open" | "closed";
        /** The title of the issue. */
        title?: string | number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Issue,
        | BasicError
        | ValidationError
        | {
            code?: string;
            documentation_url?: string;
            message?: string;
          }
      >({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
     *
     * @tags issues
     * @name IssuesAddAssignees
     * @summary Add assignees to an issue
     * @request POST:/repos/{owner}/{repo}/issues/{issue_number}/assignees
     */
    issuesAddAssignees: (
      owner: string,
      repo: string,
      issueNumber: number,
      data: {
        /** Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._ */
        assignees?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueSimple, any>({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/assignees\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removes one or more assignees from an issue.
     *
     * @tags issues
     * @name IssuesRemoveAssignees
     * @summary Remove assignees from an issue
     * @request DELETE:/repos/{owner}/{repo}/issues/{issue_number}/assignees
     */
    issuesRemoveAssignees: (
      owner: string,
      repo: string,
      issueNumber: number,
      data: {
        /** Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._ */
        assignees?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueSimple, any>({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/assignees\`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Issue Comments are ordered by ascending ID.
     *
     * @tags issues
     * @name IssuesListComments
     * @summary List issue comments
     * @request GET:/repos/{owner}/{repo}/issues/{issue_number}/comments
     */
    issuesListComments: (
      owner: string,
      repo: string,
      issueNumber: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueComment[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/comments\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
     *
     * @tags issues
     * @name IssuesCreateComment
     * @summary Create an issue comment
     * @request POST:/repos/{owner}/{repo}/issues/{issue_number}/comments
     */
    issuesCreateComment: (
      owner: string,
      repo: string,
      issueNumber: number,
      data: {
        /** The contents of the comment. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueComment, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/comments\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesListEvents
     * @summary List issue events
     * @request GET:/repos/{owner}/{repo}/issues/{issue_number}/events
     */
    issuesListEvents: (
      owner: string,
      repo: string,
      issueNumber: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<IssueEventForIssue[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/events\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesListLabelsOnIssue
     * @summary List labels for an issue
     * @request GET:/repos/{owner}/{repo}/issues/{issue_number}/labels
     */
    issuesListLabelsOnIssue: (
      owner: string,
      repo: string,
      issueNumber: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Label[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/labels\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesAddLabels
     * @summary Add labels to an issue
     * @request POST:/repos/{owner}/{repo}/issues/{issue_number}/labels
     */
    issuesAddLabels: (
      owner: string,
      repo: string,
      issueNumber: number,
      data: {
        /** The name of the label to add to the issue. Must contain at least one label. **Note:** Alternatively, you can pass a single label as a \`string\` or an \`array\` of labels directly, but GitHub recommends passing an object with the \`labels\` key. */
        labels: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Label[], BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/labels\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removes any previous labels and sets the new labels for an issue.
     *
     * @tags issues
     * @name IssuesSetLabels
     * @summary Set labels for an issue
     * @request PUT:/repos/{owner}/{repo}/issues/{issue_number}/labels
     */
    issuesSetLabels: (
      owner: string,
      repo: string,
      issueNumber: number,
      data: {
        /** The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a \`string\` or an \`array\` of labels directly, but GitHub recommends passing an object with the \`labels\` key. */
        labels?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Label[], BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/labels\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesRemoveAllLabels
     * @summary Remove all labels from an issue
     * @request DELETE:/repos/{owner}/{repo}/issues/{issue_number}/labels
     */
    issuesRemoveAllLabels: (owner: string, repo: string, issueNumber: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/labels\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a \`404 Not Found\` status if the label does not exist.
     *
     * @tags issues
     * @name IssuesRemoveLabel
     * @summary Remove a label from an issue
     * @request DELETE:/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}
     */
    issuesRemoveLabel: (owner: string, repo: string, issueNumber: number, name: string, params: RequestParams = {}) =>
      this.request<Label[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/labels/\${name}\`,
        method: "DELETE",
        format: "json",
        ...params,
      }),

    /**
     * @description Users with push access can lock an issue or pull request's conversation. Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     *
     * @tags issues
     * @name IssuesLock
     * @summary Lock an issue
     * @request PUT:/repos/{owner}/{repo}/issues/{issue_number}/lock
     */
    issuesLock: (
      owner: string,
      repo: string,
      issueNumber: number,
      data: {
        /**
         * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
         * \\* \`off-topic\`
         * \\* \`too heated\`
         * \\* \`resolved\`
         * \\* \`spam\`
         */
        lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/lock\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Users with push access can unlock an issue's conversation.
     *
     * @tags issues
     * @name IssuesUnlock
     * @summary Unlock an issue
     * @request DELETE:/repos/{owner}/{repo}/issues/{issue_number}/lock
     */
    issuesUnlock: (owner: string, repo: string, issueNumber: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/lock\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
     *
     * @tags reactions
     * @name ReactionsListForIssue
     * @summary List reactions for an issue
     * @request GET:/repos/{owner}/{repo}/issues/{issue_number}/reactions
     */
    reactionsListForIssue: (
      owner: string,
      repo: string,
      issueNumber: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Reaction[],
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/reactions\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with a \`Status: 200 OK\` means that you already added the reaction type to this issue.
     *
     * @tags reactions
     * @name ReactionsCreateForIssue
     * @summary Create reaction for an issue
     * @request POST:/repos/{owner}/{repo}/issues/{issue_number}/reactions
     */
    reactionsCreateForIssue: (
      owner: string,
      repo: string,
      issueNumber: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Reaction,
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/reactions\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** You can also specify a repository by \`repository_id\` using the route \`DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id\`. Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
     *
     * @tags reactions
     * @name ReactionsDeleteForIssue
     * @summary Delete an issue reaction
     * @request DELETE:/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}
     */
    reactionsDeleteForIssue: (
      owner: string,
      repo: string,
      issueNumber: number,
      reactionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/reactions/\${reactionId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesListEventsForTimeline
     * @summary List timeline events for an issue
     * @request GET:/repos/{owner}/{repo}/issues/{issue_number}/timeline
     */
    issuesListEventsForTimeline: (
      owner: string,
      repo: string,
      issueNumber: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        IssueEventForIssue[],
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/repos/\${owner}/\${repo}/issues/\${issueNumber}/timeline\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposListDeployKeys
     * @summary List deploy keys
     * @request GET:/repos/{owner}/{repo}/keys
     */
    reposListDeployKeys: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<DeployKey[], any>({
        path: \`/repos/\${owner}/\${repo}/keys\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description You can create a read-only deploy key.
     *
     * @tags repos
     * @name ReposCreateDeployKey
     * @summary Create a deploy key
     * @request POST:/repos/{owner}/{repo}/keys
     */
    reposCreateDeployKey: (
      owner: string,
      repo: string,
      data: {
        /** The contents of the key. */
        key: string;
        /**
         * If \`true\`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
         *
         * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/)."
         */
        read_only?: boolean;
        /** A name for the key. */
        title?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<DeployKey, ValidationError>({
        path: \`/repos/\${owner}/\${repo}/keys\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposGetDeployKey
     * @summary Get a deploy key
     * @request GET:/repos/{owner}/{repo}/keys/{key_id}
     */
    reposGetDeployKey: (owner: string, repo: string, keyId: number, params: RequestParams = {}) =>
      this.request<DeployKey, BasicError>({
        path: \`/repos/\${owner}/\${repo}/keys/\${keyId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
     *
     * @tags repos
     * @name ReposDeleteDeployKey
     * @summary Delete a deploy key
     * @request DELETE:/repos/{owner}/{repo}/keys/{key_id}
     */
    reposDeleteDeployKey: (owner: string, repo: string, keyId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/keys/\${keyId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesListLabelsForRepo
     * @summary List labels for a repository
     * @request GET:/repos/{owner}/{repo}/labels
     */
    issuesListLabelsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Label[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/labels\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesCreateLabel
     * @summary Create a label
     * @request POST:/repos/{owner}/{repo}/labels
     */
    issuesCreateLabel: (
      owner: string,
      repo: string,
      data: {
        /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading \`#\`. */
        color?: string;
        /** A short description of the label. */
        description?: string;
        /** The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing \`:strawberry:\` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/). */
        name: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Label, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/labels\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesGetLabel
     * @summary Get a label
     * @request GET:/repos/{owner}/{repo}/labels/{name}
     */
    issuesGetLabel: (owner: string, repo: string, name: string, params: RequestParams = {}) =>
      this.request<Label, BasicError>({
        path: \`/repos/\${owner}/\${repo}/labels/\${name}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesUpdateLabel
     * @summary Update a label
     * @request PATCH:/repos/{owner}/{repo}/labels/{name}
     */
    issuesUpdateLabel: (
      owner: string,
      repo: string,
      name: string,
      data: {
        /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading \`#\`. */
        color?: string;
        /** A short description of the label. */
        description?: string;
        /** The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing \`:strawberry:\` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/). */
        new_name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Label, any>({
        path: \`/repos/\${owner}/\${repo}/labels/\${name}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesDeleteLabel
     * @summary Delete a label
     * @request DELETE:/repos/{owner}/{repo}/labels/{name}
     */
    issuesDeleteLabel: (owner: string, repo: string, name: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/labels/\${name}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
     *
     * @tags repos
     * @name ReposListLanguages
     * @summary List repository languages
     * @request GET:/repos/{owner}/{repo}/languages
     */
    reposListLanguages: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<Language, any>({
        path: \`/repos/\${owner}/\${repo}/languages\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description This method returns the contents of the repository's license file, if one is detected. Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
     *
     * @tags licenses
     * @name LicensesGetForRepo
     * @summary Get the license for a repository
     * @request GET:/repos/{owner}/{repo}/license
     */
    licensesGetForRepo: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<LicenseContent, any>({
        path: \`/repos/\${owner}/\${repo}/license\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposMerge
     * @summary Merge a branch
     * @request POST:/repos/{owner}/{repo}/merges
     */
    reposMerge: (
      owner: string,
      repo: string,
      data: {
        /** The name of the base branch that the head will be merged into. */
        base: string;
        /** Commit message to use for the merge commit. If omitted, a default message will be used. */
        commit_message?: string;
        /** The head to merge. This can be a branch name or a commit SHA1. */
        head: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Commit,
        | BasicError
        | {
            /** @example ""https://docs.github.com/rest/reference/repos#perform-a-merge"" */
            documentation_url?: string;
            message?: string;
          }
        | ValidationError
      >({
        path: \`/repos/\${owner}/\${repo}/merges\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesListMilestones
     * @summary List milestones
     * @request GET:/repos/{owner}/{repo}/milestones
     */
    issuesListMilestones: (
      owner: string,
      repo: string,
      query?: {
        /**
         * The direction of the sort. Either \`asc\` or \`desc\`.
         * @default "asc"
         */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * What to sort results by. Either \`due_on\` or \`completeness\`.
         * @default "due_on"
         */
        sort?: "due_on" | "completeness";
        /**
         * The state of the milestone. Either \`open\`, \`closed\`, or \`all\`.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
      },
      params: RequestParams = {},
    ) =>
      this.request<Milestone[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/milestones\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesCreateMilestone
     * @summary Create a milestone
     * @request POST:/repos/{owner}/{repo}/milestones
     */
    issuesCreateMilestone: (
      owner: string,
      repo: string,
      data: {
        /** A description of the milestone. */
        description?: string;
        /** The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        due_on?: string;
        /**
         * The state of the milestone. Either \`open\` or \`closed\`.
         * @default "open"
         */
        state?: "open" | "closed";
        /** The title of the milestone. */
        title: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Milestone, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/milestones\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesGetMilestone
     * @summary Get a milestone
     * @request GET:/repos/{owner}/{repo}/milestones/{milestone_number}
     */
    issuesGetMilestone: (owner: string, repo: string, milestoneNumber: number, params: RequestParams = {}) =>
      this.request<Milestone, BasicError>({
        path: \`/repos/\${owner}/\${repo}/milestones/\${milestoneNumber}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesUpdateMilestone
     * @summary Update a milestone
     * @request PATCH:/repos/{owner}/{repo}/milestones/{milestone_number}
     */
    issuesUpdateMilestone: (
      owner: string,
      repo: string,
      milestoneNumber: number,
      data: {
        /** A description of the milestone. */
        description?: string;
        /** The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        due_on?: string;
        /**
         * The state of the milestone. Either \`open\` or \`closed\`.
         * @default "open"
         */
        state?: "open" | "closed";
        /** The title of the milestone. */
        title?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Milestone, any>({
        path: \`/repos/\${owner}/\${repo}/milestones/\${milestoneNumber}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesDeleteMilestone
     * @summary Delete a milestone
     * @request DELETE:/repos/{owner}/{repo}/milestones/{milestone_number}
     */
    issuesDeleteMilestone: (owner: string, repo: string, milestoneNumber: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/repos/\${owner}/\${repo}/milestones/\${milestoneNumber}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags issues
     * @name IssuesListLabelsForMilestone
     * @summary List labels for issues in a milestone
     * @request GET:/repos/{owner}/{repo}/milestones/{milestone_number}/labels
     */
    issuesListLabelsForMilestone: (
      owner: string,
      repo: string,
      milestoneNumber: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Label[], any>({
        path: \`/repos/\${owner}/\${repo}/milestones/\${milestoneNumber}/labels\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List all notifications for the current user.
     *
     * @tags activity
     * @name ActivityListRepoNotificationsForAuthenticatedUser
     * @summary List repository notifications for the authenticated user
     * @request GET:/repos/{owner}/{repo}/notifications
     */
    activityListRepoNotificationsForAuthenticatedUser: (
      owner: string,
      repo: string,
      query?: {
        /**
         * If \`true\`, show notifications marked as read.
         * @default false
         */
        all?: boolean;
        /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        before?: string;
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * If \`true\`, only shows notifications in which the user is directly participating or mentioned.
         * @default false
         */
        participating?: boolean;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Thread[], any>({
        path: \`/repos/\${owner}/\${repo}/notifications\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Marks all notifications in a repository as "read" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a \`202 Accepted\` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter \`all=false\`.
     *
     * @tags activity
     * @name ActivityMarkRepoNotificationsAsRead
     * @summary Mark repository notifications as read
     * @request PUT:/repos/{owner}/{repo}/notifications
     */
    activityMarkRepoNotificationsAsRead: (
      owner: string,
      repo: string,
      data: {
        /** Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. Default: The current timestamp. */
        last_read_at?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/notifications\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposGetPages
     * @summary Get a GitHub Pages site
     * @request GET:/repos/{owner}/{repo}/pages
     */
    reposGetPages: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<Page, BasicError>({
        path: \`/repos/\${owner}/\${repo}/pages\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
     *
     * @tags repos
     * @name ReposCreatePagesSite
     * @summary Create a GitHub Pages site
     * @request POST:/repos/{owner}/{repo}/pages
     */
    reposCreatePagesSite: (
      owner: string,
      repo: string,
      data: {
        /** The source branch and directory used to publish your Pages site. */
        source: {
          /** The repository branch used to publish your site's source files. */
          branch: string;
          /**
           * The repository directory that includes the source files for the Pages site. Allowed paths are \`/\` or \`/docs\`. Default: \`/\`
           * @default "/"
           */
          path?: "/" | "/docs";
        };
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Page,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/repos/\${owner}/\${repo}/pages\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
     *
     * @tags repos
     * @name ReposUpdateInformationAboutPagesSite
     * @summary Update information about a GitHub Pages site
     * @request PUT:/repos/{owner}/{repo}/pages
     */
    reposUpdateInformationAboutPagesSite: (
      owner: string,
      repo: string,
      data: {
        /** Specify a custom domain for the repository. Sending a \`null\` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/)." */
        cname?: string | null;
        /** Configures access controls for the GitHub Pages site. If public is set to \`true\`, the site is accessible to anyone on the internet. If set to \`false\`, the site will only be accessible to users who have at least \`read\` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to \`internal\` visibility. This feature is only available to repositories in an organization on an Enterprise plan. */
        public?: boolean;
        /** Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory \`/docs\`. Possible values are \`"gh-pages"\`, \`"master"\`, and \`"master /docs"\`. */
        source:
          | "gh-pages"
          | "master"
          | "master /docs"
          | {
              /** The repository branch used to publish your site's source files. */
              branch: string;
              /** The repository directory that includes the source files for the Pages site. Allowed paths are \`/\` or \`/docs\`. */
              path: "/" | "/docs";
            };
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/pages\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposDeletePagesSite
     * @summary Delete a GitHub Pages site
     * @request DELETE:/repos/{owner}/{repo}/pages
     */
    reposDeletePagesSite: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<
        void,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/repos/\${owner}/\${repo}/pages\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposListPagesBuilds
     * @summary List GitHub Pages builds
     * @request GET:/repos/{owner}/{repo}/pages/builds
     */
    reposListPagesBuilds: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<PageBuild[], any>({
        path: \`/repos/\${owner}/\${repo}/pages/builds\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures. Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
     *
     * @tags repos
     * @name ReposRequestPagesBuild
     * @summary Request a GitHub Pages build
     * @request POST:/repos/{owner}/{repo}/pages/builds
     */
    reposRequestPagesBuild: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<PageBuildStatus, any>({
        path: \`/repos/\${owner}/\${repo}/pages/builds\`,
        method: "POST",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposGetLatestPagesBuild
     * @summary Get latest Pages build
     * @request GET:/repos/{owner}/{repo}/pages/builds/latest
     */
    reposGetLatestPagesBuild: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<PageBuild, any>({
        path: \`/repos/\${owner}/\${repo}/pages/builds/latest\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposGetPagesBuild
     * @summary Get GitHub Pages build
     * @request GET:/repos/{owner}/{repo}/pages/builds/{build_id}
     */
    reposGetPagesBuild: (owner: string, repo: string, buildId: number, params: RequestParams = {}) =>
      this.request<PageBuild, any>({
        path: \`/repos/\${owner}/\${repo}/pages/builds/\${buildId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the projects in a repository. Returns a \`404 Not Found\` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
     *
     * @tags projects
     * @name ProjectsListForRepo
     * @summary List repository projects
     * @request GET:/repos/{owner}/{repo}/projects
     */
    projectsListForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * Indicates the state of the projects to return. Can be either \`open\`, \`closed\`, or \`all\`.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
      },
      params: RequestParams = {},
    ) =>
      this.request<Project[], BasicError | ValidationErrorSimple>({
        path: \`/repos/\${owner}/\${repo}/projects\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a repository project board. Returns a \`404 Not Found\` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a \`401 Unauthorized\` or \`410 Gone\` status is returned.
     *
     * @tags projects
     * @name ProjectsCreateForRepo
     * @summary Create a repository project
     * @request POST:/repos/{owner}/{repo}/projects
     */
    projectsCreateForRepo: (
      owner: string,
      repo: string,
      data: {
        /** The description of the project. */
        body?: string;
        /** The name of the project. */
        name: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Project, BasicError | ValidationErrorSimple>({
        path: \`/repos/\${owner}/\${repo}/projects\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @tags pulls
     * @name PullsList
     * @summary List pull requests
     * @request GET:/repos/{owner}/{repo}/pulls
     */
    pullsList: (
      owner: string,
      repo: string,
      query?: {
        /** Filter pulls by base branch name. Example: \`gh-pages\`. */
        base?: string;
        /** The direction of the sort. Can be either \`asc\` or \`desc\`. Default: \`desc\` when sort is \`created\` or sort is not specified, otherwise \`asc\`. */
        direction?: "asc" | "desc";
        /** Filter pulls by head user or head organization and branch name in the format of \`user:ref-name\` or \`organization:ref-name\`. For example: \`github:new-script-format\` or \`octocat:test-branch\`. */
        head?: string;
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * What to sort results by. Can be either \`created\`, \`updated\`, \`popularity\` (comment count) or \`long-running\` (age, filtering by pulls updated in the last month).
         * @default "created"
         */
        sort?: "created" | "updated" | "popularity" | "long-running";
        /**
         * Either \`open\`, \`closed\`, or \`all\` to filter by state.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestSimple[], ValidationError>({
        path: \`/repos/\${owner}/\${repo}/pulls\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request. You can create a new pull request. This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     *
     * @tags pulls
     * @name PullsCreate
     * @summary Create a pull request
     * @request POST:/repos/{owner}/{repo}/pulls
     */
    pullsCreate: (
      owner: string,
      repo: string,
      data: {
        /** The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. */
        base: string;
        /** The contents of the pull request. */
        body?: string;
        /** Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more. */
        draft?: boolean;
        /** The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace \`head\` with a user like this: \`username:branch\`. */
        head: string;
        /** @example 1 */
        issue?: number;
        /** Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
        maintainer_can_modify?: boolean;
        /** The title of the new pull request. */
        title?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequest, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/pulls\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
     *
     * @tags pulls
     * @name PullsListReviewCommentsForRepo
     * @summary List review comments in a repository
     * @request GET:/repos/{owner}/{repo}/pulls/comments
     */
    pullsListReviewCommentsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /** Can be either \`asc\` or \`desc\`. Ignored without \`sort\` parameter. */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
        /**
         * One of \`created\` (when the repository was starred) or \`updated\` (when it was last pushed to).
         * @default "created"
         */
        sort?: "created" | "updated";
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReviewComment[], any>({
        path: \`/repos/\${owner}/\${repo}/pulls/comments\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Provides details for a review comment.
     *
     * @tags pulls
     * @name PullsGetReviewComment
     * @summary Get a review comment for a pull request
     * @request GET:/repos/{owner}/{repo}/pulls/comments/{comment_id}
     */
    pullsGetReviewComment: (owner: string, repo: string, commentId: number, params: RequestParams = {}) =>
      this.request<PullRequestReviewComment, BasicError>({
        path: \`/repos/\${owner}/\${repo}/pulls/comments/\${commentId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Enables you to edit a review comment.
     *
     * @tags pulls
     * @name PullsUpdateReviewComment
     * @summary Update a review comment for a pull request
     * @request PATCH:/repos/{owner}/{repo}/pulls/comments/{comment_id}
     */
    pullsUpdateReviewComment: (
      owner: string,
      repo: string,
      commentId: number,
      data: {
        /** The text of the reply to the review comment. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReviewComment, any>({
        path: \`/repos/\${owner}/\${repo}/pulls/comments/\${commentId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Deletes a review comment.
     *
     * @tags pulls
     * @name PullsDeleteReviewComment
     * @summary Delete a review comment for a pull request
     * @request DELETE:/repos/{owner}/{repo}/pulls/comments/{comment_id}
     */
    pullsDeleteReviewComment: (owner: string, repo: string, commentId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/repos/\${owner}/\${repo}/pulls/comments/\${commentId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
     *
     * @tags reactions
     * @name ReactionsListForPullRequestReviewComment
     * @summary List reactions for a pull request review comment
     * @request GET:/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
     */
    reactionsListForPullRequestReviewComment: (
      owner: string,
      repo: string,
      commentId: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Reaction[],
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/repos/\${owner}/\${repo}/pulls/comments/\${commentId}/reactions\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with a \`Status: 200 OK\` means that you already added the reaction type to this pull request review comment.
     *
     * @tags reactions
     * @name ReactionsCreateForPullRequestReviewComment
     * @summary Create reaction for a pull request review comment
     * @request POST:/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
     */
    reactionsCreateForPullRequestReviewComment: (
      owner: string,
      repo: string,
      commentId: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Reaction,
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/repos/\${owner}/\${repo}/pulls/comments/\${commentId}/reactions\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** You can also specify a repository by \`repository_id\` using the route \`DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.\` Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
     *
     * @tags reactions
     * @name ReactionsDeleteForPullRequestComment
     * @summary Delete a pull request comment reaction
     * @request DELETE:/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}
     */
    reactionsDeleteForPullRequestComment: (
      owner: string,
      repo: string,
      commentId: number,
      reactionId: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/pulls/comments/\${commentId}/reactions/\${reactionId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Lists details of a pull request by providing its number. When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the \`mergeable\` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)". The value of the \`mergeable\` attribute can be \`true\`, \`false\`, or \`null\`. If the value is \`null\`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-\`null\` value for the \`mergeable\` attribute in the response. If \`mergeable\` is \`true\`, then \`merge_commit_sha\` will be the SHA of the _test_ merge commit. The value of the \`merge_commit_sha\` attribute changes depending on the state of the pull request. Before merging a pull request, the \`merge_commit_sha\` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the \`merge_commit_sha\` attribute changes depending on how you merged the pull request: *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), \`merge_commit_sha\` represents the SHA of the merge commit. *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), \`merge_commit_sha\` represents the SHA of the squashed commit on the base branch. *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), \`merge_commit_sha\` represents the commit that the base branch was updated to. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     *
     * @tags pulls
     * @name PullsGet
     * @summary Get a pull request
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}
     */
    pullsGet: (owner: string, repo: string, pullNumber: number, params: RequestParams = {}) =>
      this.request<PullRequest, BasicError>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
     *
     * @tags pulls
     * @name PullsUpdate
     * @summary Update a pull request
     * @request PATCH:/repos/{owner}/{repo}/pulls/{pull_number}
     */
    pullsUpdate: (
      owner: string,
      repo: string,
      pullNumber: number,
      data: {
        /** The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. */
        base?: string;
        /** The contents of the pull request. */
        body?: string;
        /** Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
        maintainer_can_modify?: boolean;
        /** State of this Pull Request. Either \`open\` or \`closed\`. */
        state?: "open" | "closed";
        /** The title of the pull request. */
        title?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequest, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
     *
     * @tags pulls
     * @name PullsListReviewComments
     * @summary List review comments on a pull request
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/comments
     */
    pullsListReviewComments: (
      owner: string,
      repo: string,
      pullNumber: number,
      query?: {
        /** Can be either \`asc\` or \`desc\`. Ignored without \`sort\` parameter. */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
        /**
         * One of \`created\` (when the repository was starred) or \`updated\` (when it was last pushed to).
         * @default "created"
         */
        sort?: "created" | "updated";
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReviewComment[], any>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/comments\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using \`line\`, \`side\`, and optionally \`start_line\` and \`start_side\` if your comment applies to more than one line in the pull request diff. You can still create a review comment using the \`position\` parameter. When you use \`position\`, the \`line\`, \`side\`, \`start_line\`, and \`start_side\` parameters are not required. For more information, see the [\`comfort-fade\` preview notice](https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices). **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file. This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     *
     * @tags pulls
     * @name PullsCreateReviewComment
     * @summary Create a review comment for a pull request
     * @request POST:/repos/{owner}/{repo}/pulls/{pull_number}/comments
     */
    pullsCreateReviewComment: (
      owner: string,
      repo: string,
      pullNumber: number,
      data: {
        /** The text of the review comment. */
        body: string;
        /** The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the \`position\`. */
        commit_id?: string;
        /** @example 2 */
        in_reply_to?: number;
        /** **Required with \`comfort-fade\` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. */
        line?: number;
        /** The relative path to the file that necessitates a comment. */
        path: string;
        /** **Required without \`comfort-fade\` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above. */
        position?: number;
        /** **Required with \`comfort-fade\` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be \`LEFT\` or \`RIGHT\`. Use \`LEFT\` for deletions that appear in red. Use \`RIGHT\` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation. */
        side?: "LEFT" | "RIGHT";
        /** **Required when using multi-line comments**. To create multi-line comments, you must use the \`comfort-fade\` preview header. The \`start_line\` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. */
        start_line?: number;
        /** **Required when using multi-line comments**. To create multi-line comments, you must use the \`comfort-fade\` preview header. The \`start_side\` is the starting side of the diff that the comment applies to. Can be \`LEFT\` or \`RIGHT\`. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See \`side\` in this table for additional context. */
        start_side?: "LEFT" | "RIGHT" | "side";
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReviewComment, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/comments\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a reply to a review comment for a pull request. For the \`comment_id\`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported. This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     *
     * @tags pulls
     * @name PullsCreateReplyForReviewComment
     * @summary Create a reply for a review comment
     * @request POST:/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies
     */
    pullsCreateReplyForReviewComment: (
      owner: string,
      repo: string,
      pullNumber: number,
      commentId: number,
      data: {
        /** The text of the review comment. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReviewComment, BasicError>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/comments/\${commentId}/replies\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
     *
     * @tags pulls
     * @name PullsListCommits
     * @summary List commits on a pull request
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/commits
     */
    pullsListCommits: (
      owner: string,
      repo: string,
      pullNumber: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Commit[], any>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/commits\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
     *
     * @tags pulls
     * @name PullsListFiles
     * @summary List pull requests files
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/files
     */
    pullsListFiles: (
      owner: string,
      repo: string,
      pullNumber: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<DiffEntry[], ValidationError | BasicError>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/files\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags pulls
     * @name PullsCheckIfMerged
     * @summary Check if a pull request has been merged
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/merge
     */
    pullsCheckIfMerged: (owner: string, repo: string, pullNumber: number, params: RequestParams = {}) =>
      this.request<void, void>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/merge\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
     *
     * @tags pulls
     * @name PullsMerge
     * @summary Merge a pull request
     * @request PUT:/repos/{owner}/{repo}/pulls/{pull_number}/merge
     */
    pullsMerge: (
      owner: string,
      repo: string,
      pullNumber: number,
      data: {
        /** Extra detail to append to automatic commit message. */
        commit_message?: string;
        /** Title for the automatic commit message. */
        commit_title?: string;
        /** Merge method to use. Possible values are \`merge\`, \`squash\` or \`rebase\`. Default is \`merge\`. */
        merge_method?: "merge" | "squash" | "rebase";
        /** SHA that pull request head must match to allow merge. */
        sha?: string;
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<
        PullRequestMergeResult,
        | BasicError
        | {
            documentation_url?: string;
            message?: string;
          }
        | ValidationError
      >({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/merge\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags pulls
     * @name PullsListRequestedReviewers
     * @summary List requested reviewers for a pull request
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
     */
    pullsListRequestedReviewers: (
      owner: string,
      repo: string,
      pullNumber: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReviewRequest, any>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/requested_reviewers\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
     *
     * @tags pulls
     * @name PullsRequestReviewers
     * @summary Request reviewers for a pull request
     * @request POST:/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
     */
    pullsRequestReviewers: (
      owner: string,
      repo: string,
      pullNumber: number,
      data: {
        /** An array of user \`login\`s that will be requested. */
        reviewers?: string[];
        /** An array of team \`slug\`s that will be requested. */
        team_reviewers?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestSimple, BasicError | void>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/requested_reviewers\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags pulls
     * @name PullsRemoveRequestedReviewers
     * @summary Remove requested reviewers from a pull request
     * @request DELETE:/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
     */
    pullsRemoveRequestedReviewers: (
      owner: string,
      repo: string,
      pullNumber: number,
      data: {
        /** An array of user \`login\`s that will be removed. */
        reviewers?: string[];
        /** An array of team \`slug\`s that will be removed. */
        team_reviewers?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<void, ValidationError>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/requested_reviewers\`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description The list of reviews returns in chronological order.
     *
     * @tags pulls
     * @name PullsListReviews
     * @summary List reviews for a pull request
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/reviews
     */
    pullsListReviews: (
      owner: string,
      repo: string,
      pullNumber: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReview[], any>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/reviews\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details. Pull request reviews created in the \`PENDING\` state do not include the \`submitted_at\` property in the response. **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the \`application/vnd.github.v3.diff\` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the \`Accept\` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint. The \`position\` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     *
     * @tags pulls
     * @name PullsCreateReview
     * @summary Create a review for a pull request
     * @request POST:/repos/{owner}/{repo}/pulls/{pull_number}/reviews
     */
    pullsCreateReview: (
      owner: string,
      repo: string,
      pullNumber: number,
      data: {
        /** **Required** when using \`REQUEST_CHANGES\` or \`COMMENT\` for the \`event\` parameter. The body text of the pull request review. */
        body?: string;
        /** Use the following table to specify the location, destination, and contents of the draft review comment. */
        comments?: {
          /** Text of the review comment. */
          body: string;
          /** @example 28 */
          line?: number;
          /** The relative path to the file that necessitates a review comment. */
          path: string;
          /** The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below. */
          position?: number;
          /** @example "RIGHT" */
          side?: string;
          /** @example 26 */
          start_line?: number;
          /** @example "LEFT" */
          start_side?: string;
        }[];
        /** The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the \`position\`. Defaults to the most recent commit in the pull request when you do not specify a value. */
        commit_id?: string;
        /** The review action you want to perform. The review actions include: \`APPROVE\`, \`REQUEST_CHANGES\`, or \`COMMENT\`. By leaving this blank, you set the review action state to \`PENDING\`, which means you will need to [submit the pull request review](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready. */
        event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReview, BasicError | ValidationErrorSimple>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/reviews\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags pulls
     * @name PullsGetReview
     * @summary Get a review for a pull request
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
     */
    pullsGetReview: (owner: string, repo: string, pullNumber: number, reviewId: number, params: RequestParams = {}) =>
      this.request<PullRequestReview, BasicError>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/reviews/\${reviewId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Update the review summary comment with new text.
     *
     * @tags pulls
     * @name PullsUpdateReview
     * @summary Update a review for a pull request
     * @request PUT:/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
     */
    pullsUpdateReview: (
      owner: string,
      repo: string,
      pullNumber: number,
      reviewId: number,
      data: {
        /** The body text of the pull request review. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReview, ValidationErrorSimple>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/reviews/\${reviewId}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags pulls
     * @name PullsDeletePendingReview
     * @summary Delete a pending review for a pull request
     * @request DELETE:/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
     */
    pullsDeletePendingReview: (
      owner: string,
      repo: string,
      pullNumber: number,
      reviewId: number,
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReview, BasicError | ValidationErrorSimple>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/reviews/\${reviewId}\`,
        method: "DELETE",
        format: "json",
        ...params,
      }),

    /**
     * @description List comments for a specific pull request review.
     *
     * @tags pulls
     * @name PullsListCommentsForReview
     * @summary List comments for a pull request review
     * @request GET:/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments
     */
    pullsListCommentsForReview: (
      owner: string,
      repo: string,
      pullNumber: number,
      reviewId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ReviewComment[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/reviews/\${reviewId}/comments\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
     *
     * @tags pulls
     * @name PullsDismissReview
     * @summary Dismiss a review for a pull request
     * @request PUT:/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals
     */
    pullsDismissReview: (
      owner: string,
      repo: string,
      pullNumber: number,
      reviewId: number,
      data: {
        /** @example ""APPROVE"" */
        event?: string;
        /** The message for the pull request review dismissal */
        message: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReview, BasicError | ValidationErrorSimple>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/reviews/\${reviewId}/dismissals\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags pulls
     * @name PullsSubmitReview
     * @summary Submit a review for a pull request
     * @request POST:/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events
     */
    pullsSubmitReview: (
      owner: string,
      repo: string,
      pullNumber: number,
      reviewId: number,
      data: {
        /** The body text of the pull request review */
        body?: string;
        /** The review action you want to perform. The review actions include: \`APPROVE\`, \`REQUEST_CHANGES\`, or \`COMMENT\`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to \`PENDING\`, which means you will need to re-submit the pull request review using a review action. */
        event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
      },
      params: RequestParams = {},
    ) =>
      this.request<PullRequestReview, BasicError | ValidationErrorSimple>({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/reviews/\${reviewId}/events\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
     *
     * @tags pulls
     * @name PullsUpdateBranch
     * @summary Update a pull request branch
     * @request PUT:/repos/{owner}/{repo}/pulls/{pull_number}/update-branch
     */
    pullsUpdateBranch: (
      owner: string,
      repo: string,
      pullNumber: number,
      data: {
        /** The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a \`422 Unprocessable Entity\` status. You can use the "[List commits](https://docs.github.com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref. */
        expected_head_sha?: string;
      } | null,
      params: RequestParams = {},
    ) =>
      this.request<
        {
          message?: string;
          url?: string;
        },
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/repos/\${owner}/\${repo}/pulls/\${pullNumber}/update-branch\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the preferred README for a repository. READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
     *
     * @tags repos
     * @name ReposGetReadme
     * @summary Get a repository README
     * @request GET:/repos/{owner}/{repo}/readme
     */
    reposGetReadme: (
      owner: string,
      repo: string,
      query?: {
        /** The name of the commit/branch/tag. Default: the repository’s default branch (usually \`master\`) */
        ref?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ContentFile, BasicError | ValidationError>({
        path: \`/repos/\${owner}/\${repo}/readme\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags). Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
     *
     * @tags repos
     * @name ReposListReleases
     * @summary List releases
     * @request GET:/repos/{owner}/{repo}/releases
     */
    reposListReleases: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Release[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/releases\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Users with push access to the repository can create a release. This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     *
     * @tags repos
     * @name ReposCreateRelease
     * @summary Create a release
     * @request POST:/repos/{owner}/{repo}/releases
     */
    reposCreateRelease: (
      owner: string,
      repo: string,
      data: {
        /** Text describing the contents of the tag. */
        body?: string;
        /**
         * \`true\` to create a draft (unpublished) release, \`false\` to create a published one.
         * @default false
         */
        draft?: boolean;
        /** The name of the release. */
        name?: string;
        /**
         * \`true\` to identify the release as a prerelease. \`false\` to identify the release as a full release.
         * @default false
         */
        prerelease?: boolean;
        /** The name of the tag. */
        tag_name: string;
        /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually \`master\`). */
        target_commitish?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Release, ValidationError>({
        path: \`/repos/\${owner}/\${repo}/releases\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description To download the asset's binary content, set the \`Accept\` header of the request to [\`application/octet-stream\`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a \`200\` or \`302\` response.
     *
     * @tags repos
     * @name ReposGetReleaseAsset
     * @summary Get a release asset
     * @request GET:/repos/{owner}/{repo}/releases/assets/{asset_id}
     */
    reposGetReleaseAsset: (owner: string, repo: string, assetId: number, params: RequestParams = {}) =>
      this.request<
        ReleaseAsset,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/repos/\${owner}/\${repo}/releases/assets/\${assetId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Users with push access to the repository can edit a release asset.
     *
     * @tags repos
     * @name ReposUpdateReleaseAsset
     * @summary Update a release asset
     * @request PATCH:/repos/{owner}/{repo}/releases/assets/{asset_id}
     */
    reposUpdateReleaseAsset: (
      owner: string,
      repo: string,
      assetId: number,
      data: {
        /** An alternate short description of the asset. Used in place of the filename. */
        label?: string;
        /** The file name of the asset. */
        name?: string;
        /** @example ""uploaded"" */
        state?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ReleaseAsset, any>({
        path: \`/repos/\${owner}/\${repo}/releases/assets/\${assetId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposDeleteReleaseAsset
     * @summary Delete a release asset
     * @request DELETE:/repos/{owner}/{repo}/releases/assets/{asset_id}
     */
    reposDeleteReleaseAsset: (owner: string, repo: string, assetId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/releases/assets/\${assetId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description View the latest published full release for the repository. The latest release is the most recent non-prerelease, non-draft release, sorted by the \`created_at\` attribute. The \`created_at\` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
     *
     * @tags repos
     * @name ReposGetLatestRelease
     * @summary Get the latest release
     * @request GET:/repos/{owner}/{repo}/releases/latest
     */
    reposGetLatestRelease: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<Release, any>({
        path: \`/repos/\${owner}/\${repo}/releases/latest\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get a published release with the specified tag.
     *
     * @tags repos
     * @name ReposGetReleaseByTag
     * @summary Get a release by tag name
     * @request GET:/repos/{owner}/{repo}/releases/tags/{tag}
     */
    reposGetReleaseByTag: (owner: string, repo: string, tag: string, params: RequestParams = {}) =>
      this.request<Release, BasicError>({
        path: \`/repos/\${owner}/\${repo}/releases/tags/\${tag}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** This returns an \`upload_url\` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
     *
     * @tags repos
     * @name ReposGetRelease
     * @summary Get a release
     * @request GET:/repos/{owner}/{repo}/releases/{release_id}
     */
    reposGetRelease: (owner: string, repo: string, releaseId: number, params: RequestParams = {}) =>
      this.request<Release, BasicError>({
        path: \`/repos/\${owner}/\${repo}/releases/\${releaseId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Users with push access to the repository can edit a release.
     *
     * @tags repos
     * @name ReposUpdateRelease
     * @summary Update a release
     * @request PATCH:/repos/{owner}/{repo}/releases/{release_id}
     */
    reposUpdateRelease: (
      owner: string,
      repo: string,
      releaseId: number,
      data: {
        /** Text describing the contents of the tag. */
        body?: string;
        /** \`true\` makes the release a draft, and \`false\` publishes the release. */
        draft?: boolean;
        /** The name of the release. */
        name?: string;
        /** \`true\` to identify the release as a prerelease, \`false\` to identify the release as a full release. */
        prerelease?: boolean;
        /** The name of the tag. */
        tag_name?: string;
        /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually \`master\`). */
        target_commitish?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Release, any>({
        path: \`/repos/\${owner}/\${repo}/releases/\${releaseId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Users with push access to the repository can delete a release.
     *
     * @tags repos
     * @name ReposDeleteRelease
     * @summary Delete a release
     * @request DELETE:/repos/{owner}/{repo}/releases/{release_id}
     */
    reposDeleteRelease: (owner: string, repo: string, releaseId: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/releases/\${releaseId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposListReleaseAssets
     * @summary List release assets
     * @request GET:/repos/{owner}/{repo}/releases/{release_id}/assets
     */
    reposListReleaseAssets: (
      owner: string,
      repo: string,
      releaseId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ReleaseAsset[], any>({
        path: \`/repos/\${owner}/\${repo}/releases/\${releaseId}/assets\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the \`upload_url\` returned in the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset. You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint. Most libraries will set the required \`Content-Length\` header automatically. Use the required \`Content-Type\` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: \`application/zip\` GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example, you'll still need to pass your authentication to be able to upload an asset. When an upstream failure occurs, you will receive a \`502 Bad Gateway\` status. This may leave an empty asset with a state of \`starter\`. It can be safely deleted. **Notes:** *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)" endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact). *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
     *
     * @tags repos
     * @name ReposUploadReleaseAsset
     * @summary Upload a release asset
     * @request POST:/repos/{owner}/{repo}/releases/{release_id}/assets
     */
    reposUploadReleaseAsset: (
      owner: string,
      repo: string,
      releaseId: number,
      data: WebhookConfigUrl,
      query?: {
        label?: string;
        name?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ReleaseAsset, any>({
        path: \`/repos/\${owner}/\${repo}/releases/\${releaseId}/assets\`,
        method: "POST",
        query: query,
        body: data,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the \`repo\` scope or \`security_events\` scope. GitHub Apps must have the \`secret_scanning_alerts\` read permission to use this endpoint.
     *
     * @tags secret-scanning
     * @name SecretScanningListAlertsForRepo
     * @summary List secret scanning alerts for a repository
     * @request GET:/repos/{owner}/{repo}/secret-scanning/alerts
     */
    secretScanningListAlertsForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Set to \`open\` or \`resolved\` to only list secret scanning alerts in a specific state. */
        state?: "open" | "resolved";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        SecretScanningAlert[],
        void | {
          code?: string;
          documentation_url?: string;
          message?: string;
        }
      >({
        path: \`/repos/\${owner}/\${repo}/secret-scanning/alerts\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the \`repo\` scope or \`security_events\` scope. GitHub Apps must have the \`secret_scanning_alerts\` read permission to use this endpoint.
     *
     * @tags secret-scanning
     * @name SecretScanningGetAlert
     * @summary Get a secret scanning alert
     * @request GET:/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
     */
    secretScanningGetAlert: (owner: string, repo: string, alertNumber: AlertNumber, params: RequestParams = {}) =>
      this.request<
        SecretScanningAlert,
        void | {
          code?: string;
          documentation_url?: string;
          message?: string;
        }
      >({
        path: \`/repos/\${owner}/\${repo}/secret-scanning/alerts/\${alertNumber}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the \`repo\` scope or \`security_events\` scope. GitHub Apps must have the \`secret_scanning_alerts\` write permission to use this endpoint.
     *
     * @tags secret-scanning
     * @name SecretScanningUpdateAlert
     * @summary Update a secret scanning alert
     * @request PATCH:/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
     */
    secretScanningUpdateAlert: (
      owner: string,
      repo: string,
      alertNumber: AlertNumber,
      data: {
        /** **Required when the \`state\` is \`resolved\`.** The reason for resolving the alert. Can be one of \`false_positive\`, \`wont_fix\`, \`revoked\`, or \`used_in_tests\`. */
        resolution?: SecretScanningAlertResolution;
        /** Sets the state of the secret scanning alert. Can be either \`open\` or \`resolved\`. You must provide \`resolution\` when you set the state to \`resolved\`. */
        state: SecretScanningAlertState;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        SecretScanningAlert,
        void | {
          code?: string;
          documentation_url?: string;
          message?: string;
        }
      >({
        path: \`/repos/\${owner}/\${repo}/secret-scanning/alerts/\${alertNumber}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the people that have starred the repository. You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`Accept\` header:
     *
     * @tags activity
     * @name ActivityListStargazersForRepo
     * @summary List stargazers
     * @request GET:/repos/{owner}/{repo}/stargazers
     */
    activityListStargazersForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], ValidationError>({
        path: \`/repos/\${owner}/\${repo}/stargazers\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
     *
     * @tags repos
     * @name ReposGetCodeFrequencyStats
     * @summary Get the weekly commit activity
     * @request GET:/repos/{owner}/{repo}/stats/code_frequency
     */
    reposGetCodeFrequencyStats: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<CodeFrequencyStat[], any>({
        path: \`/repos/\${owner}/\${repo}/stats/code_frequency\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns the last year of commit activity grouped by week. The \`days\` array is a group of commits per day, starting on \`Sunday\`.
     *
     * @tags repos
     * @name ReposGetCommitActivityStats
     * @summary Get the last year of commit activity
     * @request GET:/repos/{owner}/{repo}/stats/commit_activity
     */
    reposGetCommitActivityStats: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<CommitActivity[], any>({
        path: \`/repos/\${owner}/\${repo}/stats/commit_activity\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns the \`total\` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (\`weeks\` array) with the following information: *   \`w\` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). *   \`a\` - Number of additions *   \`d\` - Number of deletions *   \`c\` - Number of commits
     *
     * @tags repos
     * @name ReposGetContributorsStats
     * @summary Get all contributor commit activity
     * @request GET:/repos/{owner}/{repo}/stats/contributors
     */
    reposGetContributorsStats: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<ContributorActivity[], any>({
        path: \`/repos/\${owner}/\${repo}/stats/contributors\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Returns the total commit counts for the \`owner\` and total commit counts in \`all\`. \`all\` is everyone combined, including the \`owner\` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract \`owner\` from \`all\`. The array order is oldest week (index 0) to most recent week.
     *
     * @tags repos
     * @name ReposGetParticipationStats
     * @summary Get the weekly commit count
     * @request GET:/repos/{owner}/{repo}/stats/participation
     */
    reposGetParticipationStats: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<ParticipationStats, BasicError>({
        path: \`/repos/\${owner}/\${repo}/stats/participation\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Each array contains the day number, hour number, and number of commits: *   \`0-6\`: Sunday - Saturday *   \`0-23\`: Hour of day *   Number of commits For example, \`[2, 14, 25]\` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
     *
     * @tags repos
     * @name ReposGetPunchCardStats
     * @summary Get the hourly commit count for each day
     * @request GET:/repos/{owner}/{repo}/stats/punch_card
     */
    reposGetPunchCardStats: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<CodeFrequencyStat[], any>({
        path: \`/repos/\${owner}/\${repo}/stats/punch_card\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Users with push access in a repository can create commit statuses for a given SHA. Note: there is a limit of 1000 statuses per \`sha\` and \`context\` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
     *
     * @tags repos
     * @name ReposCreateCommitStatus
     * @summary Create a commit status
     * @request POST:/repos/{owner}/{repo}/statuses/{sha}
     */
    reposCreateCommitStatus: (
      owner: string,
      repo: string,
      sha: string,
      data: {
        /**
         * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
         * @default "default"
         */
        context?: string;
        /** A short description of the status. */
        description?: string;
        /** The state of the status. Can be one of \`error\`, \`failure\`, \`pending\`, or \`success\`. */
        state: "error" | "failure" | "pending" | "success";
        /**
         * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
         * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
         * \`http://ci.example.com/user/repo/build/sha\`
         */
        target_url?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Status, any>({
        path: \`/repos/\${owner}/\${repo}/statuses/\${sha}\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the people watching the specified repository.
     *
     * @tags activity
     * @name ActivityListWatchersForRepo
     * @summary List watchers
     * @request GET:/repos/{owner}/{repo}/subscribers
     */
    activityListWatchersForRepo: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: \`/repos/\${owner}/\${repo}/subscribers\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags activity
     * @name ActivityGetRepoSubscription
     * @summary Get a repository subscription
     * @request GET:/repos/{owner}/{repo}/subscription
     */
    activityGetRepoSubscription: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<RepositorySubscription, BasicError | void>({
        path: \`/repos/\${owner}/\${repo}/subscription\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description If you would like to watch a repository, set \`subscribed\` to \`true\`. If you would like to ignore notifications made within a repository, set \`ignored\` to \`true\`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.
     *
     * @tags activity
     * @name ActivitySetRepoSubscription
     * @summary Set a repository subscription
     * @request PUT:/repos/{owner}/{repo}/subscription
     */
    activitySetRepoSubscription: (
      owner: string,
      repo: string,
      data: {
        /** Determines if all notifications should be blocked from this repository. */
        ignored?: boolean;
        /** Determines if notifications should be received from this repository. */
        subscribed?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositorySubscription, any>({
        path: \`/repos/\${owner}/\${repo}/subscription\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).
     *
     * @tags activity
     * @name ActivityDeleteRepoSubscription
     * @summary Delete a repository subscription
     * @request DELETE:/repos/{owner}/{repo}/subscription
     */
    activityDeleteRepoSubscription: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/subscription\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposListTags
     * @summary List repository tags
     * @request GET:/repos/{owner}/{repo}/tags
     */
    reposListTags: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Tag[], any>({
        path: \`/repos/\${owner}/\${repo}/tags\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets a redirect URL to download a tar archive for a repository. If you omit \`:ref\`, the repository’s default branch (usually \`master\`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the \`Location\` header to make a second \`GET\` request. **Note**: For private repositories, these links are temporary and expire after five minutes.
     *
     * @tags repos
     * @name ReposDownloadTarballArchive
     * @summary Download a repository archive (tar)
     * @request GET:/repos/{owner}/{repo}/tarball/{ref}
     */
    reposDownloadTarballArchive: (owner: string, repo: string, ref: string, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/repos/\${owner}/\${repo}/tarball/\${ref}\`,
        method: "GET",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposListTeams
     * @summary List repository teams
     * @request GET:/repos/{owner}/{repo}/teams
     */
    reposListTeams: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Team[], any>({
        path: \`/repos/\${owner}/\${repo}/teams\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposGetAllTopics
     * @summary Get all repository topics
     * @request GET:/repos/{owner}/{repo}/topics
     */
    reposGetAllTopics: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<
        Topic,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/repos/\${owner}/\${repo}/topics\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposReplaceAllTopics
     * @summary Replace all repository topics
     * @request PUT:/repos/{owner}/{repo}/topics
     */
    reposReplaceAllTopics: (
      owner: string,
      repo: string,
      data: {
        /** An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (\`[]\`) to clear all topics from the repository. **Note:** Topic \`names\` cannot contain uppercase letters. */
        names: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Topic,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationErrorSimple
      >({
        path: \`/repos/\${owner}/\${repo}/topics\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
     *
     * @tags repos
     * @name ReposGetClones
     * @summary Get repository clones
     * @request GET:/repos/{owner}/{repo}/traffic/clones
     */
    reposGetClones: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Must be one of: \`day\`, \`week\`.
         * @default "day"
         */
        per?: "day" | "week";
      },
      params: RequestParams = {},
    ) =>
      this.request<CloneTraffic, BasicError>({
        path: \`/repos/\${owner}/\${repo}/traffic/clones\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Get the top 10 popular contents over the last 14 days.
     *
     * @tags repos
     * @name ReposGetTopPaths
     * @summary Get top referral paths
     * @request GET:/repos/{owner}/{repo}/traffic/popular/paths
     */
    reposGetTopPaths: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<ContentTraffic[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/traffic/popular/paths\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get the top 10 referrers over the last 14 days.
     *
     * @tags repos
     * @name ReposGetTopReferrers
     * @summary Get top referral sources
     * @request GET:/repos/{owner}/{repo}/traffic/popular/referrers
     */
    reposGetTopReferrers: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<ReferrerTraffic[], BasicError>({
        path: \`/repos/\${owner}/\${repo}/traffic/popular/referrers\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
     *
     * @tags repos
     * @name ReposGetViews
     * @summary Get page views
     * @request GET:/repos/{owner}/{repo}/traffic/views
     */
    reposGetViews: (
      owner: string,
      repo: string,
      query?: {
        /**
         * Must be one of: \`day\`, \`week\`.
         * @default "day"
         */
        per?: "day" | "week";
      },
      params: RequestParams = {},
    ) =>
      this.request<ViewTraffic, BasicError>({
        path: \`/repos/\${owner}/\${repo}/traffic/views\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original \`owner\`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).
     *
     * @tags repos
     * @name ReposTransfer
     * @summary Transfer a repository
     * @request POST:/repos/{owner}/{repo}/transfer
     */
    reposTransfer: (
      owner: string,
      repo: string,
      data: {
        /** The username or organization name the repository will be transferred to. */
        new_owner: string;
        /** ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories. */
        team_ids?: number[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Repository, any>({
        path: \`/repos/\${owner}/\${repo}/transfer\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
     *
     * @tags repos
     * @name ReposCheckVulnerabilityAlerts
     * @summary Check if vulnerability alerts are enabled for a repository
     * @request GET:/repos/{owner}/{repo}/vulnerability-alerts
     */
    reposCheckVulnerabilityAlerts: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: \`/repos/\${owner}/\${repo}/vulnerability-alerts\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
     *
     * @tags repos
     * @name ReposEnableVulnerabilityAlerts
     * @summary Enable vulnerability alerts
     * @request PUT:/repos/{owner}/{repo}/vulnerability-alerts
     */
    reposEnableVulnerabilityAlerts: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/vulnerability-alerts\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
     *
     * @tags repos
     * @name ReposDisableVulnerabilityAlerts
     * @summary Disable vulnerability alerts
     * @request DELETE:/repos/{owner}/{repo}/vulnerability-alerts
     */
    reposDisableVulnerabilityAlerts: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/repos/\${owner}/\${repo}/vulnerability-alerts\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Gets a redirect URL to download a zip archive for a repository. If you omit \`:ref\`, the repository’s default branch (usually \`master\`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the \`Location\` header to make a second \`GET\` request. **Note**: For private repositories, these links are temporary and expire after five minutes.
     *
     * @tags repos
     * @name ReposDownloadZipballArchive
     * @summary Download a repository archive (zip)
     * @request GET:/repos/{owner}/{repo}/zipball/{ref}
     */
    reposDownloadZipballArchive: (owner: string, repo: string, ref: string, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/repos/\${owner}/\${repo}/zipball/\${ref}\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Creates a new repository using a repository template. Use the \`template_owner\` and \`template_repo\` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the \`is_template\` key is \`true\`. **OAuth scope requirements** When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include: *   \`public_repo\` scope or \`repo\` scope to create a public repository *   \`repo\` scope to create a private repository
     *
     * @tags repos
     * @name ReposCreateUsingTemplate
     * @summary Create a repository using a template
     * @request POST:/repos/{template_owner}/{template_repo}/generate
     */
    reposCreateUsingTemplate: (
      templateOwner: string,
      templateRepo: string,
      data: {
        /** A short description of the new repository. */
        description?: string;
        /**
         * Set to \`true\` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: \`false\`.
         * @default false
         */
        include_all_branches?: boolean;
        /** The name of the new repository. */
        name: string;
        /** The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization. */
        owner?: string;
        /**
         * Either \`true\` to create a new private repository or \`false\` to create a new public one.
         * @default false
         */
        private?: boolean;
      },
      params: RequestParams = {},
    ) =>
      this.request<Repository, any>({
        path: \`/repos/\${templateOwner}/\${templateRepo}/generate\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),
  };
  repositories = {
    /**
     * @description Lists all public repositories in the order that they were created. Note: Pagination is powered exclusively by the \`since\` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
     *
     * @tags repos
     * @name ReposListPublic
     * @summary List public repositories
     * @request GET:/repositories
     */
    reposListPublic: (
      query?: {
        /** A repository ID. Only return repositories with an ID greater than this ID. */
        since?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], ValidationError>({
        path: \`/repositories\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  scim = {
    /**
     * @description **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminListProvisionedGroupsEnterprise
     * @summary List provisioned SCIM groups for an enterprise
     * @request GET:/scim/v2/enterprises/{enterprise}/Groups
     */
    enterpriseAdminListProvisionedGroupsEnterprise: (
      enterprise: string,
      query?: {
        /** Used for pagination: the number of results to return. */
        count?: number;
        /** Used for pagination: the index of the first result to return. */
        startIndex?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ScimGroupListEnterprise, any>({
        path: \`/scim/v2/enterprises/\${enterprise}/Groups\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminProvisionAndInviteEnterpriseGroup
     * @summary Provision a SCIM enterprise group and invite users
     * @request POST:/scim/v2/enterprises/{enterprise}/Groups
     */
    enterpriseAdminProvisionAndInviteEnterpriseGroup: (
      enterprise: string,
      data: {
        /** The name of the SCIM group. This must match the GitHub organization that the group maps to. */
        displayName: string;
        members?: {
          /** The SCIM user ID for a user. */
          value: string;
        }[];
        /** The SCIM schema URIs. */
        schemas: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<ScimEnterpriseGroup, any>({
        path: \`/scim/v2/enterprises/\${enterprise}/Groups\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminGetProvisioningInformationForEnterpriseGroup
     * @summary Get SCIM provisioning information for an enterprise group
     * @request GET:/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}
     */
    enterpriseAdminGetProvisioningInformationForEnterpriseGroup: (
      enterprise: string,
      scimGroupId: string,
      params: RequestParams = {},
    ) =>
      this.request<ScimEnterpriseGroup, any>({
        path: \`/scim/v2/enterprises/\${enterprise}/Groups/\${scimGroupId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminSetInformationForProvisionedEnterpriseGroup
     * @summary Set SCIM information for a provisioned enterprise group
     * @request PUT:/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}
     */
    enterpriseAdminSetInformationForProvisionedEnterpriseGroup: (
      enterprise: string,
      scimGroupId: string,
      data: {
        /** The name of the SCIM group. This must match the GitHub organization that the group maps to. */
        displayName: string;
        members?: {
          /** The SCIM user ID for a user. */
          value: string;
        }[];
        /** The SCIM schema URIs. */
        schemas: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<ScimEnterpriseGroup, any>({
        path: \`/scim/v2/enterprises/\${enterprise}/Groups/\${scimGroupId}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminUpdateAttributeForEnterpriseGroup
     * @summary Update an attribute for a SCIM enterprise group
     * @request PATCH:/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}
     */
    enterpriseAdminUpdateAttributeForEnterpriseGroup: (
      enterprise: string,
      scimGroupId: string,
      data: {
        /** Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2). */
        Operations: object[];
        /** The SCIM schema URIs. */
        schemas: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<ScimEnterpriseGroup, any>({
        path: \`/scim/v2/enterprises/\${enterprise}/Groups/\${scimGroupId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminDeleteScimGroupFromEnterprise
     * @summary Delete a SCIM group from an enterprise
     * @request DELETE:/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}
     */
    enterpriseAdminDeleteScimGroupFromEnterprise: (
      enterprise: string,
      scimGroupId: string,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/scim/v2/enterprises/\${enterprise}/Groups/\${scimGroupId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. Retrieves a paginated list of all provisioned enterprise members, including pending invitations. When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member: - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future. - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted). - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO. The returned list of external identities can include an entry for a \`null\` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO: 1. The user is granted access by the IdP and is not a member of the GitHub enterprise. 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account. 1. After successfully authenticating with the SAML SSO IdP, the \`null\` external identity entry is created and the user is prompted to sign in to their GitHub account: - If the user signs in, their GitHub account is linked to this entry. - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity \`null\` entry remains in place.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminListProvisionedIdentitiesEnterprise
     * @summary List SCIM provisioned identities for an enterprise
     * @request GET:/scim/v2/enterprises/{enterprise}/Users
     */
    enterpriseAdminListProvisionedIdentitiesEnterprise: (
      enterprise: string,
      query?: {
        /** Used for pagination: the number of results to return. */
        count?: number;
        /** Used for pagination: the index of the first result to return. */
        startIndex?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ScimUserListEnterprise, any>({
        path: \`/scim/v2/enterprises/\${enterprise}/Users\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. Provision enterprise membership for a user, and send organization invitation emails to the email address. You can optionally include the groups a user will be invited to join. If you do not provide a list of \`groups\`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminProvisionAndInviteEnterpriseUser
     * @summary Provision and invite a SCIM enterprise user
     * @request POST:/scim/v2/enterprises/{enterprise}/Users
     */
    enterpriseAdminProvisionAndInviteEnterpriseUser: (
      enterprise: string,
      data: {
        /** List of user emails. */
        emails: {
          /** Whether this email address is the primary address. */
          primary: boolean;
          /** The type of email address. */
          type: string;
          /** The email address. */
          value: string;
        }[];
        /** List of SCIM group IDs the user is a member of. */
        groups?: {
          value?: string;
        }[];
        name: {
          /** The last name of the user. */
          familyName: string;
          /** The first name of the user. */
          givenName: string;
        };
        /** The SCIM schema URIs. */
        schemas: string[];
        /** The username for the user. */
        userName: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ScimEnterpriseUser, any>({
        path: \`/scim/v2/enterprises/\${enterprise}/Users\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminGetProvisioningInformationForEnterpriseUser
     * @summary Get SCIM provisioning information for an enterprise user
     * @request GET:/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}
     */
    enterpriseAdminGetProvisioningInformationForEnterpriseUser: (
      enterprise: string,
      scimUserId: string,
      params: RequestParams = {},
    ) =>
      this.request<ScimEnterpriseUser, any>({
        path: \`/scim/v2/enterprises/\${enterprise}/Users/\${scimUserId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead. You must at least provide the required values for the user: \`userName\`, \`name\`, and \`emails\`. **Warning:** Setting \`active: false\` removes the user from the enterprise, deletes the external identity, and deletes the associated \`{scim_user_id}\`.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminSetInformationForProvisionedEnterpriseUser
     * @summary Set SCIM information for a provisioned enterprise user
     * @request PUT:/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}
     */
    enterpriseAdminSetInformationForProvisionedEnterpriseUser: (
      enterprise: string,
      scimUserId: string,
      data: {
        /** List of user emails. */
        emails: {
          /** Whether this email address is the primary address. */
          primary: boolean;
          /** The type of email address. */
          type: string;
          /** The email address. */
          value: string;
        }[];
        /** List of SCIM group IDs the user is a member of. */
        groups?: {
          value?: string;
        }[];
        name: {
          /** The last name of the user. */
          familyName: string;
          /** The first name of the user. */
          givenName: string;
        };
        /** The SCIM schema URIs. */
        schemas: string[];
        /** The username for the user. */
        userName: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ScimEnterpriseUser, any>({
        path: \`/scim/v2/enterprises/\${enterprise}/Users/\${scimUserId}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific \`Operations\` JSON format that contains at least one of the \`add\`, \`remove\`, or \`replace\` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2). **Note:** Complicated SCIM \`path\` selectors that include filters are not supported. For example, a \`path\` selector defined as \`"path": "emails[type eq \\"work\\"]"\` will not work. **Warning:** If you set \`active:false\` using the \`replace\` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated \`:scim_user_id\`. \`\`\` { "Operations":[{ "op":"replace", "value":{ "active":false } }] } \`\`\`
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminUpdateAttributeForEnterpriseUser
     * @summary Update an attribute for a SCIM enterprise user
     * @request PATCH:/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}
     */
    enterpriseAdminUpdateAttributeForEnterpriseUser: (
      enterprise: string,
      scimUserId: string,
      data: {
        /** Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2). */
        Operations: object[];
        /** The SCIM schema URIs. */
        schemas: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<ScimEnterpriseUser, any>({
        path: \`/scim/v2/enterprises/\${enterprise}/Users/\${scimUserId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * @tags enterprise-admin
     * @name EnterpriseAdminDeleteUserFromEnterprise
     * @summary Delete a SCIM user from an enterprise
     * @request DELETE:/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}
     */
    enterpriseAdminDeleteUserFromEnterprise: (enterprise: string, scimUserId: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/scim/v2/enterprises/\${enterprise}/Users/\${scimUserId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the \`filter\` parameter, the resources for all matching provisions members are returned. When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member: - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future. - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted). - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO. The returned list of external identities can include an entry for a \`null\` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO: 1. The user is granted access by the IdP and is not a member of the GitHub organization. 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account. 1. After successfully authenticating with the SAML SSO IdP, the \`null\` external identity entry is created and the user is prompted to sign in to their GitHub account: - If the user signs in, their GitHub account is linked to this entry. - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity \`null\` entry remains in place.
     *
     * @tags scim
     * @name ScimListProvisionedIdentities
     * @summary List SCIM provisioned identities
     * @request GET:/scim/v2/organizations/{org}/Users
     */
    scimListProvisionedIdentities: (
      org: string,
      query?: {
        /** Used for pagination: the number of results to return. */
        count?: number;
        /**
         * Filters results using the equals query parameter operator (\`eq\`). You can filter results that are equal to \`id\`, \`userName\`, \`emails\`, and \`external_id\`. For example, to search for an identity with the \`userName\` Octocat, you would use this query:
         *
         * \`?filter=userName%20eq%20\\"Octocat\\"\`.
         *
         * To filter results for the identity with the email \`octocat@github.com\`, you would use this query:
         *
         * \`?filter=emails%20eq%20\\"octocat@github.com\\"\`.
         */
        filter?: string;
        /** Used for pagination: the index of the first result to return. */
        startIndex?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ScimUserList, ScimError>({
        path: \`/scim/v2/organizations/\${org}/Users\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Provision organization membership for a user, and send an activation email to the email address.
     *
     * @tags scim
     * @name ScimProvisionAndInviteUser
     * @summary Provision and invite a SCIM user
     * @request POST:/scim/v2/organizations/{org}/Users
     */
    scimProvisionAndInviteUser: (
      org: string,
      data: {
        active?: boolean;
        /**
         * The name of the user, suitable for display to end-users
         * @example "Jon Doe"
         */
        displayName?: string;
        /**
         * user emails
         * @minItems 1
         * @example [{"value":"someone@example.com","primary":true},{"value":"another@example.com","primary":false}]
         */
        emails: {
          primary?: boolean;
          type?: string;
          value: string;
        }[];
        externalId?: string;
        groups?: string[];
        /** @example {"givenName":"Jane","familyName":"User"} */
        name: {
          familyName: string;
          formatted?: string;
          givenName: string;
        };
        schemas?: string[];
        /**
         * Configured by the admin. Could be an email, login, or username
         * @example "someone@example.com"
         */
        userName: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ScimUser, ScimError>({
        path: \`/scim/v2/organizations/\${org}/Users\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags scim
     * @name ScimGetProvisioningInformationForUser
     * @summary Get SCIM provisioning information for a user
     * @request GET:/scim/v2/organizations/{org}/Users/{scim_user_id}
     */
    scimGetProvisioningInformationForUser: (org: string, scimUserId: string, params: RequestParams = {}) =>
      this.request<ScimUser, ScimError>({
        path: \`/scim/v2/organizations/\${org}/Users/\${scimUserId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead. You must at least provide the required values for the user: \`userName\`, \`name\`, and \`emails\`. **Warning:** Setting \`active: false\` removes the user from the organization, deletes the external identity, and deletes the associated \`{scim_user_id}\`.
     *
     * @tags scim
     * @name ScimSetInformationForProvisionedUser
     * @summary Update a provisioned organization membership
     * @request PUT:/scim/v2/organizations/{org}/Users/{scim_user_id}
     */
    scimSetInformationForProvisionedUser: (
      org: string,
      scimUserId: string,
      data: {
        active?: boolean;
        /**
         * The name of the user, suitable for display to end-users
         * @example "Jon Doe"
         */
        displayName?: string;
        /**
         * user emails
         * @minItems 1
         * @example [{"value":"someone@example.com","primary":true},{"value":"another@example.com","primary":false}]
         */
        emails: {
          primary?: boolean;
          type?: string;
          value: string;
        }[];
        externalId?: string;
        groups?: string[];
        /** @example {"givenName":"Jane","familyName":"User"} */
        name: {
          familyName: string;
          formatted?: string;
          givenName: string;
        };
        schemas?: string[];
        /**
         * Configured by the admin. Could be an email, login, or username
         * @example "someone@example.com"
         */
        userName: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ScimUser, ScimError>({
        path: \`/scim/v2/organizations/\${org}/Users/\${scimUserId}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific \`Operations\` JSON format that contains at least one of the \`add\`, \`remove\`, or \`replace\` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2). **Note:** Complicated SCIM \`path\` selectors that include filters are not supported. For example, a \`path\` selector defined as \`"path": "emails[type eq \\"work\\"]"\` will not work. **Warning:** If you set \`active:false\` using the \`replace\` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated \`:scim_user_id\`. \`\`\` { "Operations":[{ "op":"replace", "value":{ "active":false } }] } \`\`\`
     *
     * @tags scim
     * @name ScimUpdateAttributeForUser
     * @summary Update an attribute for a SCIM user
     * @request PATCH:/scim/v2/organizations/{org}/Users/{scim_user_id}
     */
    scimUpdateAttributeForUser: (
      org: string,
      scimUserId: string,
      data: {
        /**
         * Set of operations to be performed
         * @minItems 1
         * @example [{"op":"replace","value":{"active":false}}]
         */
        Operations: {
          op: "add" | "remove" | "replace";
          path?: string;
          value?:
            | {
                active?: boolean | null;
                externalId?: string | null;
                familyName?: string | null;
                givenName?: string | null;
                userName?: string | null;
              }
            | {
                primary?: boolean;
                value?: string;
              }[]
            | string;
        }[];
        schemas?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<ScimUser, ScimError | BasicError>({
        path: \`/scim/v2/organizations/\${org}/Users/\${scimUserId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags scim
     * @name ScimDeleteUserFromOrg
     * @summary Delete a SCIM user from an organization
     * @request DELETE:/scim/v2/organizations/{org}/Users/{scim_user_id}
     */
    scimDeleteUserFromOrg: (org: string, scimUserId: string, params: RequestParams = {}) =>
      this.request<void, ScimError>({
        path: \`/scim/v2/organizations/\${org}/Users/\${scimUserId}\`,
        method: "DELETE",
        ...params,
      }),
  };
  search = {
    /**
     * @description Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if you want to find the definition of the \`addClass\` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this: \`q=addClass+in:file+language:js+repo:jquery/jquery\` This query searches for the keyword \`addClass\` within a file's contents. The query limits the search to files where the language is JavaScript in the \`jquery/jquery\` repository. #### Considerations for code search Due to the complexity of searching code, there are a few restrictions on how searches are performed: *   Only the _default branch_ is considered. In most cases, this will be the \`master\` branch. *   Only files smaller than 384 KB are searchable. *   You must always include at least one search term when searching source code. For example, searching for [\`language:go\`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [\`amazing language:go\`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
     *
     * @tags search
     * @name SearchCode
     * @summary Search code
     * @request GET:/search/code
     */
    searchCode: (
      query: {
        /**
         * Determines whether the first search result returned is the highest number of matches (\`desc\`) or lowest number of matches (\`asc\`). This parameter is ignored unless you provide \`sort\`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching code](https://help.github.com/articles/searching-code/)" for a detailed list of qualifiers. */
        q: string;
        /** Sorts the results of your query. Can only be \`indexed\`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
        sort?: "indexed";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          incomplete_results: boolean;
          items: CodeSearchResultItem[];
          total_count: number;
        },
        | BasicError
        | ValidationError
        | {
            code?: string;
            documentation_url?: string;
            message?: string;
          }
      >({
        path: \`/search/code\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Find commits via various criteria on the default branch (usually \`master\`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When searching for commits, you can get text match metadata for the **message** field when you provide the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this: \`q=repo:octocat/Spoon-Knife+css\`
     *
     * @tags search
     * @name SearchCommits
     * @summary Search commits
     * @request GET:/search/commits
     */
    searchCommits: (
      query: {
        /**
         * Determines whether the first search result returned is the highest number of matches (\`desc\`) or lowest number of matches (\`asc\`). This parameter is ignored unless you provide \`sort\`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://help.github.com/articles/searching-commits/)" for a detailed list of qualifiers. */
        q: string;
        /** Sorts the results of your query by \`author-date\` or \`committer-date\`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
        sort?: "author-date" | "committer-date";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          incomplete_results: boolean;
          items: CommitSearchResultItem[];
          total_count: number;
        },
        {
          documentation_url: string;
          message: string;
        }
      >({
        path: \`/search/commits\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this. \`q=windows+label:bug+language:python+state:open&sort=created&order=asc\` This query searches for the keyword \`windows\`, within any open issue that is labeled as \`bug\`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results. **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the \`is:issue\` or \`is:pull-request\` qualifier will receive an HTTP \`422 Unprocessable Entity\` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the \`is\` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
     *
     * @tags search
     * @name SearchIssuesAndPullRequests
     * @summary Search issues and pull requests
     * @request GET:/search/issues
     */
    searchIssuesAndPullRequests: (
      query: {
        /**
         * Determines whether the first search result returned is the highest number of matches (\`desc\`) or lowest number of matches (\`asc\`). This parameter is ignored unless you provide \`sort\`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)" for a detailed list of qualifiers. */
        q: string;
        /** Sorts the results of your query by the number of \`comments\`, \`reactions\`, \`reactions-+1\`, \`reactions--1\`, \`reactions-smile\`, \`reactions-thinking_face\`, \`reactions-heart\`, \`reactions-tada\`, or \`interactions\`. You can also sort results by how recently the items were \`created\` or \`updated\`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
        sort?:
          | "comments"
          | "reactions"
          | "reactions-+1"
          | "reactions--1"
          | "reactions-smile"
          | "reactions-thinking_face"
          | "reactions-heart"
          | "reactions-tada"
          | "interactions"
          | "created"
          | "updated";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          incomplete_results: boolean;
          items: IssueSearchResultItem[];
          total_count: number;
        },
        | BasicError
        | ValidationError
        | {
            code?: string;
            documentation_url?: string;
            message?: string;
          }
      >({
        path: \`/search/issues\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if you want to find labels in the \`linguist\` repository that match \`bug\`, \`defect\`, or \`enhancement\`. Your query might look like this: \`q=bug+defect+enhancement&repository_id=64778136\` The labels that best match the query appear first in the search results.
     *
     * @tags search
     * @name SearchLabels
     * @summary Search labels
     * @request GET:/search/labels
     */
    searchLabels: (
      query: {
        /**
         * Determines whether the first search result returned is the highest number of matches (\`desc\`) or lowest number of matches (\`asc\`). This parameter is ignored unless you provide \`sort\`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /** The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */
        q: string;
        /** The id of the repository. */
        repository_id: number;
        /** Sorts the results of your query by when the label was \`created\` or \`updated\`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
        sort?: "created" | "updated";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          incomplete_results: boolean;
          items: LabelSearchResultItem[];
          total_count: number;
        },
        BasicError | ValidationError
      >({
        path: \`/search/labels\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this: \`q=tetris+language:assembly&sort=stars&order=desc\` This query searches for repositories with the word \`tetris\` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results. When you include the \`mercy\` preview header, you can also search for multiple topics by adding more \`topic:\` instances. For example, your query might look like this: \`q=topic:ruby+topic:rails\`
     *
     * @tags search
     * @name SearchRepos
     * @summary Search repositories
     * @request GET:/search/repositories
     */
    searchRepos: (
      query: {
        /**
         * Determines whether the first search result returned is the highest number of matches (\`desc\`) or lowest number of matches (\`asc\`). This parameter is ignored unless you provide \`sort\`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers. */
        q: string;
        /** Sorts the results of your query by number of \`stars\`, \`forks\`, or \`help-wanted-issues\` or how recently the items were \`updated\`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
        sort?: "stars" | "forks" | "help-wanted-issues" | "updated";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          incomplete_results: boolean;
          items: RepoSearchResultItem[];
          total_count: number;
        },
        | ValidationError
        | {
            code?: string;
            documentation_url?: string;
            message?: string;
          }
      >({
        path: \`/search/repositories\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://help.github.com/articles/searching-topics/)" for a detailed list of qualifiers. When searching for topics, you can get text match metadata for the topic's **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the \`text-match\` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this: \`q=ruby+is:featured\` This query searches for topics with the keyword \`ruby\` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
     *
     * @tags search
     * @name SearchTopics
     * @summary Search topics
     * @request GET:/search/topics
     */
    searchTopics: (
      query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */
        q: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          incomplete_results: boolean;
          items: TopicSearchResultItem[];
          total_count: number;
        },
        {
          documentation_url: string;
          message: string;
        }
      >({
        path: \`/search/topics\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the \`text-match\` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For example, if you're looking for a list of popular users, you might try this query: \`q=tom+repos:%3E42+followers:%3E1000\` This query searches for users with the name \`tom\`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
     *
     * @tags search
     * @name SearchUsers
     * @summary Search users
     * @request GET:/search/users
     */
    searchUsers: (
      query: {
        /**
         * Determines whether the first search result returned is the highest number of matches (\`desc\`) or lowest number of matches (\`asc\`). This parameter is ignored unless you provide \`sort\`.
         * @default "desc"
         */
        order?: "desc" | "asc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching users](https://help.github.com/articles/searching-users/)" for a detailed list of qualifiers. */
        q: string;
        /** Sorts the results of your query by number of \`followers\` or \`repositories\`, or when the person \`joined\` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
        sort?: "followers" | "repositories" | "joined";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          incomplete_results: boolean;
          items: UserSearchResultItem[];
          total_count: number;
        },
        | ValidationError
        | {
            code?: string;
            documentation_url?: string;
            message?: string;
          }
      >({
        path: \`/search/users\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  teams = {
    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
     *
     * @tags teams
     * @name TeamsGetLegacy
     * @summary Get a team (Legacy)
     * @request GET:/teams/{team_id}
     * @deprecated
     */
    teamsGetLegacy: (teamId: number, params: RequestParams = {}) =>
      this.request<TeamFull, BasicError>({
        path: \`/teams/\${teamId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint. To edit a team, the authenticated user must either be an organization owner or a team maintainer. **Note:** With nested teams, the \`privacy\` for parent teams cannot be \`secret\`.
     *
     * @tags teams
     * @name TeamsUpdateLegacy
     * @summary Update a team (Legacy)
     * @request PATCH:/teams/{team_id}
     * @deprecated
     */
    teamsUpdateLegacy: (
      teamId: number,
      data: {
        /** The description of the team. */
        description?: string;
        /** The name of the team. */
        name: string;
        /** The ID of a team to set as the parent team. */
        parent_team_id?: number | null;
        /**
         * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
         * \\* \`pull\` - team members can pull, but not push to or administer newly-added repositories.
         * \\* \`push\` - team members can pull and push, but not administer newly-added repositories.
         * \\* \`admin\` - team members can pull, push and administer newly-added repositories.
         * @default "pull"
         */
        permission?: "pull" | "push" | "admin";
        /**
         * The level of privacy this team should have. Editing teams without specifying this parameter leaves \`privacy\` intact. The options are:
         * **For a non-nested team:**
         * \\* \`secret\` - only visible to organization owners and members of this team.
         * \\* \`closed\` - visible to all members of this organization.
         * **For a parent or child team:**
         * \\* \`closed\` - visible to all members of this organization.
         */
        privacy?: "secret" | "closed";
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamFull, BasicError | ValidationError>({
        path: \`/teams/\${teamId}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint. To delete a team, the authenticated user must be an organization owner or team maintainer. If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     *
     * @tags teams
     * @name TeamsDeleteLegacy
     * @summary Delete a team (Legacy)
     * @request DELETE:/teams/{team_id}
     * @deprecated
     */
    teamsDeleteLegacy: (teamId: number, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationError>({
        path: \`/teams/\${teamId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List discussions\`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint. List all discussions on a team's page. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags teams
     * @name TeamsListDiscussionsLegacy
     * @summary List discussions (Legacy)
     * @request GET:/teams/{team_id}/discussions
     * @deprecated
     */
    teamsListDiscussionsLegacy: (
      teamId: number,
      query?: {
        /**
         * One of \`asc\` (ascending) or \`desc\` (descending).
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussion[], any>({
        path: \`/teams/\${teamId}/discussions\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`Create a discussion\`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint. Creates a new discussion post on a team's page. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     *
     * @tags teams
     * @name TeamsCreateDiscussionLegacy
     * @summary Create a discussion (Legacy)
     * @request POST:/teams/{team_id}/discussions
     * @deprecated
     */
    teamsCreateDiscussionLegacy: (
      teamId: number,
      data: {
        /** The discussion post's body text. */
        body: string;
        /**
         * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to \`true\` to create a private post.
         * @default false
         */
        private?: boolean;
        /** The discussion post's title. */
        title: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussion, any>({
        path: \`/teams/\${teamId}/discussions\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint. Get a specific discussion on a team's page. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags teams
     * @name TeamsGetDiscussionLegacy
     * @summary Get a discussion (Legacy)
     * @request GET:/teams/{team_id}/discussions/{discussion_number}
     * @deprecated
     */
    teamsGetDiscussionLegacy: (teamId: number, discussionNumber: number, params: RequestParams = {}) =>
      this.request<TeamDiscussion, any>({
        path: \`/teams/\${teamId}/discussions/\${discussionNumber}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint. Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags teams
     * @name TeamsUpdateDiscussionLegacy
     * @summary Update a discussion (Legacy)
     * @request PATCH:/teams/{team_id}/discussions/{discussion_number}
     * @deprecated
     */
    teamsUpdateDiscussionLegacy: (
      teamId: number,
      discussionNumber: number,
      data: {
        /** The discussion post's body text. */
        body?: string;
        /** The discussion post's title. */
        title?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussion, any>({
        path: \`/teams/\${teamId}/discussions/\${discussionNumber}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`Delete a discussion\`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint. Delete a discussion from a team's page. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags teams
     * @name TeamsDeleteDiscussionLegacy
     * @summary Delete a discussion (Legacy)
     * @request DELETE:/teams/{team_id}/discussions/{discussion_number}
     * @deprecated
     */
    teamsDeleteDiscussionLegacy: (teamId: number, discussionNumber: number, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/teams/\${teamId}/discussions/\${discussionNumber}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint. List all comments on a team discussion. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags teams
     * @name TeamsListDiscussionCommentsLegacy
     * @summary List discussion comments (Legacy)
     * @request GET:/teams/{team_id}/discussions/{discussion_number}/comments
     * @deprecated
     */
    teamsListDiscussionCommentsLegacy: (
      teamId: number,
      discussionNumber: number,
      query?: {
        /**
         * One of \`asc\` (ascending) or \`desc\` (descending).
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment[], any>({
        path: \`/teams/\${teamId}/discussions/\${discussionNumber}/comments\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint. Creates a new comment on a team discussion. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     *
     * @tags teams
     * @name TeamsCreateDiscussionCommentLegacy
     * @summary Create a discussion comment (Legacy)
     * @request POST:/teams/{team_id}/discussions/{discussion_number}/comments
     * @deprecated
     */
    teamsCreateDiscussionCommentLegacy: (
      teamId: number,
      discussionNumber: number,
      data: {
        /** The discussion comment's body text. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment, any>({
        path: \`/teams/\${teamId}/discussions/\${discussionNumber}/comments\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint. Get a specific comment on a team discussion. OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags teams
     * @name TeamsGetDiscussionCommentLegacy
     * @summary Get a discussion comment (Legacy)
     * @request GET:/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
     * @deprecated
     */
    teamsGetDiscussionCommentLegacy: (
      teamId: number,
      discussionNumber: number,
      commentNumber: number,
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment, any>({
        path: \`/teams/\${teamId}/discussions/\${discussionNumber}/comments/\${commentNumber}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint. Edits the body text of a discussion comment. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags teams
     * @name TeamsUpdateDiscussionCommentLegacy
     * @summary Update a discussion comment (Legacy)
     * @request PATCH:/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
     * @deprecated
     */
    teamsUpdateDiscussionCommentLegacy: (
      teamId: number,
      discussionNumber: number,
      commentNumber: number,
      data: {
        /** The discussion comment's body text. */
        body: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamDiscussionComment, any>({
        path: \`/teams/\${teamId}/discussions/\${discussionNumber}/comments/\${commentNumber}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint. Deletes a comment on a team discussion. OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags teams
     * @name TeamsDeleteDiscussionCommentLegacy
     * @summary Delete a discussion comment (Legacy)
     * @request DELETE:/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
     * @deprecated
     */
    teamsDeleteDiscussionCommentLegacy: (
      teamId: number,
      discussionNumber: number,
      commentNumber: number,
      params: RequestParams = {},
    ) =>
      this.request<void, any>({
        path: \`/teams/\${teamId}/discussions/\${discussionNumber}/comments/\${commentNumber}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List reactions for a team discussion comment\`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint. List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags reactions
     * @name ReactionsListForTeamDiscussionCommentLegacy
     * @summary List reactions for a team discussion comment (Legacy)
     * @request GET:/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
     * @deprecated
     */
    reactionsListForTeamDiscussionCommentLegacy: (
      teamId: number,
      discussionNumber: number,
      commentNumber: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction[], any>({
        path: \`/teams/\${teamId}/discussions/\${discussionNumber}/comments/\${commentNumber}/reactions\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint. Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a \`Status: 200 OK\` means that you already added the reaction type to this team discussion comment.
     *
     * @tags reactions
     * @name ReactionsCreateForTeamDiscussionCommentLegacy
     * @summary Create reaction for a team discussion comment (Legacy)
     * @request POST:/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
     * @deprecated
     */
    reactionsCreateForTeamDiscussionCommentLegacy: (
      teamId: number,
      discussionNumber: number,
      commentNumber: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction, any>({
        path: \`/teams/\${teamId}/discussions/\${discussionNumber}/comments/\${commentNumber}/reactions\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List reactions for a team discussion\`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint. List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`read:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags reactions
     * @name ReactionsListForTeamDiscussionLegacy
     * @summary List reactions for a team discussion (Legacy)
     * @request GET:/teams/{team_id}/discussions/{discussion_number}/reactions
     * @deprecated
     */
    reactionsListForTeamDiscussionLegacy: (
      teamId: number,
      discussionNumber: number,
      query?: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */
        content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction[], any>({
        path: \`/teams/\${teamId}/discussions/\${discussionNumber}/reactions\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`Create reaction for a team discussion\`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint. Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the \`write:discussion\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a \`Status: 200 OK\` means that you already added the reaction type to this team discussion.
     *
     * @tags reactions
     * @name ReactionsCreateForTeamDiscussionLegacy
     * @summary Create reaction for a team discussion (Legacy)
     * @request POST:/teams/{team_id}/discussions/{discussion_number}/reactions
     * @deprecated
     */
    reactionsCreateForTeamDiscussionLegacy: (
      teamId: number,
      discussionNumber: number,
      data: {
        /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion. */
        content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
      },
      params: RequestParams = {},
    ) =>
      this.request<Reaction, any>({
        path: \`/teams/\${teamId}/discussions/\${discussionNumber}/reactions\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List pending team invitations\`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint. The return hash contains a \`role\` field which refers to the Organization Invitation role and will be one of the following values: \`direct_member\`, \`admin\`, \`billing_manager\`, \`hiring_manager\`, or \`reinstate\`. If the invitee is not a GitHub member, the \`login\` field in the return hash will be \`null\`.
     *
     * @tags teams
     * @name TeamsListPendingInvitationsLegacy
     * @summary List pending team invitations (Legacy)
     * @request GET:/teams/{team_id}/invitations
     * @deprecated
     */
    teamsListPendingInvitationsLegacy: (
      teamId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationInvitation[], any>({
        path: \`/teams/\${teamId}/invitations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List team members\`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint. Team members will include the members of child teams.
     *
     * @tags teams
     * @name TeamsListMembersLegacy
     * @summary List team members (Legacy)
     * @request GET:/teams/{team_id}/members
     * @deprecated
     */
    teamsListMembersLegacy: (
      teamId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * Filters members returned by their role in the team. Can be one of:
         * \\* \`member\` - normal members of the team.
         * \\* \`maintainer\` - team maintainers.
         * \\* \`all\` - all members of the team.
         * @default "all"
         */
        role?: "member" | "maintainer" | "all";
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], BasicError>({
        path: \`/teams/\${teamId}/members\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description The "Get team member" endpoint (described below) is deprecated. We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships. To list members in a team, the team must be visible to the authenticated user.
     *
     * @tags teams
     * @name TeamsGetMemberLegacy
     * @summary Get team member (Legacy)
     * @request GET:/teams/{team_id}/members/{username}
     * @deprecated
     */
    teamsGetMemberLegacy: (teamId: number, username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: \`/teams/\${teamId}/members/\${username}\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description The "Add team member" endpoint (described below) is deprecated. We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams. Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization. **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)." Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     *
     * @tags teams
     * @name TeamsAddMemberLegacy
     * @summary Add team member (Legacy)
     * @request PUT:/teams/{team_id}/members/{username}
     * @deprecated
     */
    teamsAddMemberLegacy: (teamId: number, username: string, params: RequestParams = {}) =>
      this.request<
        void,
        | BasicError
        | void
        | {
            /** @example ""https://docs.github.com/rest"" */
            documentation_url?: string;
            errors?: {
              code?: string;
              field?: string;
              resource?: string;
            }[];
            message?: string;
          }
      >({
        path: \`/teams/\${teamId}/members/\${username}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description The "Remove team member" endpoint (described below) is deprecated. We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships. Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team. **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * @tags teams
     * @name TeamsRemoveMemberLegacy
     * @summary Remove team member (Legacy)
     * @request DELETE:/teams/{team_id}/members/{username}
     * @deprecated
     */
    teamsRemoveMemberLegacy: (teamId: number, username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: \`/teams/\${teamId}/members/\${username}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint. Team members will include the members of child teams. To get a user's membership with a team, the team must be visible to the authenticated user. **Note:** The \`role\` for organization owners returns as \`maintainer\`. For more information about \`maintainer\` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
     *
     * @tags teams
     * @name TeamsGetMembershipForUserLegacy
     * @summary Get team membership for a user (Legacy)
     * @request GET:/teams/{team_id}/memberships/{username}
     * @deprecated
     */
    teamsGetMembershipForUserLegacy: (teamId: number, username: string, params: RequestParams = {}) =>
      this.request<TeamMembership, BasicError>({
        path: \`/teams/\${teamId}/memberships/\${username}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint. Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer. **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)." If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner. If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     *
     * @tags teams
     * @name TeamsAddOrUpdateMembershipForUserLegacy
     * @summary Add or update team membership for a user (Legacy)
     * @request PUT:/teams/{team_id}/memberships/{username}
     * @deprecated
     */
    teamsAddOrUpdateMembershipForUserLegacy: (
      teamId: number,
      username: string,
      data: {
        /**
         * The role that this user should have in the team. Can be one of:
         * \\* \`member\` - a normal member of the team.
         * \\* \`maintainer\` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
         * @default "member"
         */
        role?: "member" | "maintainer";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        TeamMembership,
        | void
        | BasicError
        | {
            /** @example ""https://help.github.com/articles/github-and-trade-controls"" */
            documentation_url?: string;
            errors?: {
              code?: string;
              field?: string;
              resource?: string;
            }[];
            message?: string;
          }
      >({
        path: \`/teams/\${teamId}/memberships/\${username}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint. Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team. **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * @tags teams
     * @name TeamsRemoveMembershipForUserLegacy
     * @summary Remove team membership for a user (Legacy)
     * @request DELETE:/teams/{team_id}/memberships/{username}
     * @deprecated
     */
    teamsRemoveMembershipForUserLegacy: (teamId: number, username: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: \`/teams/\${teamId}/memberships/\${username}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List team projects\`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint. Lists the organization projects for a team.
     *
     * @tags teams
     * @name TeamsListProjectsLegacy
     * @summary List team projects (Legacy)
     * @request GET:/teams/{team_id}/projects
     * @deprecated
     */
    teamsListProjectsLegacy: (
      teamId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        TeamProject[],
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/teams/\${teamId}/projects\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint. Checks whether a team has \`read\`, \`write\`, or \`admin\` permissions for an organization project. The response includes projects inherited from a parent team.
     *
     * @tags teams
     * @name TeamsCheckPermissionsForProjectLegacy
     * @summary Check team permissions for a project (Legacy)
     * @request GET:/teams/{team_id}/projects/{project_id}
     * @deprecated
     */
    teamsCheckPermissionsForProjectLegacy: (teamId: number, projectId: number, params: RequestParams = {}) =>
      this.request<
        TeamProject,
        void | {
          documentation_url: string;
          message: string;
        }
      >({
        path: \`/teams/\${teamId}/projects/\${projectId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint. Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have \`admin\` permissions for the project. The project and team must be part of the same organization.
     *
     * @tags teams
     * @name TeamsAddOrUpdateProjectPermissionsLegacy
     * @summary Add or update team project permissions (Legacy)
     * @request PUT:/teams/{team_id}/projects/{project_id}
     * @deprecated
     */
    teamsAddOrUpdateProjectPermissionsLegacy: (
      teamId: number,
      projectId: number,
      data: {
        /**
         * The permission to grant to the team for this project. Can be one of:
         * \\* \`read\` - team members can read, but not write to or administer this project.
         * \\* \`write\` - team members can read and write, but not administer this project.
         * \\* \`admin\` - team members can read, write and administer this project.
         * Default: the team's \`permission\` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
         */
        permission?: "read" | "write" | "admin";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        void,
        | {
            documentation_url?: string;
            message?: string;
          }
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/teams/\${teamId}/projects/\${projectId}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint. Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have \`read\` access to both the team and project, or \`admin\` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
     *
     * @tags teams
     * @name TeamsRemoveProjectLegacy
     * @summary Remove a project from a team (Legacy)
     * @request DELETE:/teams/{team_id}/projects/{project_id}
     * @deprecated
     */
    teamsRemoveProjectLegacy: (teamId: number, projectId: number, params: RequestParams = {}) =>
      this.request<
        void,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/teams/\${teamId}/projects/\${projectId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
     *
     * @tags teams
     * @name TeamsListReposLegacy
     * @summary List team repositories (Legacy)
     * @request GET:/teams/{team_id}/repos
     * @deprecated
     */
    teamsListReposLegacy: (
      teamId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], BasicError>({
        path: \`/teams/\${teamId}/repos\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description **Note**: Repositories inherited through a parent team will also be checked. **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint. You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`Accept\` header:
     *
     * @tags teams
     * @name TeamsCheckPermissionsForRepoLegacy
     * @summary Check team permissions for a repository (Legacy)
     * @request GET:/teams/{team_id}/repos/{owner}/{repo}
     * @deprecated
     */
    teamsCheckPermissionsForRepoLegacy: (teamId: number, owner: string, repo: string, params: RequestParams = {}) =>
      this.request<TeamRepository, void>({
        path: \`/teams/\${teamId}/repos/\${owner}/\${repo}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint. To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a \`422 Unprocessable Entity\` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     *
     * @tags teams
     * @name TeamsAddOrUpdateRepoPermissionsLegacy
     * @summary Add or update team repository permissions (Legacy)
     * @request PUT:/teams/{team_id}/repos/{owner}/{repo}
     * @deprecated
     */
    teamsAddOrUpdateRepoPermissionsLegacy: (
      teamId: number,
      owner: string,
      repo: string,
      data: {
        /**
         * The permission to grant the team on this repository. Can be one of:
         * \\* \`pull\` - team members can pull, but not push to or administer this repository.
         * \\* \`push\` - team members can pull and push, but not administer this repository.
         * \\* \`admin\` - team members can pull, push and administer this repository.
         *
         * If no permission is specified, the team's \`permission\` attribute will be used to determine what permission to grant the team on this repository.
         */
        permission?: "pull" | "push" | "admin";
      },
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | ValidationError>({
        path: \`/teams/\${teamId}/repos/\${owner}/\${repo}\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint. If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
     *
     * @tags teams
     * @name TeamsRemoveRepoLegacy
     * @summary Remove a repository from a team (Legacy)
     * @request DELETE:/teams/{team_id}/repos/{owner}/{repo}
     * @deprecated
     */
    teamsRemoveRepoLegacy: (teamId: number, owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/teams/\${teamId}/repos/\${owner}/\${repo}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List IdP groups for a team\`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint. Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. List IdP groups connected to a team on GitHub.
     *
     * @tags teams
     * @name TeamsListIdpGroupsForLegacy
     * @summary List IdP groups for a team (Legacy)
     * @request GET:/teams/{team_id}/team-sync/group-mappings
     * @deprecated
     */
    teamsListIdpGroupsForLegacy: (teamId: number, params: RequestParams = {}) =>
      this.request<GroupMapping, BasicError>({
        path: \`/teams/\${teamId}/team-sync/group-mappings\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`Create or update IdP group connections\`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint. Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty \`groups\` array will remove all connections for a team.
     *
     * @tags teams
     * @name TeamsCreateOrUpdateIdpGroupConnectionsLegacy
     * @summary Create or update IdP group connections (Legacy)
     * @request PATCH:/teams/{team_id}/team-sync/group-mappings
     * @deprecated
     */
    teamsCreateOrUpdateIdpGroupConnectionsLegacy: (
      teamId: number,
      data: {
        /** The IdP groups you want to connect to a GitHub team. When updating, the new \`groups\` object will replace the original one. You must include any existing groups that you don't want to remove. */
        groups: {
          /** @example ""moar cheese pleese"" */
          description?: string;
          /** Description of the IdP group. */
          group_description: string;
          /** ID of the IdP group. */
          group_id: string;
          /** Name of the IdP group. */
          group_name: string;
          /** @example ""caceab43fc9ffa20081c"" */
          id?: string;
          /** @example ""external-team-6c13e7288ef7"" */
          name?: string;
        }[];
        /** @example ""I am not a timestamp"" */
        synced_at?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GroupMapping, BasicError | ValidationError>({
        path: \`/teams/\${teamId}/team-sync/group-mappings\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [\`List child teams\`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
     *
     * @tags teams
     * @name TeamsListChildLegacy
     * @summary List child teams (Legacy)
     * @request GET:/teams/{team_id}/teams
     * @deprecated
     */
    teamsListChildLegacy: (
      teamId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Team[], BasicError | ValidationError>({
        path: \`/teams/\${teamId}/teams\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  user = {
    /**
     * @description If the authenticated user is authenticated through basic authentication or OAuth with the \`user\` scope, then the response lists public and private profile information. If the authenticated user is authenticated through OAuth without the \`user\` scope, then the response lists only public profile information.
     *
     * @tags users
     * @name UsersGetAuthenticated
     * @summary Get the authenticated user
     * @request GET:/user
     */
    usersGetAuthenticated: (params: RequestParams = {}) =>
      this.request<PrivateUser | PublicUser, BasicError>({
        path: \`/user\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description **Note:** If your email is set to private and you send an \`email\` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
     *
     * @tags users
     * @name UsersUpdateAuthenticated
     * @summary Update the authenticated user
     * @request PATCH:/user
     */
    usersUpdateAuthenticated: (
      data: {
        /** The new short biography of the user. */
        bio?: string;
        /**
         * The new blog URL of the user.
         * @example "blog.example.com"
         */
        blog?: string;
        /**
         * The new company of the user.
         * @example "Acme corporation"
         */
        company?: string;
        /**
         * The publicly visible email address of the user.
         * @example "omar@example.com"
         */
        email?: string;
        /** The new hiring availability of the user. */
        hireable?: boolean;
        /**
         * The new location of the user.
         * @example "Berlin, Germany"
         */
        location?: string;
        /**
         * The new name of the user.
         * @example "Omar Jahandar"
         */
        name?: string;
        /**
         * The new Twitter username of the user.
         * @example "therealomarj"
         */
        twitter_username?: string | null;
      },
      params: RequestParams = {},
    ) =>
      this.request<PrivateUser, BasicError | ValidationError>({
        path: \`/user\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description List the users you've blocked on your personal account.
     *
     * @tags users
     * @name UsersListBlockedByAuthenticated
     * @summary List users blocked by the authenticated user
     * @request GET:/user/blocks
     */
    usersListBlockedByAuthenticated: (params: RequestParams = {}) =>
      this.request<
        SimpleUser[],
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/user/blocks\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags users
     * @name UsersCheckBlocked
     * @summary Check if a user is blocked by the authenticated user
     * @request GET:/user/blocks/{username}
     */
    usersCheckBlocked: (username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/blocks/\${username}\`,
        method: "GET",
        ...params,
      }),

    /**
     * No description
     *
     * @tags users
     * @name UsersBlock
     * @summary Block a user
     * @request PUT:/user/blocks/{username}
     */
    usersBlock: (username: string, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationError>({
        path: \`/user/blocks/\${username}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * No description
     *
     * @tags users
     * @name UsersUnblock
     * @summary Unblock a user
     * @request DELETE:/user/blocks/{username}
     */
    usersUnblock: (username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/blocks/\${username}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Sets the visibility for your primary email addresses.
     *
     * @tags users
     * @name UsersSetPrimaryEmailVisibilityForAuthenticated
     * @summary Set primary email visibility for the authenticated user
     * @request PATCH:/user/email/visibility
     */
    usersSetPrimaryEmailVisibilityForAuthenticated: (
      data: {
        /**
         * An email address associated with the GitHub user account to manage.
         * @example "org@example.com"
         */
        email: string;
        /** Denotes whether an email is publically visible. */
        visibility: "public" | "private";
      },
      params: RequestParams = {},
    ) =>
      this.request<Email[], BasicError | ValidationError>({
        path: \`/user/email/visibility\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the \`user:email\` scope.
     *
     * @tags users
     * @name UsersListEmailsForAuthenticated
     * @summary List email addresses for the authenticated user
     * @request GET:/user/emails
     */
    usersListEmailsForAuthenticated: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Email[], BasicError>({
        path: \`/user/emails\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description This endpoint is accessible with the \`user\` scope.
     *
     * @tags users
     * @name UsersAddEmailForAuthenticated
     * @summary Add an email address for the authenticated user
     * @request POST:/user/emails
     */
    usersAddEmailForAuthenticated: (
      data:
        | {
            /**
             * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an \`array\` of emails addresses directly, but we recommend that you pass an object using the \`emails\` key.
             * @example []
             */
            emails: string[];
          }
        | string[]
        | string,
      params: RequestParams = {},
    ) =>
      this.request<Email[], BasicError | ValidationError>({
        path: \`/user/emails\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description This endpoint is accessible with the \`user\` scope.
     *
     * @tags users
     * @name UsersDeleteEmailForAuthenticated
     * @summary Delete an email address for the authenticated user
     * @request DELETE:/user/emails
     */
    usersDeleteEmailForAuthenticated: (
      data:
        | {
            /** Email addresses associated with the GitHub user account. */
            emails: string[];
          }
        | string[]
        | string,
      params: RequestParams = {},
    ) =>
      this.request<void, BasicError | ValidationError>({
        path: \`/user/emails\`,
        method: "DELETE",
        body: data,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Lists the people following the authenticated user.
     *
     * @tags users
     * @name UsersListFollowersForAuthenticatedUser
     * @summary List followers of the authenticated user
     * @request GET:/user/followers
     */
    usersListFollowersForAuthenticatedUser: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], BasicError>({
        path: \`/user/followers\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the people who the authenticated user follows.
     *
     * @tags users
     * @name UsersListFollowedByAuthenticated
     * @summary List the people the authenticated user follows
     * @request GET:/user/following
     */
    usersListFollowedByAuthenticated: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], BasicError>({
        path: \`/user/following\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags users
     * @name UsersCheckPersonIsFollowedByAuthenticated
     * @summary Check if a person is followed by the authenticated user
     * @request GET:/user/following/{username}
     */
    usersCheckPersonIsFollowedByAuthenticated: (username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/following/\${username}\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)." Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the \`user:follow\` scope.
     *
     * @tags users
     * @name UsersFollow
     * @summary Follow a user
     * @request PUT:/user/following/{username}
     */
    usersFollow: (username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/following/\${username}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the \`user:follow\` scope.
     *
     * @tags users
     * @name UsersUnfollow
     * @summary Unfollow a user
     * @request DELETE:/user/following/{username}
     */
    usersUnfollow: (username: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/following/\${username}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least \`read:gpg_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags users
     * @name UsersListGpgKeysForAuthenticated
     * @summary List GPG keys for the authenticated user
     * @request GET:/user/gpg_keys
     */
    usersListGpgKeysForAuthenticated: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<GpgKey[], BasicError>({
        path: \`/user/gpg_keys\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least \`write:gpg_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags users
     * @name UsersCreateGpgKeyForAuthenticated
     * @summary Create a GPG key for the authenticated user
     * @request POST:/user/gpg_keys
     */
    usersCreateGpgKeyForAuthenticated: (
      data: {
        /** A GPG key in ASCII-armored format. */
        armored_public_key: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<GpgKey, BasicError | ValidationError>({
        path: \`/user/gpg_keys\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least \`read:gpg_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags users
     * @name UsersGetGpgKeyForAuthenticated
     * @summary Get a GPG key for the authenticated user
     * @request GET:/user/gpg_keys/{gpg_key_id}
     */
    usersGetGpgKeyForAuthenticated: (gpgKeyId: number, params: RequestParams = {}) =>
      this.request<GpgKey, BasicError>({
        path: \`/user/gpg_keys/\${gpgKeyId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least \`admin:gpg_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags users
     * @name UsersDeleteGpgKeyForAuthenticated
     * @summary Delete a GPG key for the authenticated user
     * @request DELETE:/user/gpg_keys/{gpg_key_id}
     */
    usersDeleteGpgKeyForAuthenticated: (gpgKeyId: number, params: RequestParams = {}) =>
      this.request<void, BasicError | ValidationError>({
        path: \`/user/gpg_keys/\${gpgKeyId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists installations of your GitHub App that the authenticated user has explicit permission (\`:read\`, \`:write\`, or \`:admin\`) to access. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership. You can find the permissions for the installation under the \`permissions\` key.
     *
     * @tags apps
     * @name AppsListInstallationsForAuthenticatedUser
     * @summary List app installations accessible to the user access token
     * @request GET:/user/installations
     */
    appsListInstallationsForAuthenticatedUser: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          installations: Installation[];
          total_count: number;
        },
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
      >({
        path: \`/user/installations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List repositories that the authenticated user has explicit permission (\`:read\`, \`:write\`, or \`:admin\`) to access for an installation. The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. The access the user has to each repository is included in the hash under the \`permissions\` key.
     *
     * @tags apps
     * @name AppsListInstallationReposForAuthenticatedUser
     * @summary List repositories accessible to the user access token
     * @request GET:/user/installations/{installation_id}/repositories
     */
    appsListInstallationReposForAuthenticatedUser: (
      installationId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          repositories: Repository[];
          repository_selection?: string;
          total_count: number;
        },
        BasicError
      >({
        path: \`/user/installations/\${installationId}/repositories\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Add a single repository to an installation. The authenticated user must have admin access to the repository. You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
     *
     * @tags apps
     * @name AppsAddRepoToInstallation
     * @summary Add a repository to an app installation
     * @request PUT:/user/installations/{installation_id}/repositories/{repository_id}
     */
    appsAddRepoToInstallation: (installationId: number, repositoryId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/installations/\${installationId}/repositories/\${repositoryId}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * @description Remove a single repository from an installation. The authenticated user must have admin access to the repository. You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
     *
     * @tags apps
     * @name AppsRemoveRepoFromInstallation
     * @summary Remove a repository from an app installation
     * @request DELETE:/user/installations/{installation_id}/repositories/{repository_id}
     */
    appsRemoveRepoFromInstallation: (installationId: number, repositoryId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/installations/\${installationId}/repositories/\${repositoryId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Shows which type of GitHub user can interact with your public repositories and when the restriction expires. If there are no restrictions, you will see an empty response.
     *
     * @tags interactions
     * @name InteractionsGetRestrictionsForAuthenticatedUser
     * @summary Get interaction restrictions for your public repositories
     * @request GET:/user/interaction-limits
     */
    interactionsGetRestrictionsForAuthenticatedUser: (params: RequestParams = {}) =>
      this.request<InteractionLimitResponse, any>({
        path: \`/user/interaction-limits\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
     *
     * @tags interactions
     * @name InteractionsSetRestrictionsForAuthenticatedUser
     * @summary Set interaction restrictions for your public repositories
     * @request PUT:/user/interaction-limits
     */
    interactionsSetRestrictionsForAuthenticatedUser: (data: InteractionLimit, params: RequestParams = {}) =>
      this.request<InteractionLimitResponse, ValidationError>({
        path: \`/user/interaction-limits\`,
        method: "PUT",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Removes any interaction restrictions from your public repositories.
     *
     * @tags interactions
     * @name InteractionsRemoveRestrictionsForAuthenticatedUser
     * @summary Remove interaction restrictions from your public repositories
     * @request DELETE:/user/interaction-limits
     */
    interactionsRemoveRestrictionsForAuthenticatedUser: (params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/user/interaction-limits\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description List issues across owned and member repositories assigned to the authenticated user. **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the \`pull_request\` key. Be aware that the \`id\` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
     *
     * @tags issues
     * @name IssuesListForAuthenticatedUser
     * @summary List user account issues assigned to the authenticated user
     * @request GET:/user/issues
     */
    issuesListForAuthenticatedUser: (
      query?: {
        /**
         * One of \`asc\` (ascending) or \`desc\` (descending).
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Indicates which sorts of issues to return. Can be one of:
         * \\* \`assigned\`: Issues assigned to you
         * \\* \`created\`: Issues created by you
         * \\* \`mentioned\`: Issues mentioning you
         * \\* \`subscribed\`: Issues you're subscribed to updates for
         * \\* \`all\`: All issues the authenticated user can see, regardless of participation or creation
         * @default "assigned"
         */
        filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all";
        /** A list of comma separated label names. Example: \`bug,ui,@high\` */
        labels?: string;
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
        /**
         * What to sort results by. Can be either \`created\`, \`updated\`, \`comments\`.
         * @default "created"
         */
        sort?: "created" | "updated" | "comments";
        /**
         * Indicates the state of the issues to return. Can be either \`open\`, \`closed\`, or \`all\`.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
      },
      params: RequestParams = {},
    ) =>
      this.request<Issue[], BasicError>({
        path: \`/user/issues\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least \`read:public_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags users
     * @name UsersListPublicSshKeysForAuthenticated
     * @summary List public SSH keys for the authenticated user
     * @request GET:/user/keys
     */
    usersListPublicSshKeysForAuthenticated: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Key[], BasicError>({
        path: \`/user/keys\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least \`write:public_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags users
     * @name UsersCreatePublicSshKeyForAuthenticated
     * @summary Create a public SSH key for the authenticated user
     * @request POST:/user/keys
     */
    usersCreatePublicSshKeyForAuthenticated: (
      data: {
        /**
         * The public SSH key to add to your GitHub account.
         * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521)
         */
        key: string;
        /**
         * A descriptive name for the new key.
         * @example "Personal MacBook Air"
         */
        title?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<Key, BasicError | ValidationError>({
        path: \`/user/keys\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least \`read:public_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags users
     * @name UsersGetPublicSshKeyForAuthenticated
     * @summary Get a public SSH key for the authenticated user
     * @request GET:/user/keys/{key_id}
     */
    usersGetPublicSshKeyForAuthenticated: (keyId: number, params: RequestParams = {}) =>
      this.request<Key, BasicError>({
        path: \`/user/keys/\${keyId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least \`admin:public_key\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @tags users
     * @name UsersDeletePublicSshKeyForAuthenticated
     * @summary Delete a public SSH key for the authenticated user
     * @request DELETE:/user/keys/{key_id}
     */
    usersDeletePublicSshKeyForAuthenticated: (keyId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/keys/\${keyId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
     *
     * @tags apps
     * @name AppsListSubscriptionsForAuthenticatedUser
     * @summary List subscriptions for the authenticated user
     * @request GET:/user/marketplace_purchases
     */
    appsListSubscriptionsForAuthenticatedUser: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<UserMarketplacePurchase[], BasicError>({
        path: \`/user/marketplace_purchases\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
     *
     * @tags apps
     * @name AppsListSubscriptionsForAuthenticatedUserStubbed
     * @summary List subscriptions for the authenticated user (stubbed)
     * @request GET:/user/marketplace_purchases/stubbed
     */
    appsListSubscriptionsForAuthenticatedUserStubbed: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<UserMarketplacePurchase[], BasicError>({
        path: \`/user/marketplace_purchases/stubbed\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags orgs
     * @name OrgsListMembershipsForAuthenticatedUser
     * @summary List organization memberships for the authenticated user
     * @request GET:/user/memberships/orgs
     */
    orgsListMembershipsForAuthenticatedUser: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Indicates the state of the memberships to return. Can be either \`active\` or \`pending\`. If not specified, the API returns both active and pending memberships. */
        state?: "active" | "pending";
      },
      params: RequestParams = {},
    ) =>
      this.request<OrgMembership[], BasicError | ValidationError>({
        path: \`/user/memberships/orgs\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags orgs
     * @name OrgsGetMembershipForAuthenticatedUser
     * @summary Get an organization membership for the authenticated user
     * @request GET:/user/memberships/orgs/{org}
     */
    orgsGetMembershipForAuthenticatedUser: (org: string, params: RequestParams = {}) =>
      this.request<OrgMembership, BasicError>({
        path: \`/user/memberships/orgs/\${org}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags orgs
     * @name OrgsUpdateMembershipForAuthenticatedUser
     * @summary Update an organization membership for the authenticated user
     * @request PATCH:/user/memberships/orgs/{org}
     */
    orgsUpdateMembershipForAuthenticatedUser: (
      org: string,
      data: {
        /** The state that the membership should be in. Only \`"active"\` will be accepted. */
        state: "active";
      },
      params: RequestParams = {},
    ) =>
      this.request<OrgMembership, BasicError | ValidationError>({
        path: \`/user/memberships/orgs/\${org}\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists all migrations a user has started.
     *
     * @tags migrations
     * @name MigrationsListForAuthenticatedUser
     * @summary List user migrations
     * @request GET:/user/migrations
     */
    migrationsListForAuthenticatedUser: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Migration[], BasicError>({
        path: \`/user/migrations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Initiates the generation of a user migration archive.
     *
     * @tags migrations
     * @name MigrationsStartForAuthenticatedUser
     * @summary Start a user migration
     * @request POST:/user/migrations
     */
    migrationsStartForAuthenticatedUser: (
      data: {
        /**
         * Exclude attributes from the API response to improve performance
         * @example ["repositories"]
         */
        exclude?: "repositories"[];
        /**
         * Do not include attachments in the migration
         * @example true
         */
        exclude_attachments?: boolean;
        /**
         * Lock the repositories being migrated at the start of the migration
         * @example true
         */
        lock_repositories?: boolean;
        repositories: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Migration, BasicError | ValidationError>({
        path: \`/user/migrations\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Fetches a single user migration. The response includes the \`state\` of the migration, which can be one of the following values: *   \`pending\` - the migration hasn't started yet. *   \`exporting\` - the migration is in progress. *   \`exported\` - the migration finished successfully. *   \`failed\` - the migration failed. Once the migration has been \`exported\` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
     *
     * @tags migrations
     * @name MigrationsGetStatusForAuthenticatedUser
     * @summary Get a user migration status
     * @request GET:/user/migrations/{migration_id}
     */
    migrationsGetStatusForAuthenticatedUser: (
      migrationId: number,
      query?: {
        exclude?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Migration, BasicError>({
        path: \`/user/migrations/\${migrationId}\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Fetches the URL to download the migration archive as a \`tar.gz\` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects: *   attachments *   bases *   commit\\_comments *   issue\\_comments *   issue\\_events *   issues *   milestones *   organizations *   projects *   protected\\_branches *   pull\\_request\\_reviews *   pull\\_requests *   releases *   repositories *   review\\_comments *   schema *   users The archive will also contain an \`attachments\` directory that includes all attachment files uploaded to GitHub.com and a \`repositories\` directory that contains the repository's Git data.
     *
     * @tags migrations
     * @name MigrationsGetArchiveForAuthenticatedUser
     * @summary Download a user migration archive
     * @request GET:/user/migrations/{migration_id}/archive
     */
    migrationsGetArchiveForAuthenticatedUser: (migrationId: number, params: RequestParams = {}) =>
      this.request<any, void | BasicError>({
        path: \`/user/migrations/\${migrationId}/archive\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
     *
     * @tags migrations
     * @name MigrationsDeleteArchiveForAuthenticatedUser
     * @summary Delete a user migration archive
     * @request DELETE:/user/migrations/{migration_id}/archive
     */
    migrationsDeleteArchiveForAuthenticatedUser: (migrationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/migrations/\${migrationId}/archive\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of \`404 Not Found\` if the repository is not locked.
     *
     * @tags migrations
     * @name MigrationsUnlockRepoForAuthenticatedUser
     * @summary Unlock a user repository
     * @request DELETE:/user/migrations/{migration_id}/repos/{repo_name}/lock
     */
    migrationsUnlockRepoForAuthenticatedUser: (migrationId: number, repoName: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/migrations/\${migrationId}/repos/\${repoName}/lock\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists all the repositories for this user migration.
     *
     * @tags migrations
     * @name MigrationsListReposForUser
     * @summary List repositories for a user migration
     * @request GET:/user/migrations/{migration_id}/repositories
     */
    migrationsListReposForUser: (
      migrationId: number,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], BasicError>({
        path: \`/user/migrations/\${migrationId}/repositories\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List organizations for the authenticated user. **OAuth scope requirements** This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with \`read:org\` scope, you can publicize your organization membership with \`user\` scope, etc.). Therefore, this API requires at least \`user\` or \`read:org\` scope. OAuth requests with insufficient scope receive a \`403 Forbidden\` response.
     *
     * @tags orgs
     * @name OrgsListForAuthenticatedUser
     * @summary List organizations for the authenticated user
     * @request GET:/user/orgs
     */
    orgsListForAuthenticatedUser: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationSimple[], BasicError>({
        path: \`/user/orgs\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags projects
     * @name ProjectsCreateForAuthenticatedUser
     * @summary Create a user project
     * @request POST:/user/projects
     */
    projectsCreateForAuthenticatedUser: (
      data: {
        /**
         * Body of the project
         * @example "This project represents the sprint of the first week in January"
         */
        body?: string | null;
        /**
         * Name of the project
         * @example "Week One Sprint"
         */
        name: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Project,
        | BasicError
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationErrorSimple
      >({
        path: \`/user/projects\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the \`user:email\` scope.
     *
     * @tags users
     * @name UsersListPublicEmailsForAuthenticated
     * @summary List public email addresses for the authenticated user
     * @request GET:/user/public_emails
     */
    usersListPublicEmailsForAuthenticated: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Email[], BasicError>({
        path: \`/user/public_emails\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists repositories that the authenticated user has explicit permission (\`:read\`, \`:write\`, or \`:admin\`) to access. The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     *
     * @tags repos
     * @name ReposListForAuthenticatedUser
     * @summary List repositories for the authenticated user
     * @request GET:/user/repos
     */
    reposListForAuthenticatedUser: (
      query?: {
        /**
         * Comma-separated list of values. Can include:
         * \\* \`owner\`: Repositories that are owned by the authenticated user.
         * \\* \`collaborator\`: Repositories that the user has been added to as a collaborator.
         * \\* \`organization_member\`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
         * @default "owner,collaborator,organization_member"
         */
        affiliation?: string;
        /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        before?: string;
        /** Can be one of \`asc\` or \`desc\`. Default: \`asc\` when using \`full_name\`, otherwise \`desc\` */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
        /**
         * Can be one of \`created\`, \`updated\`, \`pushed\`, \`full_name\`.
         * @default "full_name"
         */
        sort?: "created" | "updated" | "pushed" | "full_name";
        /**
         * Can be one of \`all\`, \`owner\`, \`public\`, \`private\`, \`member\`. Default: \`all\`
         *
         * Will cause a \`422\` error if used in the same request as **visibility** or **affiliation**. Will cause a \`422\` error if used in the same request as **visibility** or **affiliation**.
         * @default "all"
         */
        type?: "all" | "owner" | "public" | "private" | "member";
        /**
         * Can be one of \`all\`, \`public\`, or \`private\`.
         * @default "all"
         */
        visibility?: "all" | "public" | "private";
      },
      params: RequestParams = {},
    ) =>
      this.request<Repository[], BasicError | ValidationError>({
        path: \`/user/repos\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new repository for the authenticated user. **OAuth scope requirements** When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include: *   \`public_repo\` scope or \`repo\` scope to create a public repository *   \`repo\` scope to create a private repository
     *
     * @tags repos
     * @name ReposCreateForAuthenticatedUser
     * @summary Create a repository for the authenticated user
     * @request POST:/user/repos
     */
    reposCreateForAuthenticatedUser: (
      data: {
        /**
         * Whether to allow merge commits for pull requests.
         * @default true
         * @example true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @default true
         * @example true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @default true
         * @example true
         */
        allow_squash_merge?: boolean;
        /**
         * Whether the repository is initialized with a minimal README.
         * @default false
         */
        auto_init?: boolean;
        /**
         * Whether to delete head branches when pull requests are merged
         * @default false
         * @example false
         */
        delete_branch_on_merge?: boolean;
        /** A short description of the repository. */
        description?: string;
        /**
         * The desired language or platform to apply to the .gitignore.
         * @example "Haskell"
         */
        gitignore_template?: string;
        /**
         * Whether downloads are enabled.
         * @default true
         * @example true
         */
        has_downloads?: boolean;
        /**
         * Whether issues are enabled.
         * @default true
         * @example true
         */
        has_issues?: boolean;
        /**
         * Whether projects are enabled.
         * @default true
         * @example true
         */
        has_projects?: boolean;
        /**
         * Whether the wiki is enabled.
         * @default true
         * @example true
         */
        has_wiki?: boolean;
        /** A URL with more information about the repository. */
        homepage?: string;
        /**
         * Whether this repository acts as a template that can be used to generate new repositories.
         * @default false
         * @example true
         */
        is_template?: boolean;
        /**
         * The license keyword of the open source license for this repository.
         * @example "mit"
         */
        license_template?: string;
        /**
         * The name of the repository.
         * @example "Team Environment"
         */
        name: string;
        /**
         * Whether the repository is private or public.
         * @default false
         */
        private?: boolean;
        /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
        team_id?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Repository, BasicError | ValidationError>({
        path: \`/user/repos\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
     *
     * @tags repos
     * @name ReposListInvitationsForAuthenticatedUser
     * @summary List repository invitations for the authenticated user
     * @request GET:/user/repository_invitations
     */
    reposListInvitationsForAuthenticatedUser: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<RepositoryInvitation[], BasicError>({
        path: \`/user/repository_invitations\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposAcceptInvitation
     * @summary Accept a repository invitation
     * @request PATCH:/user/repository_invitations/{invitation_id}
     */
    reposAcceptInvitation: (invitationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/repository_invitations/\${invitationId}\`,
        method: "PATCH",
        ...params,
      }),

    /**
     * No description
     *
     * @tags repos
     * @name ReposDeclineInvitation
     * @summary Decline a repository invitation
     * @request DELETE:/user/repository_invitations/{invitation_id}
     */
    reposDeclineInvitation: (invitationId: number, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/repository_invitations/\${invitationId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists repositories the authenticated user has starred. You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`Accept\` header:
     *
     * @tags activity
     * @name ActivityListReposStarredByAuthenticatedUser
     * @summary List repositories starred by the authenticated user
     * @request GET:/user/starred
     */
    activityListReposStarredByAuthenticatedUser: (
      query?: {
        /**
         * One of \`asc\` (ascending) or \`desc\` (descending).
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * One of \`created\` (when the repository was starred) or \`updated\` (when it was last pushed to).
         * @default "created"
         */
        sort?: "created" | "updated";
      },
      params: RequestParams = {},
    ) =>
      this.request<Repository[], BasicError>({
        path: \`/user/starred\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags activity
     * @name ActivityCheckRepoIsStarredByAuthenticatedUser
     * @summary Check if a repository is starred by the authenticated user
     * @request GET:/user/starred/{owner}/{repo}
     */
    activityCheckRepoIsStarredByAuthenticatedUser: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/starred/\${owner}/\${repo}\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Note that you'll need to set \`Content-Length\` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     *
     * @tags activity
     * @name ActivityStarRepoForAuthenticatedUser
     * @summary Star a repository for the authenticated user
     * @request PUT:/user/starred/{owner}/{repo}
     */
    activityStarRepoForAuthenticatedUser: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/starred/\${owner}/\${repo}\`,
        method: "PUT",
        ...params,
      }),

    /**
     * No description
     *
     * @tags activity
     * @name ActivityUnstarRepoForAuthenticatedUser
     * @summary Unstar a repository for the authenticated user
     * @request DELETE:/user/starred/{owner}/{repo}
     */
    activityUnstarRepoForAuthenticatedUser: (owner: string, repo: string, params: RequestParams = {}) =>
      this.request<void, BasicError>({
        path: \`/user/starred/\${owner}/\${repo}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * @description Lists repositories the authenticated user is watching.
     *
     * @tags activity
     * @name ActivityListWatchedReposForAuthenticatedUser
     * @summary List repositories watched by the authenticated user
     * @request GET:/user/subscriptions
     */
    activityListWatchedReposForAuthenticatedUser: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], BasicError>({
        path: \`/user/subscriptions\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List all of the teams across all of the organizations to which the authenticated user belongs. This method requires \`user\`, \`repo\`, or \`read:org\` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
     *
     * @tags teams
     * @name TeamsListForAuthenticatedUser
     * @summary List teams for the authenticated user
     * @request GET:/user/teams
     */
    teamsListForAuthenticatedUser: (
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<TeamFull[], BasicError>({
        path: \`/user/teams\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  users = {
    /**
     * @description Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts. Note: Pagination is powered exclusively by the \`since\` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
     *
     * @tags users
     * @name UsersList
     * @summary List users
     * @request GET:/users
     */
    usersList: (
      query?: {
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** A user ID. Only return users with an ID greater than this ID. */
        since?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: \`/users\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Provides publicly available information about someone with a GitHub account. GitHub Apps with the \`Plan\` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below" The \`email\` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for \`email\`, then it will have a value of \`null\`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication). The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
     *
     * @tags users
     * @name UsersGetByUsername
     * @summary Get a user
     * @request GET:/users/{username}
     */
    usersGetByUsername: (username: string, params: RequestParams = {}) =>
      this.request<PrivateUser | PublicUser, BasicError>({
        path: \`/users/\${username}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
     *
     * @tags activity
     * @name ActivityListEventsForAuthenticatedUser
     * @summary List events for the authenticated user
     * @request GET:/users/{username}/events
     */
    activityListEventsForAuthenticatedUser: (
      username: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], any>({
        path: \`/users/\${username}/events\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description This is the user's organization dashboard. You must be authenticated as the user to view this.
     *
     * @tags activity
     * @name ActivityListOrgEventsForAuthenticatedUser
     * @summary List organization events for the authenticated user
     * @request GET:/users/{username}/events/orgs/{org}
     */
    activityListOrgEventsForAuthenticatedUser: (
      username: string,
      org: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], any>({
        path: \`/users/\${username}/events/orgs/\${org}\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags activity
     * @name ActivityListPublicEventsForUser
     * @summary List public events for a user
     * @request GET:/users/{username}/events/public
     */
    activityListPublicEventsForUser: (
      username: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], any>({
        path: \`/users/\${username}/events/public\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the people following the specified user.
     *
     * @tags users
     * @name UsersListFollowersForUser
     * @summary List followers of a user
     * @request GET:/users/{username}/followers
     */
    usersListFollowersForUser: (
      username: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: \`/users/\${username}/followers\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the people who the specified user follows.
     *
     * @tags users
     * @name UsersListFollowingForUser
     * @summary List the people a user follows
     * @request GET:/users/{username}/following
     */
    usersListFollowingForUser: (
      username: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<SimpleUser[], any>({
        path: \`/users/\${username}/following\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags users
     * @name UsersCheckFollowingForUser
     * @summary Check if a user follows another user
     * @request GET:/users/{username}/following/{target_user}
     */
    usersCheckFollowingForUser: (username: string, targetUser: string, params: RequestParams = {}) =>
      this.request<void, void>({
        path: \`/users/\${username}/following/\${targetUser}\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description Lists public gists for the specified user:
     *
     * @tags gists
     * @name GistsListForUser
     * @summary List gists for a user
     * @request GET:/users/{username}/gists
     */
    gistsListForUser: (
      username: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: \`YYYY-MM-DDTHH:MM:SSZ\`. */
        since?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<BaseGist[], ValidationError>({
        path: \`/users/\${username}/gists\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the GPG keys for a user. This information is accessible by anyone.
     *
     * @tags users
     * @name UsersListGpgKeysForUser
     * @summary List GPG keys for a user
     * @request GET:/users/{username}/gpg_keys
     */
    usersListGpgKeysForUser: (
      username: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<GpgKey[], any>({
        path: \`/users/\${username}/gpg_keys\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Provides hovercard information when authenticated through basic auth or OAuth with the \`repo\` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations. The \`subject_type\` and \`subject_id\` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about \`octocat\` who owns the \`Spoon-Knife\` repository via cURL, it would look like this: \`\`\`shell curl -u username:token https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192 \`\`\`
     *
     * @tags users
     * @name UsersGetContextForUser
     * @summary Get contextual information for a user
     * @request GET:/users/{username}/hovercard
     */
    usersGetContextForUser: (
      username: string,
      query?: {
        /** Uses the ID for the \`subject_type\` you specified. **Required** when using \`subject_type\`. */
        subject_id?: string;
        /** Identifies which additional information you'd like to receive about the person's hovercard. Can be \`organization\`, \`repository\`, \`issue\`, \`pull_request\`. **Required** when using \`subject_id\`. */
        subject_type?: "organization" | "repository" | "issue" | "pull_request";
      },
      params: RequestParams = {},
    ) =>
      this.request<Hovercard, BasicError | ValidationError>({
        path: \`/users/\${username}/hovercard\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Enables an authenticated GitHub App to find the user’s installation information. You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @tags apps
     * @name AppsGetUserInstallation
     * @summary Get a user installation for the authenticated app
     * @request GET:/users/{username}/installation
     */
    appsGetUserInstallation: (username: string, params: RequestParams = {}) =>
      this.request<Installation, any>({
        path: \`/users/\${username}/installation\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
     *
     * @tags users
     * @name UsersListPublicKeysForUser
     * @summary List public keys for a user
     * @request GET:/users/{username}/keys
     */
    usersListPublicKeysForUser: (
      username: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<KeySimple[], any>({
        path: \`/users/\${username}/keys\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user. This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
     *
     * @tags orgs
     * @name OrgsListForUser
     * @summary List organizations for a user
     * @request GET:/users/{username}/orgs
     */
    orgsListForUser: (
      username: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<OrganizationSimple[], any>({
        path: \`/users/\${username}/orgs\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags projects
     * @name ProjectsListForUser
     * @summary List user projects
     * @request GET:/users/{username}/projects
     */
    projectsListForUser: (
      username: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * Indicates the state of the projects to return. Can be either \`open\`, \`closed\`, or \`all\`.
         * @default "open"
         */
        state?: "open" | "closed" | "all";
      },
      params: RequestParams = {},
    ) =>
      this.request<
        Project[],
        | {
            documentation_url: string;
            message: string;
          }
        | ValidationError
      >({
        path: \`/users/\${username}/projects\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
     *
     * @tags activity
     * @name ActivityListReceivedEventsForUser
     * @summary List events received by the authenticated user
     * @request GET:/users/{username}/received_events
     */
    activityListReceivedEventsForUser: (
      username: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], any>({
        path: \`/users/\${username}/received_events\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags activity
     * @name ActivityListReceivedPublicEventsForUser
     * @summary List public events received by a user
     * @request GET:/users/{username}/received_events/public
     */
    activityListReceivedPublicEventsForUser: (
      username: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Event[], any>({
        path: \`/users/\${username}/received_events/public\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists public repositories for the specified user.
     *
     * @tags repos
     * @name ReposListForUser
     * @summary List repositories for a user
     * @request GET:/users/{username}/repos
     */
    reposListForUser: (
      username: string,
      query?: {
        /** Can be one of \`asc\` or \`desc\`. Default: \`asc\` when using \`full_name\`, otherwise \`desc\` */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * Can be one of \`created\`, \`updated\`, \`pushed\`, \`full_name\`.
         * @default "full_name"
         */
        sort?: "created" | "updated" | "pushed" | "full_name";
        /**
         * Can be one of \`all\`, \`owner\`, \`member\`.
         * @default "owner"
         */
        type?: "all" | "owner" | "member";
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], any>({
        path: \`/users/\${username}/repos\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the summary of the free and paid GitHub Actions minutes used. Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)". Access tokens must have the \`user\` scope.
     *
     * @tags billing
     * @name BillingGetGithubActionsBillingUser
     * @summary Get GitHub Actions billing for a user
     * @request GET:/users/{username}/settings/billing/actions
     */
    billingGetGithubActionsBillingUser: (username: string, params: RequestParams = {}) =>
      this.request<ActionsBillingUsage, any>({
        path: \`/users/\${username}/settings/billing/actions\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the free and paid storage used for GitHub Packages in gigabytes. Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)." Access tokens must have the \`user\` scope.
     *
     * @tags billing
     * @name BillingGetGithubPackagesBillingUser
     * @summary Get GitHub Packages billing for a user
     * @request GET:/users/{username}/settings/billing/packages
     */
    billingGetGithubPackagesBillingUser: (username: string, params: RequestParams = {}) =>
      this.request<PackagesBillingUsage, any>({
        path: \`/users/\${username}/settings/billing/packages\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages. Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)." Access tokens must have the \`user\` scope.
     *
     * @tags billing
     * @name BillingGetSharedStorageBillingUser
     * @summary Get shared storage billing for a user
     * @request GET:/users/{username}/settings/billing/shared-storage
     */
    billingGetSharedStorageBillingUser: (username: string, params: RequestParams = {}) =>
      this.request<CombinedBillingUsage, any>({
        path: \`/users/\${username}/settings/billing/shared-storage\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description Lists repositories a user has starred. You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the \`Accept\` header:
     *
     * @tags activity
     * @name ActivityListReposStarredByUser
     * @summary List repositories starred by a user
     * @request GET:/users/{username}/starred
     */
    activityListReposStarredByUser: (
      username: string,
      query?: {
        /**
         * One of \`asc\` (ascending) or \`desc\` (descending).
         * @default "desc"
         */
        direction?: "asc" | "desc";
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
        /**
         * One of \`created\` (when the repository was starred) or \`updated\` (when it was last pushed to).
         * @default "created"
         */
        sort?: "created" | "updated";
      },
      params: RequestParams = {},
    ) =>
      this.request<Repository[], any>({
        path: \`/users/\${username}/starred\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Lists repositories a user is watching.
     *
     * @tags activity
     * @name ActivityListReposWatchedByUser
     * @summary List repositories watched by a user
     * @request GET:/users/{username}/subscriptions
     */
    activityListReposWatchedByUser: (
      username: string,
      query?: {
        /**
         * Page number of the results to fetch.
         * @default 1
         */
        page?: number;
        /**
         * Results per page (max 100)
         * @default 30
         */
        per_page?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<MinimalRepository[], any>({
        path: \`/users/\${username}/subscriptions\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  zen = {
    /**
     * @description Get a random sentence from the Zen of GitHub
     *
     * @tags meta
     * @name MetaGetZen
     * @summary Get the Zen of GitHub
     * @request GET:/zen
     */
    metaGetZen: (params: RequestParams = {}) =>
      this.request<WebhookConfigUrl, any>({
        path: \`/zen\`,
        method: "GET",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'furkot-example' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Step {
  /** address of the stop */
  address?: string;
  /**
   * arrival at the stop in its local timezone as YYYY-MM-DDThh:mm
   * @format date-time
   */
  arrival?: string;
  /** geographical coordinates of the stop */
  coordinates?: {
    /**
     * latitude
     * @format float
     */
    lat?: number;
    /**
     * longitude
     * @format float
     */
    lon?: number;
  };
  /**
   * departure from the stop in its local timezone as YYYY-MM-DDThh:mm
   * @format date-time
   */
  departure?: string;
  /** name of the stop */
  name?: string;
  /**
   * number of nights
   * @format int64
   */
  nights?: number;
  /** route leading to the stop */
  route?: {
    /**
     * route distance in meters
     * @format int64
     */
    distance?: number;
    /**
     * route duration in seconds
     * @format int64
     */
    duration?: number;
    /** travel mode */
    mode?: "car" | "motorcycle" | "bicycle" | "walk" | "other";
    /** route path compatible with Google polyline encoding algorithm */
    polyline?: string;
  };
  /** url of the page with more information about the stop */
  url?: string;
}

export interface Trip {
  /**
   * begin of the trip in its local timezone as YYYY-MM-DDThh:mm
   * @format date-time
   */
  begin?: string;
  /** description of the trip (truncated to 200 characters) */
  description?: string;
  /**
   * end of the trip in its local timezone as YYYY-MM-DDThh:mm
   * @format date-time
   */
  end?: string;
  /** Unique ID of the trip */
  id?: string;
  /** name of the trip */
  name?: string;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "https://trips.furkot.com/pub/api";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Furkot Trips
 * @version 1.0.0
 * @baseUrl https://trips.furkot.com/pub/api
 * @externalDocs https://help.furkot.com/widgets/furkot-api.html
 * @contact <trips@furkot.com>
 *
 * Furkot provides Rest API to access user trip data.
 * Using Furkot API an application can list user trips and display stops for a specific trip.
 * Furkot API uses OAuth2 protocol to authorize applications to access data on behalf of users.
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  trip = {
    /**
     * @description list user's trips
     *
     * @name TripList
     * @request GET:/trip
     * @secure
     */
    tripList: (params: RequestParams = {}) =>
      this.request<Trip[], any>({
        path: \`/trip\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description list stops for a trip identified by {trip_id}
     *
     * @name StopList
     * @request GET:/trip/{trip_id}/stop
     * @secure
     */
    stopList: (tripId: string, params: RequestParams = {}) =>
      this.request<Step[], any>({
        path: \`/trip/\${tripId}/stop\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'giphy' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Gif {
  /**
   * The unique bit.ly URL for this GIF
   * @example "http://gph.is/1gsWDcL"
   */
  bitly_url?: string;
  /** Currently unused */
  content_url?: string;
  /**
   * The date this GIF was added to the GIPHY database.
   * @format date-time
   * @example "2013-08-01 12:41:48"
   */
  create_datetime?: string;
  /**
   * A URL used for embedding this GIF
   * @example "http://giphy.com/embed/YsTs5ltWtEhnq"
   */
  embded_url?: string;
  /** An array of featured tags for this GIF (Note: Not available when using the Public Beta Key) */
  featured_tags?: string[];
  /**
   * This GIF's unique ID
   * @example "YsTs5ltWtEhnq"
   */
  id?: string;
  /** An object containing data for various available formats and sizes of this GIF. */
  images?: {
    /** Data surrounding a version of this GIF downsized to be under 2mb. */
    downsized?: Image;
    /** Data surrounding a version of this GIF downsized to be under 8mb. */
    downsized_large?: Image;
    /** Data surrounding a version of this GIF downsized to be under 5mb. */
    downsized_medium?: Image;
    /** Data surrounding a version of this GIF downsized to be under 200kb. */
    downsized_small?: Image;
    /** Data surrounding a static preview image of the downsized version of this GIF. */
    downsized_still?: Image;
    /** Data surrounding versions of this GIF with a fixed height of 200 pixels. Good for mobile use. */
    fixed_height?: Image;
    /** Data surrounding versions of this GIF with a fixed height of 200 pixels and the number of frames reduced to 6. */
    fixed_height_downsampled?: Image;
    /** Data surrounding versions of this GIF with a fixed height of 100 pixels. Good for mobile keyboards. */
    fixed_height_small?: Image;
    /** Data surrounding a static image of this GIF with a fixed height of 100 pixels. */
    fixed_height_small_still?: Image;
    /** Data surrounding a static image of this GIF with a fixed height of 200 pixels. */
    fixed_height_still?: Image;
    /** Data surrounding versions of this GIF with a fixed width of 200 pixels. Good for mobile use. */
    fixed_width?: Image;
    /** Data surrounding versions of this GIF with a fixed width of 200 pixels and the number of frames reduced to 6. */
    fixed_width_downsampled?: Image;
    /** Data surrounding versions of this GIF with a fixed width of 100 pixels. Good for mobile keyboards. */
    fixed_width_small?: Image;
    /** Data surrounding a static image of this GIF with a fixed width of 100 pixels. */
    fixed_width_small_still?: Image;
    /** Data surrounding a static image of this GIF with a fixed width of 200 pixels. */
    fixed_width_still?: Image;
    /** Data surrounding a version of this GIF set to loop for 15 seconds. */
    looping?: Image;
    /** Data surrounding the original version of this GIF. Good for desktop use. */
    original?: Image;
    /** Data surrounding a static preview image of the original GIF. */
    original_still?: Image;
    /** Data surrounding a version of this GIF in .MP4 format limited to 50kb that displays the first 1-2 seconds of the GIF. */
    preview?: Image;
    /** Data surrounding a version of this GIF limited to 50kb that displays the first 1-2 seconds of the GIF. */
    preview_gif?: Image;
  };
  /**
   * The creation or upload date from this GIF's source.
   * @format date-time
   * @example "2013-08-01 12:41:48"
   */
  import_datetime?: string;
  /**
   * The MPAA-style rating for this content. Examples include Y, G, PG, PG-13 and R
   * @example "g"
   */
  rating?: string;
  /**
   * The unique slug used in this GIF's URL
   * @example "confused-flying-YsTs5ltWtEhnq"
   */
  slug?: string;
  /**
   * The page on which this GIF was found
   * @example "http://www.reddit.com/r/reactiongifs/comments/1xpyaa/superman_goes_to_hollywood/"
   */
  source?: string;
  /**
   * The URL of the webpage on which this GIF was found.
   * @example "http://cheezburger.com/5282328320"
   */
  source_post_url?: string;
  /**
   * The top level domain of the source URL.
   * @example "cheezburger.com"
   */
  source_tld?: string;
  /** An array of tags for this GIF (Note: Not available when using the Public Beta Key) */
  tags?: string[];
  /**
   * The date on which this gif was marked trending, if applicable.
   * @format date-time
   * @example "2013-08-01 12:41:48"
   */
  trending_datetime?: string;
  /**
   * Type of the gif. By default, this is almost always gif
   * @default "gif"
   */
  type?: "gif";
  /**
   * The date on which this GIF was last updated.
   * @format date-time
   * @example "2013-08-01 12:41:48"
   */
  update_datetime?: string;
  /**
   * The unique URL for this GIF
   * @example "http://giphy.com/gifs/confused-flying-YsTs5ltWtEhnq"
   */
  url?: string;
  /** The User Object contains information about the user associated with a GIF and URLs to assets such as that user's avatar image, profile, and more. */
  user?: User;
  /**
   * The username this GIF is attached to, if applicable
   * @example "JoeCool4000"
   */
  username?: string;
}

export interface Image {
  /**
   * The URL for this GIF in .MP4 format.
   * @example "https://media1.giphy.com/media/cZ7rmKfFYOvYI/giphy.mp4"
   */
  mp4?: string;
  /**
   * The size in bytes of the .MP4 file corresponding to this GIF.
   * @example "25123"
   */
  mp4_size?: string;
  /**
   * The number of frames in this GIF.
   * @example "15"
   */
  frames?: string;
  /**
   * The height of this GIF in pixels.
   * @example "200"
   */
  height?: string;
  /**
   * The size of this GIF in bytes.
   * @example "32381"
   */
  size?: string;
  /**
   * The publicly-accessible direct URL for this GIF.
   * @example "https://media1.giphy.com/media/cZ7rmKfFYOvYI/200.gif"
   */
  url?: string;
  /**
   * The URL for this GIF in .webp format.
   * @example "https://media1.giphy.com/media/cZ7rmKfFYOvYI/giphy.webp"
   */
  webp?: string;
  /**
   * The size in bytes of the .webp file corresponding to this GIF.
   * @example "12321"
   */
  webp_size?: string;
  /**
   * The width of this GIF in pixels.
   * @example "320"
   */
  width?: string;
}

/** The Meta Object contains basic information regarding the request, whether it was successful, and the response given by the API.  Check \`responses\` to see a description of types of response codes the API might give you under different cirumstances. */
export interface Meta {
  /**
   * HTTP Response Message
   * @example "OK"
   */
  msg?: string;
  /**
   * A unique ID paired with this response from the API.
   * @example "57eea03c72381f86e05c35d2"
   */
  response_id?: string;
  /**
   * HTTP Response Code
   * @format int32
   * @example 200
   */
  status?: number;
}

/** The Pagination Object contains information relating to the number of total results available as well as the number of results fetched and their relative positions. */
export interface Pagination {
  /**
   * Total number of items returned.
   * @format int32
   * @example 25
   */
  count?: number;
  /**
   * Position in pagination.
   * @format int32
   * @example 75
   */
  offset?: number;
  /**
   * Total number of items available.
   * @format int32
   * @example 250
   */
  total_count?: number;
}

/** The User Object contains information about the user associated with a GIF and URLs to assets such as that user's avatar image, profile, and more. */
export interface User {
  /**
   * The URL for this user's avatar image.
   * @example "https://media1.giphy.com/avatars/election2016/XwYrZi5H87o6.gif"
   */
  avatar_url?: string;
  /**
   * The URL for the banner image that appears atop this user's profile page.
   * @example "https://media4.giphy.com/avatars/cheezburger/XkuejOhoGLE6.jpg"
   */
  banner_url?: string;
  /**
   * The display name associated with this user (contains formatting the base username might not).
   * @example "JoeCool4000"
   */
  display_name?: string;
  /**
   * The URL for this user's profile.
   * @example "https://giphy.com/cheezburger/"
   */
  profile_url?: string;
  /**
   * The Twitter username associated with this user, if applicable.
   * @example "@joecool4000"
   */
  twitter?: string;
  /**
   * The username associated with this user.
   * @example "joecool4000"
   */
  username?: string;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "https://api.giphy.com/v1";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Giphy
 * @version 1.0
 * @termsOfService https://developers.giphy.com/
 * @baseUrl https://api.giphy.com/v1
 * @externalDocs https://developers.giphy.com/docs/
 * @contact <support@giphy.com>
 *
 * Giphy API
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  gifs = {
    /**
     * @description A multiget version of the get GIF by ID endpoint.
     *
     * @tags gifs
     * @name GetGifsById
     * @summary Get GIFs by ID
     * @request GET:/gifs
     * @secure
     */
    getGifsById: (
      query?: {
        /** Filters results by specified GIF IDs, separated by commas. */
        ids?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          data?: Gif[];
          /** The Meta Object contains basic information regarding the request, whether it was successful, and the response given by the API.  Check \`responses\` to see a description of types of response codes the API might give you under different cirumstances. */
          meta?: Meta;
          /** The Pagination Object contains information relating to the number of total results available as well as the number of results fetched and their relative positions. */
          pagination?: Pagination;
        },
        any
      >({
        path: \`/gifs\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.
     *
     * @tags gifs
     * @name RandomGif
     * @summary Random GIF
     * @request GET:/gifs/random
     * @secure
     */
    randomGif: (
      query?: {
        /** Filters results by specified rating. */
        rating?: string;
        /** Filters results by specified tag. */
        tag?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          data?: Gif;
          /** The Meta Object contains basic information regarding the request, whether it was successful, and the response given by the API.  Check \`responses\` to see a description of types of response codes the API might give you under different cirumstances. */
          meta?: Meta;
        },
        any
      >({
        path: \`/gifs/random\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Search all GIPHY GIFs for a word or phrase. Punctuation will be stripped and ignored.  Use a plus or url encode for phrases. Example paul+rudd, ryan+gosling or american+psycho.
     *
     * @tags gifs
     * @name SearchGifs
     * @summary Search GIFs
     * @request GET:/gifs/search
     * @secure
     */
    searchGifs: (
      query: {
        /** Specify default language for regional content; use a 2-letter ISO 639-1 language code. */
        lang?: string;
        /**
         * The maximum number of records to return.
         * @format int32
         * @default 25
         */
        limit?: number;
        /**
         * An optional results offset.
         * @format int32
         * @default 0
         */
        offset?: number;
        /** Search query term or prhase. */
        q: string;
        /** Filters results by specified rating. */
        rating?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          data?: Gif[];
          /** The Meta Object contains basic information regarding the request, whether it was successful, and the response given by the API.  Check \`responses\` to see a description of types of response codes the API might give you under different cirumstances. */
          meta?: Meta;
          /** The Pagination Object contains information relating to the number of total results available as well as the number of results fetched and their relative positions. */
          pagination?: Pagination;
        },
        any
      >({
        path: \`/gifs/search\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description The translate API draws on search, but uses the GIPHY \`special sauce\` to handle translating from one vocabulary to another. In this case, words and phrases to GIF
     *
     * @tags gifs
     * @name TranslateGif
     * @summary Translate phrase to GIF
     * @request GET:/gifs/translate
     * @secure
     */
    translateGif: (
      query: {
        /** Search term. */
        s: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          data?: Gif;
          /** The Meta Object contains basic information regarding the request, whether it was successful, and the response given by the API.  Check \`responses\` to see a description of types of response codes the API might give you under different cirumstances. */
          meta?: Meta;
        },
        any
      >({
        path: \`/gifs/translate\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team.  The data returned mirrors the GIFs showcased on the GIPHY homepage. Returns 25 results by default.
     *
     * @tags gifs
     * @name TrendingGifs
     * @summary Trending GIFs
     * @request GET:/gifs/trending
     * @secure
     */
    trendingGifs: (
      query?: {
        /**
         * The maximum number of records to return.
         * @format int32
         * @default 25
         */
        limit?: number;
        /**
         * An optional results offset.
         * @format int32
         * @default 0
         */
        offset?: number;
        /** Filters results by specified rating. */
        rating?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          data?: Gif[];
          /** The Meta Object contains basic information regarding the request, whether it was successful, and the response given by the API.  Check \`responses\` to see a description of types of response codes the API might give you under different cirumstances. */
          meta?: Meta;
          /** The Pagination Object contains information relating to the number of total results available as well as the number of results fetched and their relative positions. */
          pagination?: Pagination;
        },
        any
      >({
        path: \`/gifs/trending\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a GIF given that GIF's unique ID
     *
     * @tags gifs
     * @name GetGifById
     * @summary Get GIF by Id
     * @request GET:/gifs/{gifId}
     * @secure
     */
    getGifById: (gifId: number, params: RequestParams = {}) =>
      this.request<
        {
          data?: Gif;
          /** The Meta Object contains basic information regarding the request, whether it was successful, and the response given by the API.  Check \`responses\` to see a description of types of response codes the API might give you under different cirumstances. */
          meta?: Meta;
        },
        any
      >({
        path: \`/gifs/\${gifId}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),
  };
  stickers = {
    /**
     * @description Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.
     *
     * @tags stickers
     * @name RandomSticker
     * @summary Random Sticker
     * @request GET:/stickers/random
     * @secure
     */
    randomSticker: (
      query?: {
        /** Filters results by specified rating. */
        rating?: string;
        /** Filters results by specified tag. */
        tag?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          data?: Gif;
          /** The Meta Object contains basic information regarding the request, whether it was successful, and the response given by the API.  Check \`responses\` to see a description of types of response codes the API might give you under different cirumstances. */
          meta?: Meta;
        },
        any
      >({
        path: \`/stickers/random\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs.
     *
     * @tags stickers
     * @name SearchStickers
     * @summary Search Stickers
     * @request GET:/stickers/search
     * @secure
     */
    searchStickers: (
      query: {
        /** Specify default language for regional content; use a 2-letter ISO 639-1 language code. */
        lang?: string;
        /**
         * The maximum number of records to return.
         * @format int32
         * @default 25
         */
        limit?: number;
        /**
         * An optional results offset.
         * @format int32
         * @default 0
         */
        offset?: number;
        /** Search query term or prhase. */
        q: string;
        /** Filters results by specified rating. */
        rating?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          data?: Gif[];
          /** The Meta Object contains basic information regarding the request, whether it was successful, and the response given by the API.  Check \`responses\` to see a description of types of response codes the API might give you under different cirumstances. */
          meta?: Meta;
          /** The Pagination Object contains information relating to the number of total results available as well as the number of results fetched and their relative positions. */
          pagination?: Pagination;
        },
        any
      >({
        path: \`/stickers/search\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description The translate API draws on search, but uses the GIPHY \`special sauce\` to handle translating from one vocabulary to another. In this case, words and phrases to GIFs.
     *
     * @tags stickers
     * @name TranslateSticker
     * @summary Translate phrase to Sticker
     * @request GET:/stickers/translate
     * @secure
     */
    translateSticker: (
      query: {
        /** Search term. */
        s: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          data?: Gif;
          /** The Meta Object contains basic information regarding the request, whether it was successful, and the response given by the API.  Check \`responses\` to see a description of types of response codes the API might give you under different cirumstances. */
          meta?: Meta;
        },
        any
      >({
        path: \`/stickers/translate\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Fetch Stickers currently trending online. Hand curated by the GIPHY editorial team. Returns 25 results by default.
     *
     * @tags stickers
     * @name TrendingStickers
     * @summary Trending Stickers
     * @request GET:/stickers/trending
     * @secure
     */
    trendingStickers: (
      query?: {
        /**
         * The maximum number of records to return.
         * @format int32
         * @default 25
         */
        limit?: number;
        /**
         * An optional results offset.
         * @format int32
         * @default 0
         */
        offset?: number;
        /** Filters results by specified rating. */
        rating?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<
        {
          data?: Gif[];
          /** The Meta Object contains basic information regarding the request, whether it was successful, and the response given by the API.  Check \`responses\` to see a description of types of response codes the API might give you under different cirumstances. */
          meta?: Meta;
          /** The Pagination Object contains information relating to the number of total results available as well as the number of results fetched and their relative positions. */
          pagination?: Pagination;
        },
        any
      >({
        path: \`/stickers/trending\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'link-example' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Pullrequest {
  author?: User;
  id?: number;
  repository?: Repository;
  title?: string;
}

export interface Repository {
  owner?: User;
  slug?: string;
}

export interface User {
  username?: string;
  uuid?: string;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Link Example
 * @version 1.0.0
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  v20 = {
    /**
     * No description
     *
     * @name GetUserByName
     * @request GET:/2.0/users/{username}
     */
    getUserByName: (username: string, params: RequestParams = {}) =>
      this.request<User, any>({
        path: \`/2.0/users/\${username}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name GetRepositoriesByOwner
     * @request GET:/2.0/repositories/{username}
     */
    getRepositoriesByOwner: (username: string, params: RequestParams = {}) =>
      this.request<Repository[], any>({
        path: \`/2.0/repositories/\${username}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name GetRepository
     * @request GET:/2.0/repositories/{username}/{slug}
     */
    getRepository: (username: string, slug: string, params: RequestParams = {}) =>
      this.request<Repository, any>({
        path: \`/2.0/repositories/\${username}/\${slug}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name GetPullRequestsByRepository
     * @request GET:/2.0/repositories/{username}/{slug}/pullrequests
     */
    getPullRequestsByRepository: (
      username: string,
      slug: string,
      query?: {
        state?: "open" | "merged" | "declined";
      },
      params: RequestParams = {},
    ) =>
      this.request<Pullrequest[], any>({
        path: \`/2.0/repositories/\${username}/\${slug}/pullrequests\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name GetPullRequestsById
     * @request GET:/2.0/repositories/{username}/{slug}/pullrequests/{pid}
     */
    getPullRequestsById: (username: string, slug: string, pid: string, params: RequestParams = {}) =>
      this.request<Pullrequest, any>({
        path: \`/2.0/repositories/\${username}/\${slug}/pullrequests/\${pid}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name MergePullRequest
     * @request POST:/2.0/repositories/{username}/{slug}/pullrequests/{pid}/merge
     */
    mergePullRequest: (username: string, slug: string, pid: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/2.0/repositories/\${username}/\${slug}/pullrequests/\${pid}/merge\`,
        method: "POST",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'no-definitions-schema' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface BasicErrorModel {
  /**
   * @min 100
   * @max 600
   */
  code: number;
  field?: string | null;
  message: string;
}

export type ExtendedErrorModel = BasicErrorModel & {
  rootCause: string;
};

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Empty schema example
 * @version 1.0.0
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {}
"
`;

exports[`simple > 'oneof-example' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Cat {
  age?: number;
  hunts?: boolean;
}

export interface Dog {
  bark?: boolean;
  breed?: "Dingo" | "Husky" | "Retriever" | "Shepherd";
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Oneof Example
 * @version 1.0.0
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  pets = {
    /**
     * No description
     *
     * @name PetsPartialUpdate
     * @request PATCH:/pets
     */
    petsPartialUpdate: (data: Cat | Dog, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/pets\`,
        method: "PATCH",
        body: data,
        type: ContentType.Json,
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'path-args' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "http://unknown.io/v666";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Path Args
 * @version 1.0.0
 * @license MIT
 * @baseUrl http://unknown.io/v666
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  pets = {
    /**
     * No description
     *
     * @tags pets
     * @name ListPets
     * @summary List all pets
     * @request GET:/pets/{param1}/{param2}/{param3}
     */
    listPets: (
      param3: number,
      param1?: number,
      param2?: number,
      query?: {
        /**
         * How many items to return at one time (max 100)
         * @format int32
         */
        queryParam?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<object, any>({
        path: \`/pets/\${param1}/\${param2}/\${param3}\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'personal-api-example' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export type AuthUserType = OmitIdUserType;

export type ExtractedProjectType = OmitProjectTypeJob & {
  /** Information about job */
  job: JobType;
};

/** Information about job */
export interface FooBar {
  kind?: JobKind;
}

/** Information about job */
export interface FooBarBaz {
  id?: string;
  kind?: JobKind;
  link?: string;
  name?: string;
  [key: string]: any;
}

/** Information about job */
export interface FooBaz {
  link?: string;
  name?: string;
}

/**
 * FooBar
 * @format int32
 */
export enum IntEnumWithNames {
  Unknown = 0,
  String = 1,
  Int32 = 2,
  Int64 = 3,
  Double = 4,
  DateTime = 5,
  Test2 = 6,
  Test23 = 7,
  Tess44 = 8,
  BooFar = 9,
}

export enum JobKind {
  COMPANY = "COMPANY",
  PERSONAL = "PERSONAL",
  FREELANCE = "FREELANCE",
  OPEN_SOURCE = "OPEN_SOURCE",
}

/** Information about job */
export interface JobType {
  /** web site address */
  address?: string;
  /**
   * Exist only in open source jobs
   * Format: \`\${username}/\${projectName}\`
   */
  github?: string;
  id: string;
  /**
   * Exist only in open source jobs
   * Means project is dev. tool (like swagger code generator)
   */
  isTool?: boolean;
  kind: JobKind;
  link?: string;
  name?: string;
  /**
   * Exist only in open source jobs
   * Format: \`\${orgname}/\${projectName}\`
   */
  npm?: string;
}

export type JobUpdateType = OmitIdJobType;

export interface NullableEnum {
  /** @format int64 */
  id?: number;
  legalCategory?: "SARL" | "ASSOCIATION" | null;
}

export type OmitIdJobType = OmitJobTypeIdOrId;

export type OmitIdProjectType = OmitProjectTypeIdOrId;

export type OmitIdUserType = OmitUserTypeIdOrId;

export type OmitJobTypeIdOrId = PickJobTypeExcludeKeysIdOrId;

export type OmitProjectTypeIdOrId = PickProjectTypeExcludeKeysIdOrId;

export type OmitProjectTypeJob = PickProjectTypeExcludeKeysJob;

export type OmitUserTypeIdOrId = PickUserTypeExcludeKeysIdOrId;

/** From T, pick a set of properties whose keys are in the union K */
export interface PickJobTypeExcludeKeysIdOrId {
  /** web site address */
  address?: string;
  /**
   * Exist only in open source jobs
   * Format: \`\${username}/\${projectName}\`
   */
  github?: string;
  /**
   * Exist only in open source jobs
   * Means project is dev. tool (like swagger code generator)
   */
  isTool?: boolean;
  kind: JobKind;
  link?: string;
  name?: string;
  /**
   * Exist only in open source jobs
   * Format: \`\${orgname}/\${projectName}\`
   */
  npm?: string;
}

/** From T, pick a set of properties whose keys are in the union K */
export interface PickProjectTypeExcludeKeysIdOrId {
  description: string;
  job: string;
  name?: string;
  notImportant?: boolean;
  prefix?: string;
  tags: string[];
  teamSize: string;
  /** @format double */
  year: number;
}

/** From T, pick a set of properties whose keys are in the union K */
export interface PickProjectTypeExcludeKeysJob {
  description: string;
  id: string;
  name?: string;
  notImportant?: boolean;
  prefix?: string;
  tags: string[];
  teamSize: string;
  /** @format double */
  year: number;
}

/** From T, pick a set of properties whose keys are in the union K */
export interface PickUserTypeExcludeKeysIdOrId {
  password: string;
  username: string;
}

export interface ProjectType {
  description: string;
  id: string;
  job: string;
  name?: string;
  notImportant?: boolean;
  prefix?: string;
  tags: string[];
  teamSize: string;
  /** @format double */
  year: number;
}

export type ProjectUpdateType = OmitIdProjectType;

export type TestAllOfDc = (FooBarBaz & FooBar) & {
  prop?: string;
};

export type TestAllOfDc2 = FooBarBaz & {
  prop?: string;
};

export type TestAnyOfDc = (FooBarBaz | FooBar) & {
  prop?: string;
};

export type TestOneOfDc = (FooBarBaz | FooBar) & {
  prop?: string;
};

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "http://localhost:8080/api/v1";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title No title
 * @baseUrl http://localhost:8080/api/v1
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  auth = {
    /**
     * No description
     *
     * @tags Auth
     * @name Login
     * @request POST:/auth
     */
    login: (data: AuthUserType, params: RequestParams = {}) =>
      this.request<string, any>({
        path: \`/auth\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Auth
     * @name Refresh
     * @request POST:/auth/refresh
     * @secure
     */
    refresh: (params: RequestParams = {}) =>
      this.request<string, any>({
        path: \`/auth/refresh\`,
        method: "POST",
        secure: true,
        format: "json",
        ...params,
      }),
  };
  jobs = {
    /**
     * No description
     *
     * @tags Jobs
     * @name GetJobs
     * @request GET:/jobs
     * @secure
     */
    getJobs: (params: RequestParams = {}) =>
      this.request<JobType[], any>({
        path: \`/jobs\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Jobs
     * @name AddJob
     * @request POST:/jobs
     * @secure
     */
    addJob: (data: JobUpdateType, params: RequestParams = {}) =>
      this.request<string, any>({
        path: \`/jobs\`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Jobs
     * @name GetJob
     * @request GET:/jobs/{id}
     * @secure
     */
    getJob: (id: string, params: RequestParams = {}) =>
      this.request<JobType, void>({
        path: \`/jobs/\${id}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Jobs
     * @name UpdateJob
     * @request PATCH:/jobs/{id}
     * @secure
     */
    updateJob: (id: string, params: JobUpdateType, requestParams: RequestParams = {}) =>
      this.request<JobType, any>({
        path: \`/jobs/\${id}\`,
        method: "PATCH",
        body: params,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...requestParams,
      }),

    /**
     * No description
     *
     * @tags Jobs
     * @name DeleteJob
     * @request DELETE:/jobs/{id}
     * @secure
     */
    deleteJob: (id: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/jobs/\${id}\`,
        method: "DELETE",
        secure: true,
        format: "json",
        ...params,
      }),
  };
  projects = {
    /**
     * No description
     *
     * @tags Projects
     * @name GetProjects
     * @request GET:/projects
     */
    getProjects: (params: RequestParams = {}) =>
      this.request<ExtractedProjectType[], any>({
        path: \`/projects\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Projects
     * @name AddProjects
     * @request POST:/projects
     * @secure
     */
    addProjects: (data: ProjectUpdateType, params: RequestParams = {}) =>
      this.request<string, any>({
        path: \`/projects\`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Projects
     * @name UpdateProject
     * @request PATCH:/projects/{id}
     * @secure
     */
    updateProject: (id: string, data: ProjectUpdateType, params: RequestParams = {}) =>
      this.request<ProjectType, any>({
        path: \`/projects/\${id}\`,
        method: "PATCH",
        body: data,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Projects
     * @name DeleteProject
     * @request DELETE:/projects/{id}
     */
    deleteProject: (id: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/projects/\${id}\`,
        method: "DELETE",
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'petstore' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Error {
  /** @format int32 */
  code: number;
  message: string;
}

export interface Pet {
  /** @format int64 */
  id: number;
  name: string;
  tag?: string;
}

export type Pets = Pet[];

export type StringNullable = string | null;

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "http://petstore.swagger.io/v1";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Swagger Petstore
 * @version 1.0.0
 * @license MIT
 * @baseUrl http://petstore.swagger.io/v1
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  pets = {
    /**
     * No description
     *
     * @tags pets
     * @name ListPets
     * @summary List all pets
     * @request GET:/pets
     */
    listPets: (
      query?: {
        /**
         * How many items to return at one time (max 100)
         * @format int32
         */
        limit?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Pets, Error>({
        path: \`/pets\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags pets
     * @name CreatePets
     * @summary Create a pet
     * @request POST:/pets
     */
    createPets: (params: RequestParams = {}) =>
      this.request<void, Error>({
        path: \`/pets\`,
        method: "POST",
        ...params,
      }),

    /**
     * No description
     *
     * @tags pets
     * @name ShowPetById
     * @summary Info for a specific pet
     * @request GET:/pets/{petId}
     */
    showPetById: (petId: string, params: RequestParams = {}) =>
      this.request<Pet, Error>({
        path: \`/pets/\${petId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'petstore' 2`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Error {
  /** @format int32 */
  code: number;
  message: string;
}

export interface Pet {
  /** @format int64 */
  id: number;
  name: string;
  tag?: string;
}

export type Pets = Pet[];

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "http://petstore.swagger.io/v1";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Swagger Petstore
 * @version 1.0.0
 * @license MIT
 * @baseUrl http://petstore.swagger.io/v1
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  pets = {
    /**
     * No description
     *
     * @tags pets
     * @name ListPets
     * @summary List all pets
     * @request GET:/pets
     */
    listPets: (
      query?: {
        /**
         * How many items to return at one time (max 100)
         * @format int32
         */
        limit?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Pets, Error>({
        path: \`/pets\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags pets
     * @name CreatePets
     * @summary Create a pet
     * @request POST:/pets
     */
    createPets: (params: RequestParams = {}) =>
      this.request<void, Error>({
        path: \`/pets\`,
        method: "POST",
        ...params,
      }),

    /**
     * No description
     *
     * @tags pets
     * @name ShowPetById
     * @summary Info for a specific pet
     * @request GET:/pets/{petId}
     */
    showPetById: (petId: string, params: RequestParams = {}) =>
      this.request<Pets, Error>({
        path: \`/pets/\${petId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'petstore-expanded' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Error {
  /** @format int32 */
  code: number;
  message: string;
}

export interface NewPet {
  name: string;
  tag?: string;
}

export type Pet = NewPet & {
  /** @format int64 */
  id: number;
};

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "http://petstore.swagger.io/api";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Swagger Petstore
 * @version 1.0.0
 * @license Apache 2.0 (https://www.apache.org/licenses/LICENSE-2.0.html)
 * @termsOfService http://swagger.io/terms/
 * @baseUrl http://petstore.swagger.io/api
 * @contact Swagger API Team <apiteam@swagger.io> (http://swagger.io)
 *
 * A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  pets = {
    /**
     * @description Returns all pets from the system that the user has access to Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia. Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
     *
     * @name FindPets
     * @request GET:/pets
     */
    findPets: (
      query?: {
        /**
         * maximum number of results to return
         * @format int32
         */
        limit?: number;
        /** tags to filter by */
        tags?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Pet[], Error>({
        path: \`/pets\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new pet in the store. Duplicates are allowed
     *
     * @name AddPet
     * @request POST:/pets
     */
    addPet: (data: NewPet, params: RequestParams = {}) =>
      this.request<Pet, Error>({
        path: \`/pets\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a user based on a single ID, if the user does not have access to the pet
     *
     * @name FindPetById
     * @request GET:/pets/{id}
     */
    findPetById: (id: number, params: RequestParams = {}) =>
      this.request<Pet, Error>({
        path: \`/pets/\${id}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description deletes a single pet based on the ID supplied
     *
     * @name DeletePet
     * @request DELETE:/pets/{id}
     */
    deletePet: (id: number, params: RequestParams = {}) =>
      this.request<void, Error>({
        path: \`/pets/\${id}\`,
        method: "DELETE",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'petstore-expanded' 2`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Error {
  /** @format int32 */
  code: number;
  message: string;
}

export interface NewPet {
  name: string;
  tag?: string;
}

/** Page«TemplateResponseDto» */
export interface PageTemplateResponseDto {
  content?: any[];
  empty?: boolean;
  first?: boolean;
  last?: boolean;
  /** @format int32 */
  number?: number;
  /** @format int32 */
  numberOfElements?: number;
  pageable?: any;
  /** @format int32 */
  size?: number;
  sort?: any;
  /** @format int64 */
  totalElements?: number;
  /** @format int32 */
  totalPages?: number;
}

export type Pet = NewPet & {
  /** @format int64 */
  id: number;
};

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "http://petstore.swagger.io/api";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Swagger Petstore
 * @version 1.0.0
 * @license Apache 2.0 (https://www.apache.org/licenses/LICENSE-2.0.html)
 * @termsOfService http://swagger.io/terms/
 * @baseUrl http://petstore.swagger.io/api
 * @contact Swagger API Team <apiteam@swagger.io> (http://swagger.io)
 *
 * A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  pathParams = {
    /**
     * No description
     *
     * @name PathParamFooBarBazList
     * @request GET:/path-params/{path-param}/{foo-bar-baz}
     */
    pathParamFooBarBazList: (pathParam: string, fooBarBaz: string, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/path-params/\${pathParam}/\${fooBarBaz}\`,
        method: "GET",
        ...params,
      }),
  };
  pets = {
    /**
     * @description Returns all pets from the system that the user has access to Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia. Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
     *
     * @name FindPets
     * @request GET:/pets
     */
    findPets: (
      query?: {
        /**
         * maximum number of results to return
         * @format int32
         */
        limit?: number;
        /** tags to filter by */
        tags?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Pet[], Error>({
        path: \`/pets\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new pet in the store.  Duplicates are allowed
     *
     * @name AddPet
     * @request POST:/pets
     */
    addPet: (pet: NewPet, params: RequestParams = {}) =>
      this.request<Pet, Error>({
        path: \`/pets\`,
        method: "POST",
        body: pet,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a user based on a single ID, if the user does not have access to the pet
     *
     * @name FindPetById
     * @request GET:/pets/{id}
     */
    findPetById: (id: number, params: RequestParams = {}) =>
      this.request<Pet, Error>({
        path: \`/pets/\${id}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description deletes a single pet based on the ID supplied
     *
     * @name DeletePet
     * @request DELETE:/pets/{id}
     */
    deletePet: (id: number, params: RequestParams = {}) =>
      this.request<void, Error>({
        path: \`/pets/\${id}\`,
        method: "DELETE",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'petstore-minimal' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Pet {
  /** @format int64 */
  id: number;
  multiple?: string | number;
  name: string;
  tag?: string;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "http://petstore.swagger.io/api";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Swagger Petstore
 * @version 1.0.0
 * @license MIT
 * @termsOfService http://swagger.io/terms/
 * @baseUrl http://petstore.swagger.io/api
 * @contact Swagger API Team
 *
 * A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  pets = {
    /**
     * @description Returns all pets from the system that the user has access to
     *
     * @name PetsList
     * @request GET:/pets
     */
    petsList: (params: RequestParams = {}) =>
      this.request<Pet[], any>({
        path: \`/pets\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'petstore-simple' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface ErrorModel {
  /** @format int32 */
  code: number;
  message: string;
}

export interface NewPet {
  name: string;
  tag?: string;
}

export type Pet = NewPet & {
  /** @format int64 */
  id: number;
};

/** Description of Test type */
export type Test = NewPet;

export interface Test2 {
  /** Field description */
  data?: NewPet;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "http://petstore.swagger.io/api";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Swagger Petstore
 * @version 1.0.0
 * @license MIT
 * @termsOfService http://swagger.io/terms/
 * @baseUrl http://petstore.swagger.io/api
 * @contact Swagger API Team
 *
 * A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  pets = {
    /**
     * @description Returns all pets from the system that the user has access to
     *
     * @name FindPets
     * @request GET:/pets
     */
    findPets: (
      query?: {
        /**
         * maximum number of results to return
         * @format int32
         */
        limit?: number;
        /** tags to filter by */
        tags?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Pet[], ErrorModel>({
        path: \`/pets\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new pet in the store.  Duplicates are allowed
     *
     * @name AddPet
     * @request POST:/pets
     */
    addPet: (pet: NewPet, params: RequestParams = {}) =>
      this.request<Pet, ErrorModel>({
        path: \`/pets\`,
        method: "POST",
        body: pet,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a user based on a single ID, if the user does not have access to the pet
     *
     * @name FindPetById
     * @request GET:/pets/{id}
     */
    findPetById: (id: number, params: RequestParams = {}) =>
      this.request<Pet, ErrorModel>({
        path: \`/pets/\${id}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description deletes a single pet based on the ID supplied
     *
     * @name DeletePet
     * @request DELETE:/pets/{id}
     */
    deletePet: (id: number, params: RequestParams = {}) =>
      this.request<void, ErrorModel>({
        path: \`/pets/\${id}\`,
        method: "DELETE",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'petstore-swagger-io' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface ApiResponse {
  /** @format int32 */
  code?: number;
  message?: string;
  type?: string;
}

export interface Category {
  /** @format int64 */
  id?: number;
  name?: string;
}

export interface Order {
  complete?: boolean;
  /** @format int64 */
  id?: number;
  /** @format int64 */
  petId?: number;
  /** @format int32 */
  quantity?: number;
  /** @format date-time */
  shipDate?: string;
  /** Order Status */
  status?: "placed" | "approved" | "delivered";
}

export interface Pet {
  category?: Category;
  /** @format int64 */
  id?: number;
  /** @example "doggie" */
  name: string;
  photoUrls: string[];
  /** pet status in the store */
  status?: "available" | "pending" | "sold";
  tags?: Tag[];
}

export interface Tag {
  /** @format int64 */
  id?: number;
  name?: string;
}

export interface User {
  email?: string;
  firstName?: string;
  /** @format int64 */
  id?: number;
  lastName?: string;
  password?: string;
  phone?: string;
  /**
   * User Status
   * @format int32
   */
  userStatus?: number;
  username?: string;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "https://petstore.swagger.io/v2";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Swagger Petstore
 * @version 1.0.3
 * @license Apache 2.0 (http://www.apache.org/licenses/LICENSE-2.0.html)
 * @termsOfService http://swagger.io/terms/
 * @baseUrl https://petstore.swagger.io/v2
 * @externalDocs http://swagger.io
 * @contact <apiteam@swagger.io>
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  pet = {
    /**
     * @description Returns a single pet
     *
     * @tags pet
     * @name GetPetById
     * @summary Find pet by ID
     * @request GET:/pet/{petId}
     * @secure
     */
    getPetById: (petId: number, params: RequestParams = {}) =>
      this.request<Pet, void>({
        path: \`/pet/\${petId}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags pet
     * @name UpdatePetWithForm
     * @summary Updates a pet in the store with form data
     * @request POST:/pet/{petId}
     * @secure
     */
    updatePetWithForm: (
      petId: number,
      data: {
        /** Updated name of the pet */
        name?: string;
        /** Updated status of the pet */
        status?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<any, void>({
        path: \`/pet/\${petId}\`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.FormData,
        ...params,
      }),

    /**
     * No description
     *
     * @tags pet
     * @name DeletePet
     * @summary Deletes a pet
     * @request DELETE:/pet/{petId}
     * @secure
     */
    deletePet: (petId: number, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/pet/\${petId}\`,
        method: "DELETE",
        secure: true,
        ...params,
      }),

    /**
     * No description
     *
     * @tags pet
     * @name UploadFile
     * @summary uploads an image
     * @request POST:/pet/{petId}/uploadImage
     * @secure
     */
    uploadFile: (
      petId: number,
      data: {
        /** Additional data to pass to server */
        additionalMetadata?: string;
        /** file to upload */
        file?: File;
      },
      params: RequestParams = {},
    ) =>
      this.request<ApiResponse, any>({
        path: \`/pet/\${petId}/uploadImage\`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.FormData,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags pet
     * @name AddPet
     * @summary Add a new pet to the store
     * @request POST:/pet
     * @secure
     */
    addPet: (body: Pet, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/pet\`,
        method: "POST",
        body: body,
        secure: true,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * No description
     *
     * @tags pet
     * @name UpdatePet
     * @summary Update an existing pet
     * @request PUT:/pet
     * @secure
     */
    updatePet: (body: Pet, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/pet\`,
        method: "PUT",
        body: body,
        secure: true,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Multiple status values can be provided with comma separated strings
     *
     * @tags pet
     * @name FindPetsByStatus
     * @summary Finds Pets by status
     * @request GET:/pet/findByStatus
     * @secure
     */
    findPetsByStatus: (
      query: {
        /** Status values that need to be considered for filter */
        status: ("available" | "pending" | "sold")[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Pet[], void>({
        path: \`/pet/findByStatus\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @tags pet
     * @name FindPetsByTags
     * @summary Finds Pets by tags
     * @request GET:/pet/findByTags
     * @deprecated
     * @secure
     */
    findPetsByTags: (
      query: {
        /** Tags to filter by */
        tags: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Pet[], void>({
        path: \`/pet/findByTags\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),
  };
  store = {
    /**
     * @description Returns a map of status codes to quantities
     *
     * @tags store
     * @name GetInventory
     * @summary Returns pet inventories by status
     * @request GET:/store/inventory
     * @secure
     */
    getInventory: (params: RequestParams = {}) =>
      this.request<Record<string, number>, any>({
        path: \`/store/inventory\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     *
     * @tags store
     * @name GetOrderById
     * @summary Find purchase order by ID
     * @request GET:/store/order/{orderId}
     */
    getOrderById: (orderId: number, params: RequestParams = {}) =>
      this.request<Order, void>({
        path: \`/store/order/\${orderId}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     *
     * @tags store
     * @name DeleteOrder
     * @summary Delete purchase order by ID
     * @request DELETE:/store/order/{orderId}
     */
    deleteOrder: (orderId: number, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/store/order/\${orderId}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags store
     * @name PlaceOrder
     * @summary Place an order for a pet
     * @request POST:/store/order
     */
    placeOrder: (body: Order, params: RequestParams = {}) =>
      this.request<Order, void>({
        path: \`/store/order\`,
        method: "POST",
        body: body,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),
  };
  user = {
    /**
     * No description
     *
     * @tags user
     * @name GetUserByName
     * @summary Get user by user name
     * @request GET:/user/{username}
     */
    getUserByName: (username: string, params: RequestParams = {}) =>
      this.request<User, void>({
        path: \`/user/\${username}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description This can only be done by the logged in user.
     *
     * @tags user
     * @name UpdateUser
     * @summary Updated user
     * @request PUT:/user/{username}
     */
    updateUser: (username: string, body: User, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/user/\${username}\`,
        method: "PUT",
        body: body,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description This can only be done by the logged in user.
     *
     * @tags user
     * @name DeleteUser
     * @summary Delete user
     * @request DELETE:/user/{username}
     */
    deleteUser: (username: string, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/user/\${username}\`,
        method: "DELETE",
        ...params,
      }),

    /**
     * No description
     *
     * @tags user
     * @name LoginUser
     * @summary Logs user into the system
     * @request GET:/user/login
     */
    loginUser: (
      query: {
        /** The password for login in clear text */
        password: string;
        /** The user name for login */
        username: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<string, void>({
        path: \`/user/login\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags user
     * @name LogoutUser
     * @summary Logs out current logged in user session
     * @request GET:/user/logout
     */
    logoutUser: (params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/user/logout\`,
        method: "GET",
        ...params,
      }),

    /**
     * @description This can only be done by the logged in user.
     *
     * @tags user
     * @name CreateUser
     * @summary Create user
     * @request POST:/user
     */
    createUser: (body: User, params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/user\`,
        method: "POST",
        body: body,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * No description
     *
     * @tags user
     * @name CreateUsersWithArrayInput
     * @summary Creates list of users with given input array
     * @request POST:/user/createWithArray
     */
    createUsersWithArrayInput: (body: User[], params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/user/createWithArray\`,
        method: "POST",
        body: body,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * No description
     *
     * @tags user
     * @name CreateUsersWithListInput
     * @summary Creates list of users with given input array
     * @request POST:/user/createWithList
     */
    createUsersWithListInput: (body: User[], params: RequestParams = {}) =>
      this.request<any, void>({
        path: \`/user/createWithList\`,
        method: "POST",
        body: body,
        type: ContentType.Json,
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'petstore-with-external-docs' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface ErrorModel {
  /** @format int32 */
  code: number;
  message: string;
}

export interface NewPet {
  name: string;
  tag?: string;
}

export type Pet = NewPet & {
  /** @format int64 */
  id: number;
};

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "http://petstore.swagger.io/api";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Swagger Petstore
 * @version 1.0.0
 * @license Apache 2.0 (https://www.apache.org/licenses/LICENSE-2.0.html)
 * @termsOfService http://swagger.io/terms/
 * @baseUrl http://petstore.swagger.io/api
 * @externalDocs https://swagger.io/about
 * @contact Swagger API Team <apiteam@swagger.io> (http://swagger.io)
 *
 * A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  pets = {
    /**
     * @description Returns all pets from the system that the user has access to
     *
     * @name FindPets
     * @request GET:/pets
     */
    findPets: (
      query?: {
        /**
         * maximum number of results to return
         * @format int32
         */
        limit?: number;
        /** tags to filter by */
        tags?: string[];
      },
      params: RequestParams = {},
    ) =>
      this.request<Pet[], ErrorModel>({
        path: \`/pets\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description Creates a new pet in the store.  Duplicates are allowed
     *
     * @name AddPet
     * @request POST:/pets
     */
    addPet: (pet: NewPet, params: RequestParams = {}) =>
      this.request<Pet, ErrorModel>({
        path: \`/pets\`,
        method: "POST",
        body: pet,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Returns a user based on a single ID, if the user does not have access to the pet
     *
     * @name FindPetById
     * @request GET:/pets/{id}
     */
    findPetById: (id: number, params: RequestParams = {}) =>
      this.request<Pet, ErrorModel>({
        path: \`/pets/\${id}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description deletes a single pet based on the ID supplied
     *
     * @name DeletePet
     * @request DELETE:/pets/{id}
     */
    deletePet: (id: number, params: RequestParams = {}) =>
      this.request<void, ErrorModel>({
        path: \`/pets/\${id}\`,
        method: "DELETE",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'query-path-param' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "http://unknown.io/v666";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Query Path Param
 * @version 1.0.0
 * @license MIT
 * @baseUrl http://unknown.io/v666
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  foobarbaz = {
    /**
     * No description
     *
     * @tags pets
     * @name ListPets
     * @summary List all pets
     * @request GET:/foobarbaz/{query}
     */
    listPets: (
      query?: number,
      queryParams?: {
        /**
         * How many items to return at one time (max 100)
         * @format int32
         */
        queryParam?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<object, any>({
        path: \`/foobarbaz/\${query}\`,
        method: "GET",
        query: queryParams,
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'recursive-schema' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

/** RECURSIVE */
export interface RecursiveObject {
  /** RECURSIVE */
  bar?: RecursiveObject;
  /**
   * Unique identifier of the GitHub app
   * @example 37
   */
  id?: number;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title No title
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {}
"
`;

exports[`simple > 'responses' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Title
 * @version latest
 *
 * Description
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  api = {
    /**
     * No description
     *
     * @name GetData
     * @request GET:/api
     */
    getData: (params: RequestParams = {}) =>
      this.request<
        {
          data?: string;
        },
        any
      >({
        path: \`/api\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'swaggerhub-template' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "https://virtserver.swaggerhub.com/sdfsdfsffs/sdfff/1.0.0";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Sample Application Flow OAuth2 Project
 * @version 1.0.0
 * @baseUrl https://virtserver.swaggerhub.com/sdfsdfsffs/sdfff/1.0.0
 *
 * This is an example of using OAuth2 Application Flow in a specification to describe security to your API.
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  example = {
    /**
     * @description This is an example operation to show how security is applied to the call.
     *
     * @name ExampleList
     * @summary Server example operation
     * @request GET:/example
     * @secure
     */
    exampleList: (params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/example\`,
        method: "GET",
        secure: true,
        ...params,
      }),
  };
  ping = {
    /**
     * @description This operation shows how to override the global security defined above, as we want to open it up for all users.
     *
     * @name PingList
     * @summary Server heartbeat operation
     * @request GET:/ping
     */
    pingList: (params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/ping\`,
        method: "GET",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'tsoa-odd-types-3' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface AuthUser {
  password: string;
  username: string;
}

export interface GetProfileBioDTO {
  /** @format int32 */
  candidateId?: number;
  cityName?: string | null;
}

export interface Job {
  address?: string | null;
  github?: string | null;
  id: string;
  isTool?: boolean | null;
  kind: Kind;
  link?: string | null;
  name?: string | null;
  npm?: string | null;
}

export type JobUpdate = OmitJobId | PickJobGithub | Record<string, any>;

export enum Kind {
  COMPANY = "COMPANY",
  PERSONAL = "PERSONAL",
  FREELANCE = "FREELANCE",
  OPEN_SOURCE = "OPEN_SOURCE",
}

export type OmitJobId = PickJobExcludeKeysId;

/** From T, pick a set of properties whose keys are in the union K */
export interface PickJobExcludeKeysId {
  address?: string;
  github?: string;
  isTool?: boolean;
  kind: Kind;
  link?: string;
  name?: string;
  npm?: string;
}

/** From T, pick a set of properties whose keys are in the union K */
export interface PickJobGithub {
  github?: string;
}

/** From T, pick a set of properties whose keys are in the union K */
export interface PickProjectExcludeKeysIdOrjob {
  description: string;
  name?: string;
  notImportant?: boolean;
  prefix?: string;
  tags: string[];
  teamSize: string;
  /** @format double */
  year: number;
}

export interface Project {
  description: string;
  id: string;
  job: Job;
  name?: string | null;
  notImportant?: boolean | null;
  prefix?: string | null;
  tags: string[];
  teamSize: string;
  /** @format double */
  year: number;
}

export interface ProjectUpdate {
  description: string;
  job: string;
  name?: string | null;
  notImportant?: boolean | null;
  prefix?: string | null;
  tags: string[];
  teamSize: string;
  /** @format double */
  year: number;
}

export type UpdatedJob = Job;

export interface UpdatedProject {
  description: string;
  id: string;
  job: string;
  name?: string | null;
  notImportant?: boolean | null;
  prefix?: string | null;
  tags: string[];
  teamSize: string;
  /** @format double */
  year: number;
}

export interface User {
  id: string;
  username: string;
}

export interface UserUpdate {
  id?: string | null;
  username?: string | null;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "http://localhost:8080/api/v1";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title No title
 * @baseUrl http://localhost:8080/api/v1
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  auth = {
    /**
     * No description
     *
     * @tags Auth
     * @name Login
     * @request POST:/auth
     */
    login: (data?: AuthUser, params: RequestParams = {}) =>
      this.request<string, any>({
        path: \`/auth\`,
        method: "POST",
        body: data,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Auth
     * @name Refresh
     * @request POST:/auth/refresh
     * @secure
     */
    refresh: (params: RequestParams = {}) =>
      this.request<string, any>({
        path: \`/auth/refresh\`,
        method: "POST",
        secure: true,
        format: "json",
        ...params,
      }),
  };
  jobs = {
    /**
     * No description
     *
     * @tags Jobs
     * @name GetJobs
     * @request GET:/jobs
     * @secure
     */
    getJobs: (params: RequestParams = {}) =>
      this.request<Job[], any>({
        path: \`/jobs\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Jobs
     * @name AddJob
     * @request POST:/jobs
     * @secure
     */
    addJob: (data: PickJobGithub, params: RequestParams = {}) =>
      this.request<string, any>({
        path: \`/jobs\`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Jobs
     * @name GetJob
     * @request GET:/jobs/{id}
     * @secure
     */
    getJob: (id: string, params: RequestParams = {}) =>
      this.request<Job, void>({
        path: \`/jobs/\${id}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Jobs
     * @name UpdateJob
     * @request PATCH:/jobs/{id}
     * @secure
     */
    updateJob: (id: string, data: JobUpdate, params: RequestParams = {}) =>
      this.request<UpdatedJob, any>({
        path: \`/jobs/\${id}\`,
        method: "PATCH",
        body: data,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Jobs
     * @name DeleteJob
     * @request DELETE:/jobs/{id}
     * @secure
     */
    deleteJob: (id: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/jobs/\${id}\`,
        method: "DELETE",
        secure: true,
        format: "json",
        ...params,
      }),
  };
  xRoute = {
    /**
     * No description
     *
     * @tags Jobs
     * @name GetJobs
     * @request GET:x-route
     * @secure
     */
    getJobs: (params: RequestParams = {}) =>
      this.request<Job[], any>({
        path: \`x-route\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Jobs
     * @name AddJob
     * @request POST:x-route
     * @secure
     */
    addJob: (data: PickJobGithub, params: RequestParams = {}) =>
      this.request<string, any>({
        path: \`x-route\`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),
  };
  projects = {
    /**
     * No description
     *
     * @tags Projects
     * @name GetProjects
     * @request GET:/projects
     */
    getProjects: (params: RequestParams = {}) =>
      this.request<Project[], any>({
        path: \`/projects\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Projects
     * @name AddProjects
     * @request POST:/projects
     * @secure
     */
    addProjects: (data: ProjectUpdate, params: RequestParams = {}) =>
      this.request<string, any>({
        path: \`/projects\`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Projects
     * @name UpdateProject
     * @request PATCH:/projects/{id}
     * @secure
     */
    updateProject: (id: string, data: ProjectUpdate, params: RequestParams = {}) =>
      this.request<UpdatedProject, any>({
        path: \`/projects/\${id}\`,
        method: "PATCH",
        body: data,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),
  };
  users = {
    /**
     * No description
     *
     * @tags Users
     * @name GetUsers
     * @request GET:/users
     * @secure
     */
    getUsers: (params: RequestParams = {}) =>
      this.request<User[], any>({
        path: \`/users\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Users
     * @name AddUser
     * @request POST:/users
     * @secure
     */
    addUser: (data: AuthUser, params: RequestParams = {}) =>
      this.request<User, any>({
        path: \`/users\`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Users
     * @name DeleteUser
     * @request DELETE:/users/{id}
     * @secure
     */
    deleteUser: (id: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/users/\${id}\`,
        method: "DELETE",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @tags Users
     * @name UpdateUser
     * @request PATCH:/users/{id}
     * @secure
     */
    updateUser: (id: string, data: UserUpdate, params: RequestParams = {}) =>
      this.request<User, any>({
        path: \`/users/\${id}\`,
        method: "PATCH",
        body: data,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'uber' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface Activities {
  /**
   * Total number of items available.
   * @format int32
   */
  count?: number;
  history?: Activity[];
  /**
   * Number of items to retrieve (100 max).
   * @format int32
   */
  limit?: number;
  /**
   * Position in pagination.
   * @format int32
   */
  offset?: number;
}

export interface Activity {
  /** Unique identifier for the activity */
  uuid?: string;
}

export interface Error {
  /** @format int32 */
  code?: number;
  fields?: string;
  message?: string;
}

export interface PriceEstimate {
  /** [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code. */
  currency_code?: string;
  /** Display name of product. */
  display_name?: string;
  /** Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or "Metered" for TAXI. */
  estimate?: string;
  /** Upper bound of the estimated price. */
  high_estimate?: number;
  /** Lower bound of the estimated price. */
  low_estimate?: number;
  /** Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles */
  product_id?: string;
  /** Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier. */
  surge_multiplier?: number;
}

export interface Product {
  /** Capacity of product. For example, 4 people. */
  capacity?: number;
  /** Description of product. */
  description?: string;
  /** Display name of product. */
  display_name?: string;
  /** Image URL representing the product. */
  image?: string;
  /** Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles. */
  product_id?: string;
}

export interface ProductList {
  /** Contains the list of products */
  products?: Product[];
}

export interface Profile {
  /** Email address of the Uber user */
  email?: string;
  /** First name of the Uber user. */
  first_name?: string;
  /** Last name of the Uber user. */
  last_name?: string;
  /** Image URL of the Uber user. */
  picture?: string;
  /** Promo code of the Uber user. */
  promo_code?: string;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "https://api.uber.com/v1";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Uber API
 * @version 1.0.0
 * @baseUrl https://api.uber.com/v1
 *
 * Move your app forward with the Uber API
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  products = {
    /**
     * @description The Products endpoint returns information about the Uber products offered at a given location. The response includes the display name and other details about each product, and lists the products in the proper display order.
     *
     * @tags Products
     * @name ProductsList
     * @summary Product Types
     * @request GET:/products
     * @secure
     */
    productsList: (
      query: {
        /**
         * Latitude component of location.
         * @format double
         */
        latitude: number;
        /**
         * Longitude component of location.
         * @format double
         */
        longitude: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Product[], Error>({
        path: \`/products\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),
  };
  estimates = {
    /**
     * @description The Price Estimates endpoint returns an estimated price range for each product offered at a given location. The price estimate is provided as a formatted string with the full price range and the localized currency symbol.<br><br>The response also includes low and high estimates, and the [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for situations requiring currency conversion. When surge is active for a particular product, its surge_multiplier will be greater than 1, but the price estimate already factors in this multiplier.
     *
     * @tags Estimates
     * @name PriceList
     * @summary Price Estimates
     * @request GET:/estimates/price
     */
    priceList: (
      query: {
        /**
         * Latitude component of end location.
         * @format double
         */
        end_latitude?: number;
        /**
         * Longitude component of end location.
         * @format double
         */
        end_longitude: number;
        /**
         * Latitude component of start location.
         * @format double
         */
        start_latitude: number;
        /**
         * Longitude component of start location.
         * @format double
         */
        start_longitude: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<PriceEstimate[], Error>({
        path: \`/estimates/price\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * @description The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs.
     *
     * @tags Estimates
     * @name TimeList
     * @summary Time Estimates
     * @request GET:/estimates/time
     */
    timeList: (
      query: {
        /**
         * Unique customer identifier to be used for experience customization.
         * @format uuid
         */
        customer_uuid?: string;
        /** Unique identifier representing a specific product for a given latitude & longitude. */
        product_id?: string;
        /**
         * Latitude component of start location.
         * @format double
         */
        start_latitude: number;
        /**
         * Longitude component of start location.
         * @format double
         */
        start_longitude: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Product[], Error>({
        path: \`/estimates/time\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
  me = {
    /**
     * @description The User Profile endpoint returns information about the Uber user that has authorized with the application.
     *
     * @tags User
     * @name GetMe
     * @summary User Profile
     * @request GET:/me
     */
    getMe: (params: RequestParams = {}) =>
      this.request<Profile, Error>({
        path: \`/me\`,
        method: "GET",
        format: "json",
        ...params,
      }),
  };
  history = {
    /**
     * @description The User Activity endpoint returns data about a user's lifetime activity with Uber. The response will include pickup locations and times, dropoff locations and times, the distance of past requests, and information about which products were requested.<br><br>The history array in the response will have a maximum length based on the limit parameter. The response value count may exceed limit, therefore subsequent API requests may be necessary.
     *
     * @tags User
     * @name HistoryList
     * @summary User Activity
     * @request GET:/history
     */
    historyList: (
      query?: {
        /**
         * Number of items to retrieve. Default is 5, maximum is 100.
         * @format int32
         */
        limit?: number;
        /**
         * Offset the list of returned results by this amount. Default is zero.
         * @format int32
         */
        offset?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Activities, Error>({
        path: \`/history\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'up-banking' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

/** Provides information about an Up bank account. */
export interface AccountResource {
  attributes: {
    /** The bank account type of this account. */
    accountType: AccountTypeEnum;
    /**
     * The available balance of the account, taking into account any amounts
     * that are currently on hold.
     */
    balance: MoneyObject;
    /**
     * The date-time at which this account was first opened.
     * @format date-time
     */
    createdAt: string;
    /** The name associated with the account in the Up application. */
    displayName: string;
  };
  /** The unique identifier for this account. */
  id: string;
  links?: {
    /** The canonical link to this resource within the API. */
    self: string;
  };
  relationships: {
    transactions: {
      links?: {
        /** The link to retrieve the related resource(s) in this relationship. */
        related: string;
      };
    };
  };
  /** The type of this resource: \`accounts\` */
  type: string;
}

/**
 * Specifies the type of bank account. Currently returned values are \`SAVER\`
 * and \`TRANSACTIONAL\`.
 */
export enum AccountTypeEnum {
  SAVER = "SAVER",
  TRANSACTIONAL = "TRANSACTIONAL",
}

/**
 * Provides information about an instant reimbursement in the form of
 * cashback.
 */
export interface CashbackObject {
  /** The total amount of cashback paid, represented as a positive value. */
  amount: MoneyObject;
  /** A brief description of why this cashback was paid. */
  description: string;
}

/** Provides information about a category and its ancestry. */
export interface CategoryResource {
  attributes: {
    /** The name of this category as seen in the Up application. */
    name: string;
  };
  /**
   * The unique identifier for this category. This is a human-readable but
   * URL-safe value.
   */
  id: string;
  links?: {
    /** The canonical link to this resource within the API. */
    self: string;
  };
  relationships: {
    children: {
      data: {
        /** The unique identifier of the resource within its type. */
        id: string;
        /** The type of this resource: \`categories\` */
        type: string;
      }[];
      links?: {
        /** The link to retrieve the related resource(s) in this relationship. */
        related: string;
      };
    };
    parent: {
      data: {
        /** The unique identifier of the resource within its type. */
        id: string;
        /** The type of this resource: \`categories\` */
        type: string;
      } | null;
      links?: {
        /** The link to retrieve the related resource(s) in this relationship. */
        related: string;
      };
    };
  };
  /** The type of this resource: \`categories\` */
  type: string;
}

/**
 * Request to create a new webhook. This currently only requires a \`url\`
 * attribute.
 */
export interface CreateWebhookRequest {
  /** The webhook resource to create. */
  data: WebhookInputResource;
}

/** Successful response after creating a webhook. */
export interface CreateWebhookResponse {
  /** The webhook that was created. */
  data: WebhookResource;
}

/** Provides information about an error processing a request. */
export interface ErrorObject {
  /**
   * A detailed description of this error. This should be considered unique
   * to individual occurrences of an error and subject to change. It is
   * useful for debugging purposes.
   */
  detail: string;
  /**
   * If applicable, location in the request that this error relates to. This
   * may be a parameter in the query string, or a an attribute in the
   * request body.
   */
  source?: {
    /**
     * If this error relates to a query parameter, the name of the
     * parameter.
     */
    parameter?: string;
    /**
     * If this error relates to an attribute in the request body, a
     * rfc-6901 JSON pointer to the attribute.
     */
    pointer?: string;
  };
  /**
   * The HTTP status code associated with this error. This can also be
   * obtained from the response headers. The status indicates the broad type
   * of error according to HTTP semantics.
   */
  status: string;
  /**
   * A short description of this error. This should be stable across
   * multiple occurrences of this type of error and typically expands on the
   * reason for the status code.
   */
  title: string;
}

/** Generic error response that returns one or more errors. */
export interface ErrorResponse {
  /** The list of errors returned in this response. */
  errors: ErrorObject[];
}

/** Successful response to get a single account. */
export interface GetAccountResponse {
  /** The account returned in this response. */
  data: AccountResource;
}

/** Successful response to get a single category and its ancestry. */
export interface GetCategoryResponse {
  /** The category returned in this response. */
  data: CategoryResource;
}

/** Successful response to get a single transaction. */
export interface GetTransactionResponse {
  /** The transaction returned in this response. */
  data: TransactionResource;
}

/** Successful response to get a single webhook. */
export interface GetWebhookResponse {
  /** The webhook returned in this response. */
  data: WebhookResource;
}

/**
 * Provides information about the amount at which a transaction was in the
 * \`HELD\` status.
 */
export interface HoldInfoObject {
  /**
   * The amount of this transaction while in the \`HELD\` status, in
   * Australian dollars.
   */
  amount: MoneyObject;
  /**
   * The foreign currency amount of this transaction while in the \`HELD\`
   * status. This field will be \`null\` for domestic transactions. The amount
   * was converted to the AUD amount reflected in the \`amount\` field.
   */
  foreignAmount: MoneyObject | null;
}

/**
 * Successful response to get all accounts. This returns a paginated list of
 * accounts, which can be scrolled by following the \`prev\` and \`next\` links
 * if present.
 */
export interface ListAccountsResponse {
  /** The list of accounts returned in this response. */
  data: AccountResource[];
  links: {
    /**
     * The link to the next page in the results. If this value is \`null\`
     * there is no next page.
     */
    next: string | null;
    /**
     * The link to the previous page in the results. If this value is \`null\`
     * there is no previous page.
     */
    prev: string | null;
  };
}

/**
 * Successful response to get all categories and their ancestry. The
 * returned list is not paginated.
 */
export interface ListCategoriesResponse {
  /** The list of categories returned in this response. */
  data: CategoryResource[];
}

/**
 * Successful response to get all tags. This returns a paginated list of
 * tags, which can be scrolled by following the \`prev\` and \`next\` links if
 * present.
 */
export interface ListTagsResponse {
  /** The list of tags returned in this response. */
  data: TagResource[];
  links: {
    /**
     * The link to the next page in the results. If this value is \`null\`
     * there is no next page.
     */
    next: string | null;
    /**
     * The link to the previous page in the results. If this value is \`null\`
     * there is no previous page.
     */
    prev: string | null;
  };
}

/**
 * Successful response to get all transactions. This returns a paginated
 * list of transactions, which can be scrolled by following the \`prev\` and
 * \`next\` links if present.
 */
export interface ListTransactionsResponse {
  /** The list of transactions returned in this response. */
  data: TransactionResource[];
  links: {
    /**
     * The link to the next page in the results. If this value is \`null\`
     * there is no next page.
     */
    next: string | null;
    /**
     * The link to the previous page in the results. If this value is \`null\`
     * there is no previous page.
     */
    prev: string | null;
  };
}

/**
 * Successful response to get all delivery logs for a webhook. This returns
 * a paginated list of delivery logs, which can be scrolled by following the
 * \`next\` and \`prev\` links if present.
 */
export interface ListWebhookDeliveryLogsResponse {
  /** The list of delivery logs returned in this response. */
  data: WebhookDeliveryLogResource[];
  links: {
    /**
     * The link to the next page in the results. If this value is \`null\`
     * there is no next page.
     */
    next: string | null;
    /**
     * The link to the previous page in the results. If this value is \`null\`
     * there is no previous page.
     */
    prev: string | null;
  };
}

/**
 * Successful response to get all webhooks. This returns a paginated list of
 * webhooks, which can be scrolled by following the \`prev\` and \`next\` links
 * if present.
 */
export interface ListWebhooksResponse {
  /** The list of webhooks returned in this response. */
  data: WebhookResource[];
  links: {
    /**
     * The link to the next page in the results. If this value is \`null\`
     * there is no next page.
     */
    next: string | null;
    /**
     * The link to the previous page in the results. If this value is \`null\`
     * there is no previous page.
     */
    prev: string | null;
  };
}

/** Provides information about a value of money. */
export interface MoneyObject {
  /** The ISO 4217 currency code. */
  currencyCode: string;
  /**
   * The amount of money, formatted as a string in the relevant currency.
   * For example, for an Australian dollar value of $10.56, this field will
   * be \`"10.56"\`. The currency symbol is not included in the string.
   */
  value: string;
  /**
   * The amount of money in the smallest denomination for the currency, as a
   * 64-bit integer.  For example, for an Australian dollar value of $10.56,
   * this field will be \`1056\`.
   */
  valueInBaseUnits: number;
}

/** Basic ping response to verify authentication. */
export interface PingResponse {
  meta: {
    /** The unique identifier of the authenticated customer. */
    id: string;
    /** A cute emoji that represents the response status. */
    statusEmoji: string;
  };
}

/**
 * Provides information about how a Round Up was applied, such as whether or
 * not a boost was included in the Round Up.
 */
export interface RoundUpObject {
  /**
   * The total amount of this Round Up, including any boosts, represented as
   * a negative value.
   */
  amount: MoneyObject;
  /**
   * The portion of the Round Up \`amount\` owing to boosted Round Ups,
   * represented as a negative value. If no boost was added to the Round Up
   * this field will be \`null\`.
   */
  boostPortion: MoneyObject | null;
}

/** Bla bla bla foo bar baz */
export enum SomeEnumName {
  Foo = "Foo",
  Bar = "Bar",
  Baz = "Baz",
  Bad = "Bad",
}

/** Uniquely identifies a single tag in the API. */
export interface TagInputResourceIdentifier {
  /** The label of the tag, which also acts as the tag’s unique identifier. */
  id: string;
  /** The type of this resource: \`tags\` */
  type: string;
}

/** Provides information about a tag. */
export interface TagResource {
  /** The label of the tag, which also acts as the tag’s unique identifier. */
  id: string;
  relationships: {
    transactions: {
      links?: {
        /** The link to retrieve the related resource(s) in this relationship. */
        related: string;
      };
    };
  };
  /** The type of this resource: \`tags\` */
  type: string;
}

export interface TransactionResource {
  attributes: {
    /**
     * The amount of this transaction in Australian dollars. For
     * transactions that were once \`HELD\` but are now \`SETTLED\`, refer to
     * the \`holdInfo\` field for the original \`amount\` the transaction was
     * \`HELD\` at.
     */
    amount: MoneyObject;
    /**
     * If all or part of this transaction was instantly reimbursed in the
     * form of cashback, details of the reimbursement.
     */
    cashback: CashbackObject | null;
    /**
     * The date-time at which this transaction was first encountered.
     * @format date-time
     */
    createdAt: string;
    /**
     * A short description for this transaction. Usually the merchant name
     * for purchases.
     */
    description: string;
    /**
     * The foreign currency amount of this transaction. This field will be
     * \`null\` for domestic transactions. The amount was converted to the AUD
     * amount reflected in the \`amount\` of this transaction. Refer to the
     * \`holdInfo\` field for the original \`foreignAmount\` the transaction was
     * \`HELD\` at.
     */
    foreignAmount: MoneyObject | null;
    /**
     * If this transaction is currently in the \`HELD\` status, or was ever in
     * the \`HELD\` status, the \`amount\` and \`foreignAmount\` of the
     * transaction while \`HELD\`.
     */
    holdInfo: HoldInfoObject | null;
    /**
     * Attached message for this transaction, such as a payment message, or a
     * transfer note.
     */
    message: string | null;
    /**
     * The original, unprocessed text of the transaction. This is often not
     * a perfect indicator of the actual merchant, but it is useful for
     * reconciliation purposes in some cases.
     */
    rawText: string | null;
    /**
     * Details of how this transaction was rounded-up. If no Round Up was
     * applied this field will be \`null\`.
     */
    roundUp: RoundUpObject | null;
    /**
     * The date-time at which this transaction settled. This field will be
     * \`null\` for transactions that are currently in the \`HELD\` status.
     * @format date-time
     */
    settledAt: string | null;
    /**
     * The current processing status of this transaction, according to
     * whether or not this transaction has settled or is still held.
     */
    status: TransactionStatusEnum;
  };
  /** The unique identifier for this transaction. */
  id: string;
  links?: {
    /** The canonical link to this resource within the API. */
    self: string;
  };
  relationships: {
    account: {
      data: {
        /** The unique identifier of the resource within its type. */
        id: string;
        /** The type of this resource: \`accounts\` */
        type: string;
      };
      links?: {
        /** The link to retrieve the related resource(s) in this relationship. */
        related: string;
      };
    };
    category: {
      data: {
        /** The unique identifier of the resource within its type. */
        id: string;
        /** The type of this resource: \`categories\` */
        type: string;
      } | null;
      links?: {
        /** The link to retrieve the related resource(s) in this relationship. */
        related: string;
      };
    };
    parentCategory: {
      data: {
        /** The unique identifier of the resource within its type. */
        id: string;
        /** The type of this resource: \`categories\` */
        type: string;
      } | null;
      links?: {
        /** The link to retrieve the related resource(s) in this relationship. */
        related: string;
      };
    };
    tags: {
      data: {
        /** The label of the tag, which also acts as the tag’s unique identifier. */
        id: string;
        /** The type of this resource: \`tags\` */
        type: string;
      }[];
      links?: {
        /**
         * The link to retrieve or modify linkage between this resources and the
         * related resource(s) in this relationship.
         */
        self: string;
      };
    };
  };
  /** The type of this resource: \`transactions\` */
  type: string;
}

/**
 * Specifies which stage of processing a transaction is currently at.
 * Currently returned values are \`HELD\` and \`SETTLED\`. When a transaction is
 * held, its account’s \`availableBalance\` is affected. When a transaction is
 * settled, its account’s \`currentBalance\` is affected.
 */
export enum TransactionStatusEnum {
  HELD = "HELD",
  SETTLED = "SETTLED",
}

/** Request to add or remove tags associated with a transaction. */
export interface UpdateTransactionTagsRequest {
  /** The tags to add to or remove from the transaction. */
  data: TagInputResourceIdentifier[];
}

/**
 * Provides historical webhook event delivery information for analysis and
 * debugging purposes.
 */
export interface WebhookDeliveryLogResource {
  attributes: {
    /**
     * The date-time at which this log entry was created.
     * @format date-time
     */
    createdAt: string;
    /** The success or failure status of this delivery attempt. */
    deliveryStatus: WebhookDeliveryStatusEnum;
    /** Information about the request that was sent to the webhook URL. */
    request: {
      /** The payload that was sent in the request body. */
      body: string;
    };
    /** Information about the response that was received from the webhook URL. */
    response: {
      /** The payload that was received in the response body. */
      body: string;
      /** The HTTP status code received in the response. */
      statusCode: number;
    } | null;
  };
  /** The unique identifier for this log entry. */
  id: string;
  relationships: {
    webhookEvent: {
      data: {
        /** The unique identifier of the resource within its type. */
        id: string;
        /** The type of this resource: \`webhook-events\` */
        type: string;
      };
    };
  };
  /** The type of this resource: \`webhook-delivery-logs\` */
  type: string;
}

/**
 * Specifies the nature of the success or failure of a webhook delivery
 * attempt to the subscribed webhook URL. The currently returned values are
 * described below:
 *
 * - **\`DELIVERED\`**: The event was delivered to the webhook URL
 *   successfully and a \`200\` response was received.
 * - **\`UNDELIVERABLE\`**: The webhook URL was not reachable, or timed out.
 * - **\`BAD_RESPONSE_CODE\`**: The event was delivered to the webhook URL
 *   but a non-\`200\` response was received.
 */
export enum WebhookDeliveryStatusEnum {
  DELIVERED = "DELIVERED",
  UNDELIVERABLE = "UNDELIVERABLE",
  BAD_RESPONSE_CODE = "BAD_RESPONSE_CODE",
}

/** Asynchronous callback request used for webhook event delivery. */
export interface WebhookEventCallback {
  /** The webhook event data sent to the subscribed webhook. */
  data: WebhookEventResource;
}

/**
 * Provides the event data used in asynchronous webhook event callbacks to
 * subscribed endpoints. Webhooks events have defined \`eventType\`s and may
 * optionally relate to other resources within the Up API.
 */
export interface WebhookEventResource {
  attributes: {
    /**
     * The date-time at which this event was generated.
     * @format date-time
     */
    createdAt: string;
    /**
     * The type of this event. This can be used to determine what action to
     * take in response to the event.
     */
    eventType: WebhookEventTypeEnum;
  };
  /**
   * The unique identifier for this event. This will remain constant across
   * delivery retries.
   */
  id: string;
  relationships: {
    transaction?: {
      data: {
        /** The unique identifier of the resource within its type. */
        id: string;
        /** The type of this resource: \`transactions\` */
        type: string;
      };
      links?: {
        /** The link to retrieve the related resource(s) in this relationship. */
        related: string;
      };
    };
    webhook: {
      data: {
        /** The unique identifier of the resource within its type. */
        id: string;
        /** The type of this resource: \`webhooks\` */
        type: string;
      };
      links?: {
        /** The link to retrieve the related resource(s) in this relationship. */
        related: string;
      };
    };
  };
  /** The type of this resource: \`webhook-events\` */
  type: string;
}

/**
 * Specifies the type of a webhook event. This can be used to determine what
 * action to take in response to the event, such as which relationships to
 * expect.
 */
export enum WebhookEventTypeEnum {
  TRANSACTION_CREATED = "TRANSACTION_CREATED",
  TRANSACTION_SETTLED = "TRANSACTION_SETTLED",
  TRANSACTION_DELETED = "TRANSACTION_DELETED",
  PING = "PING",
}

/** Represents a webhook specified as request input. */
export interface WebhookInputResource {
  attributes: {
    /**
     * An optional description for this webhook, up to 64 characters in
     * length.
     */
    description?: string | null;
    /**
     * The URL that this webhook should post events to. This must be a valid
     * HTTP or HTTPS URL that does not exceed 300 characters in length.
     * @format uri
     */
    url: string;
  };
}

/** Provides information about a webhook. */
export interface WebhookResource {
  attributes: {
    /**
     * The date-time at which this webhook was created.
     * @format date-time
     */
    createdAt: string;
    /**
     * An optional description that was provided at the time the webhook was
     * created.
     */
    description: string | null;
    /**
     * A shared secret key used to sign all webhook events sent to the
     * configured webhook URL. This field is returned only once, upon the
     * initial creation of the webhook. If lost, create a new webhook and
     * delete this webhook.
     *
     * The webhook URL receives a request with a
     * \`X-Up-Authenticity-Signature\` header, which is the SHA-256 HMAC of
     * the entire raw request body signed using this \`secretKey\`. It is
     * advised to compute and check this signature to verify the
     * authenticity of requests sent to the webhook URL. See
     * [Handling webhook events](#callback_post_webhookURL) for full
     * details.
     */
    secretKey?: string;
    /** The URL that this webhook is configured to \`POST\` events to. */
    url: string;
  };
  /** The unique identifier for this webhook. */
  id: string;
  links?: {
    /** The canonical link to this resource within the API. */
    self: string;
  };
  relationships: {
    logs: {
      links?: {
        /** The link to retrieve the related resource(s) in this relationship. */
        related: string;
      };
    };
  };
  /** The type of this resource: \`webhooks\` */
  type: string;
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "https://api.up.com.au/api/v1";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Up API
 * @version v1
 * @baseUrl https://api.up.com.au/api/v1
 * @contact API Specification and Support (https://github.com/up-banking/api)
 *
 * The Up API gives you programmatic access to your balances and
 * transaction data. You can request past transactions or set up
 * webhooks to receive real-time events when new transactions hit your
 * account. It’s new, it’s exciting and it’s just the beginning.
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  accounts = {
    /**
     * @description Retrieve a paginated list of all accounts for the currently authenticated user. The returned list is paginated and can be scrolled by following the \`prev\` and \`next\` links where present.
     *
     * @tags Accounts
     * @name AccountsList
     * @summary List accounts
     * @request GET:/accounts
     * @secure
     */
    accountsList: (
      query?: {
        /**
         * The number of records to return in each page.
         * @example 30
         */
        "page[size]"?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ListAccountsResponse, any>({
        path: \`/accounts\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Retrieve a specific account by providing its unique identifier.
     *
     * @tags Accounts
     * @name AccountsDetail
     * @summary Retrieve account
     * @request GET:/accounts/{id}
     * @secure
     */
    accountsDetail: (id: string, params: RequestParams = {}) =>
      this.request<GetAccountResponse, any>({
        path: \`/accounts/\${id}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Retrieve a list of all transactions for a specific account. The returned list is [paginated](#pagination) and can be scrolled by following the \`next\` and \`prev\` links where present. To narrow the results to a specific date range pass one or both of \`filter[since]\` and \`filter[until]\` in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last.
     *
     * @tags Transactions
     * @name TransactionsList
     * @summary List transactions by account
     * @request GET:/accounts/{accountId}/transactions
     * @secure
     */
    transactionsList: (
      accountId: string,
      query?: {
        /**
         * The category identifier for which to filter transactions.
         * Both parent and child categories can be filtered through
         * this parameter. Providing an invalid category identifier
         * results in a \`404\` response.
         * @example "good-life"
         */
        "filter[category]"?: string;
        /**
         * The start date-time from which to return records,
         * formatted according to rfc-3339. Not to be used for
         * pagination purposes.
         * @format date-time
         * @example "2020-01-01T01:02:03+10:00"
         */
        "filter[since]"?: string;
        /**
         * The transaction status for which to return records. This
         * can be used to filter \`HELD\` transactions from those
         * that are \`SETTLED\`.
         * @example "HELD"
         */
        "filter[status]"?: TransactionStatusEnum;
        /**
         * A transaction tag to filter for which to return records.
         * If the tag does not exist, zero records are returned and
         * a success response is given.
         * @example "Holiday"
         */
        "filter[tag]"?: string;
        /**
         * The end date-time up to which to return records,
         * formatted according to rfc-3339. Not to be used for
         * pagination purposes.
         * @format date-time
         * @example "2020-02-01T01:02:03+10:00"
         */
        "filter[until]"?: string;
        /**
         * The number of records to return in each page.
         * @example 30
         */
        "page[size]"?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ListTransactionsResponse, any>({
        path: \`/accounts/\${accountId}/transactions\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),
  };
  categories = {
    /**
     * @description Retrieve a list of all categories and their ancestry. The returned list is not paginated.
     *
     * @tags Categories
     * @name CategoriesList
     * @summary List categories
     * @request GET:/categories
     * @secure
     */
    categoriesList: (
      query?: {
        /**
         * The unique identifier of a parent category for which to
         * return only its children. Providing an invalid category
         * identifier results in a \`404\` response.
         * @example "good-life"
         */
        "filter[parent]"?: string;
      },
      params: RequestParams = {},
    ) =>
      this.request<ListCategoriesResponse, any>({
        path: \`/categories\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Retrieve a specific category by providing its unique identifier.
     *
     * @tags Categories
     * @name CategoriesDetail
     * @summary Retrieve category
     * @request GET:/categories/{id}
     * @secure
     */
    categoriesDetail: (id: string, params: RequestParams = {}) =>
      this.request<GetCategoryResponse, any>({
        path: \`/categories/\${id}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),
  };
  util = {
    /**
     * @description Make a basic ping request to the API. This is useful to verify that authentication is functioning correctly. On authentication success an HTTP \`200\` status is returned. On failure an HTTP \`401\` error response is returned.
     *
     * @tags Utility endpoints
     * @name PingList
     * @summary Ping
     * @request GET:/util/ping
     * @secure
     */
    pingList: (params: RequestParams = {}) =>
      this.request<PingResponse, ErrorResponse>({
        path: \`/util/ping\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),
  };
  tags = {
    /**
     * @description Retrieve a list of all tags currently in use. The returned list is [paginated](#pagination) and can be scrolled by following the \`next\` and \`prev\` links where present. Results are ordered lexicographically. The \`transactions\` relationship for each tag exposes a link to get the transactions with the given tag.
     *
     * @tags Tags
     * @name TagsList
     * @summary List tags
     * @request GET:/tags
     * @secure
     */
    tagsList: (
      query?: {
        /**
         * The number of records to return in each page.
         * @example 50
         */
        "page[size]"?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ListTagsResponse, any>({
        path: \`/tags\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),
  };
  transactions = {
    /**
     * @description Associates one or more tags with a specific transaction. No more than 6 tags may be present on any single transaction. Duplicate tags are silently ignored. An HTTP \`204\` is returned on success. The associated tags, along with this request URL, are also exposed via the \`tags\` relationship on the transaction resource returned from \`/transactions/{id}\`.
     *
     * @tags Tags
     * @name RelationshipsTagsCreate
     * @summary Add tags to transaction
     * @request POST:/transactions/{transactionId}/relationships/tags
     * @secure
     */
    relationshipsTagsCreate: (transactionId: string, data: UpdateTransactionTagsRequest, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/transactions/\${transactionId}/relationships/tags\`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Disassociates one or more tags from a specific transaction. Tags that are not associated are silently ignored. An HTTP \`204\` is returned on success. The associated tags, along with this request URL, are also exposed via the \`tags\` relationship on the transaction resource returned from \`/transactions/{id}\`.
     *
     * @tags Tags
     * @name RelationshipsTagsDelete
     * @summary Remove tags from transaction
     * @request DELETE:/transactions/{transactionId}/relationships/tags
     * @secure
     */
    relationshipsTagsDelete: (transactionId: string, data: UpdateTransactionTagsRequest, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/transactions/\${transactionId}/relationships/tags\`,
        method: "DELETE",
        body: data,
        secure: true,
        type: ContentType.Json,
        ...params,
      }),

    /**
     * @description Retrieve a list of all transactions across all accounts for the currently authenticated user. The returned list is [paginated](#pagination) and can be scrolled by following the \`next\` and \`prev\` links where present. To narrow the results to a specific date range pass one or both of \`filter[since]\` and \`filter[until]\` in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last.
     *
     * @tags Transactions
     * @name TransactionsList
     * @summary List transactions
     * @request GET:/transactions
     * @secure
     */
    transactionsList: (
      query?: {
        /**
         * The category identifier for which to filter transactions.
         * Both parent and child categories can be filtered through
         * this parameter. Providing an invalid category identifier
         * results in a \`404\` response.
         * @example "good-life"
         */
        "filter[category]"?: string;
        /**
         * The start date-time from which to return records,
         * formatted according to rfc-3339. Not to be used for
         * pagination purposes.
         * @format date-time
         * @example "2020-01-01T01:02:03+10:00"
         */
        "filter[since]"?: string;
        /**
         * The transaction status for which to return records. This
         * can be used to filter \`HELD\` transactions from those
         * that are \`SETTLED\`.
         * @example "HELD"
         */
        "filter[status]"?: TransactionStatusEnum;
        /**
         * A transaction tag to filter for which to return records.
         * If the tag does not exist, zero records are returned and
         * a success response is given.
         * @example "Holiday"
         */
        "filter[tag]"?: string;
        /**
         * The end date-time up to which to return records,
         * formatted according to rfc-3339. Not to be used for
         * pagination purposes.
         * @format date-time
         * @example "2020-02-01T01:02:03+10:00"
         */
        "filter[until]"?: string;
        /**
         * The number of records to return in each page.
         * @example 30
         */
        "page[size]"?: number;
        /** Blablabla bla */
        someEnumName?: SomeEnumName;
      },
      params: RequestParams = {},
    ) =>
      this.request<ListTransactionsResponse, any>({
        path: \`/transactions\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Retrieve a specific transaction by providing its unique identifier.
     *
     * @tags Transactions
     * @name TransactionsDetail
     * @summary Retrieve transaction
     * @request GET:/transactions/{id}
     * @secure
     */
    transactionsDetail: (id: string, params: RequestParams = {}) =>
      this.request<GetTransactionResponse, any>({
        path: \`/transactions/\${id}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),
  };
  webhooks = {
    /**
     * @description Retrieve a list of configured webhooks. The returned list is [paginated](#pagination) and can be scrolled by following the \`next\` and \`prev\` links where present. Results are ordered oldest first to newest last.
     *
     * @tags Webhooks
     * @name WebhooksList
     * @summary List webhooks
     * @request GET:/webhooks
     * @secure
     */
    webhooksList: (
      query?: {
        /**
         * The number of records to return in each page.
         * @example 30
         */
        "page[size]"?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ListWebhooksResponse, any>({
        path: \`/webhooks\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Create a new webhook with a given URL. The URL will receive webhook events as JSON-encoded \`POST\` requests. The URL must respond with a HTTP \`200\` status on success. There is currently a limit of 10 webhooks at any given time. Once this limit is reached, existing webhooks will need to be deleted before new webhooks can be created. Event delivery is retried with exponential backoff if the URL is unreachable or it does not respond with a \`200\` status. The response includes a \`secretKey\` attribute, which is used to sign requests sent to the webhook URL. It will not be returned from any other endpoints within the Up API. If the \`secretKey\` is lost, simply create a new webhook with the same URL, capture its \`secretKey\` and then delete the original webhook. See [Handling webhook events](#callback_post_webhookURL) for details on how to process webhook events. It is probably a good idea to test the webhook by [sending it a \`PING\` event](#post_webhooks_webhookId_ping) after creating it.
     *
     * @tags Webhooks
     * @name WebhooksCreate
     * @summary Create webhook
     * @request POST:/webhooks
     * @secure
     */
    webhooksCreate: (data: CreateWebhookRequest, params: RequestParams = {}) =>
      this.request<CreateWebhookResponse, any>({
        path: \`/webhooks\`,
        method: "POST",
        body: data,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params,
      }),

    /**
     * @description Retrieve a specific webhook by providing its unique identifier.
     *
     * @tags Webhooks
     * @name WebhooksDetail
     * @summary Retrieve webhook
     * @request GET:/webhooks/{id}
     * @secure
     */
    webhooksDetail: (id: string, params: RequestParams = {}) =>
      this.request<GetWebhookResponse, any>({
        path: \`/webhooks/\${id}\`,
        method: "GET",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Delete a specific webhook by providing its unique identifier. Once deleted, webhook events will no longer be sent to the configured URL.
     *
     * @tags Webhooks
     * @name WebhooksDelete
     * @summary Delete webhook
     * @request DELETE:/webhooks/{id}
     * @secure
     */
    webhooksDelete: (id: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/webhooks/\${id}\`,
        method: "DELETE",
        secure: true,
        ...params,
      }),

    /**
     * @description Send a \`PING\` event to a webhook by providing its unique identifier. This is useful for testing and debugging purposes. The event is delivered asynchronously and its data is returned in the response to this request.
     *
     * @tags Webhooks
     * @name PingCreate
     * @summary Ping webhook
     * @request POST:/webhooks/{webhookId}/ping
     * @secure
     */
    pingCreate: (webhookId: string, params: RequestParams = {}) =>
      this.request<WebhookEventCallback, any>({
        path: \`/webhooks/\${webhookId}/ping\`,
        method: "POST",
        secure: true,
        format: "json",
        ...params,
      }),

    /**
     * @description Retrieve a list of delivery logs for a webhook by providing its unique identifier. This is useful for analysis and debugging purposes. The returned list is [paginated](#pagination) and can be scrolled by following the \`next\` and \`prev\` links where present. Results are ordered newest first to oldest last. Logs may be automatically purged after a period of time.
     *
     * @tags Webhooks
     * @name LogsList
     * @summary List webhook logs
     * @request GET:/webhooks/{webhookId}/logs
     * @secure
     */
    logsList: (
      webhookId: string,
      query?: {
        /**
         * The number of records to return in each page.
         * @example 30
         */
        "page[size]"?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<ListWebhookDeliveryLogsResponse, any>({
        path: \`/webhooks/\${webhookId}/logs\`,
        method: "GET",
        query: query,
        secure: true,
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'uspto' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface DataSetList {
  apis?: {
    /**
     * A URL to the API console for each API
     * @format uriref
     */
    apiDocumentationUrl?: string;
    /** To be used as a dataset parameter value */
    apiKey?: string;
    /**
     * The URL describing the dataset's fields
     * @format uriref
     */
    apiUrl?: string;
    /** To be used as a version parameter value */
    apiVersionNumber?: string;
  }[];
  total?: number;
}

export enum SomeEnum {
  Foo = "Foo",
  Bar = "Bar",
  FooBar = "Foo Bar",
}

export enum Status {
  Resolved = "resolved",
  New = "new",
  InProgress = "in progress",
}

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "{scheme}://developer.uspto.gov/ds-api";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title USPTO Data Set API
 * @version 1.0.0
 * @baseUrl {scheme}://developer.uspto.gov/ds-api
 * @contact Open Data Portal <developer@uspto.gov> (https://developer.uspto.gov)
 *
 * The Data Set API (DSAPI) allows the public users to discover and search USPTO exported data sets. This is a generic API that allows USPTO users to make any CSV based data files searchable through API. With the help of GET call, it returns the list of data fields that are searchable. With the help of POST call, data can be fetched based on the filters on the field names. Please note that POST call is used to search the actual data. The reason for the POST call is that it allows users to specify any complex search criteria without worry about the GET size limitations as well as encoding of the input parameters.
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  /**
   * No description
   *
   * @tags metadata
   * @name ListDataSets
   * @summary List available data sets
   * @request GET:/
   */
  listDataSets = (params: RequestParams = {}) =>
    this.request<DataSetList, any>({
      path: \`/\`,
      method: "GET",
      format: "json",
      ...params,
    });

  dataset = {
    /**
     * @description This GET API returns the list of all the searchable field names that are in the oa_citations. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the syntax options shown below.
     *
     * @tags metadata
     * @name ListSearchableFields
     * @summary Provides the general information about the API and the list of fields that can be used to query the dataset.
     * @request GET:/{dataset}/{version}/fields
     */
    listSearchableFields: (dataset: string, version: string, params: RequestParams = {}) =>
      this.request<string, string>({
        path: \`/\${dataset}/\${version}/fields\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * @description This API is based on Solr/Lucense Search. The data is indexed using SOLR. This GET API returns the list of all the searchable field names that are in the Solr Index. Please see the 'fields' attribute which returns an array of field names. Each field or a combination of fields can be searched using the Solr/Lucene Syntax. Please refer https://lucene.apache.org/core/3_6_2/queryparsersyntax.html#Overview for the query syntax. List of field names that are searchable can be determined using above GET api.
     *
     * @tags search
     * @name PerformSearch
     * @summary Provides search capability for the data set with the given search criteria.
     * @request POST:/{dataset}/{version}/records
     */
    performSearch: (
      version: string,
      dataset: string,
      data: {
        /**
         * Uses Lucene Query Syntax in the format of propertyName:value, propertyName:[num1 TO num2] and date range format: propertyName:[yyyyMMdd TO yyyyMMdd]. In the response please see the 'docs' element which has the list of record objects. Each record structure would consist of all the fields and their corresponding values.
         * @default "*:*"
         */
        criteria: string;
        /**
         * Specify number of rows to be returned. If you run the search with default values, in the response you will see 'numFound' attribute which will tell the number of records available in the dataset.
         * @default 100
         */
        rows?: number;
        /**
         * Starting record number. Default value is 0.
         * @default 0
         */
        start?: number;
      },
      params: RequestParams = {},
    ) =>
      this.request<Record<string, object>[], void>({
        path: \`/\${dataset}/\${version}/records\`,
        method: "POST",
        body: data,
        type: ContentType.UrlEncoded,
        format: "json",
        ...params,
      }),
  };
}
"
`;

exports[`simple > 'wrong-enum-subtypes' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export type Test = {
  x?: "A-B"[];
} & {
  y?: string;
};

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Test
 * @version test
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {}
"
`;

exports[`simple > 'wrong-schema-names' 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

/**
 * Not found response
 * @example "Not found"
 */
export type DF = string;

/**
 * Not found response
 * @example "Not found"
 */
export type Type404 = string;

/**
 * Not found response
 * @example "Not found"
 */
export type Type405 = string;

/**
 * Not found response
 * @example "Not found"
 */
export type TypeFF = string;

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to \`true\` for call \`securityWorker\` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (securityData: SecurityDataType | null) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams);

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return \`\${encodedKey}=\${encodeURIComponent(typeof value === "number" ? value : \`\${value}\`)}\`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys
      .map((key) => (Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)))
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? \`?\${queryString}\` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    [ContentType.Text]: (input: any) => (input !== null && typeof input !== "string" ? JSON.stringify(input) : input),
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : \`\${property}\`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || ContentType.Json];
    const responseFormat = format || requestParams.format;

    return this.customFetch(\`\${baseUrl || this.baseUrl || ""}\${path}\${queryString ? \`?\${queryString}\` : ""}\`, {
      ...requestParams,
      headers: {
        ...(requestParams.headers || {}),
        ...(type && type !== ContentType.FormData ? { "Content-Type": type } : {}),
      },
      signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
      body: typeof body === "undefined" || body === null ? null : payloadFormatter(body),
    }).then(async (response) => {
      const r = response.clone() as HttpResponse<T, E>;
      r.data = null as unknown as T;
      r.error = null as unknown as E;

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data;
              } else {
                r.error = data;
              }
              return r;
            })
            .catch((e) => {
              r.error = e;
              return r;
            });

      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }

      if (!response.ok) throw data;
      return data;
    });
  };
}

/**
 * @title Link Example
 * @version 1.0.0
 */
export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
  v20 = {
    /**
     * No description
     *
     * @name GetUserByName
     * @request GET:/2.0/users/{username}
     */
    getUserByName: (username: string, params: RequestParams = {}) =>
      this.request<any, any>({
        path: \`/2.0/users/\${username}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name GetRepositoriesByOwner
     * @request GET:/2.0/repositories/{username}
     */
    getRepositoriesByOwner: (username: string, params: RequestParams = {}) =>
      this.request<any[], any>({
        path: \`/2.0/repositories/\${username}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name GetRepository
     * @request GET:/2.0/repositories/{username}/{slug}
     */
    getRepository: (username: string, slug: string, params: RequestParams = {}) =>
      this.request<any, any>({
        path: \`/2.0/repositories/\${username}/\${slug}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name GetPullRequestsByRepository
     * @request GET:/2.0/repositories/{username}/{slug}/pullrequests
     */
    getPullRequestsByRepository: (
      username: string,
      slug: string,
      query?: {
        state?: "open" | "merged" | "declined";
      },
      params: RequestParams = {},
    ) =>
      this.request<any[], any>({
        path: \`/2.0/repositories/\${username}/\${slug}/pullrequests\`,
        method: "GET",
        query: query,
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name GetPullRequestsById
     * @request GET:/2.0/repositories/{username}/{slug}/pullrequests/{pid}
     */
    getPullRequestsById: (username: string, slug: string, pid: string, params: RequestParams = {}) =>
      this.request<Type404, any>({
        path: \`/2.0/repositories/\${username}/\${slug}/pullrequests/\${pid}\`,
        method: "GET",
        format: "json",
        ...params,
      }),

    /**
     * No description
     *
     * @name MergePullRequest
     * @request POST:/2.0/repositories/{username}/{slug}/pullrequests/{pid}/merge
     */
    mergePullRequest: (username: string, slug: string, pid: string, params: RequestParams = {}) =>
      this.request<void, any>({
        path: \`/2.0/repositories/\${username}/\${slug}/pullrequests/\${pid}/merge\`,
        method: "POST",
        ...params,
      }),
  };
}
"
`;
