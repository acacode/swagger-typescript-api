// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`JSON-LD basic test > should generate JSON-LD types correctly 1`] = `
[
  {
    "fileContent": "/** JSON-LD Entity: Person */
export interface Person {
  /**
   * name
   * Person's name
   */
  name: string;
  /**
   * email
   * Person's email
   * @format email
   */
  email?: string;
  /**
   * birthDate
   * Person's birth date
   * @format date
   */
  birthDate?: string;
}

/** JSON-LD Entity: Organization */
export interface Organization {
  /**
   * name
   * Property: name
   */
  name: string;
  /**
   * url
   * Property: url
   * @format uri
   */
  url?: string;
  /**
   * employees
   * Property: employees
   */
  employees?: Person[];
}

/** JSON-LD Entity: JsonLdEntity */
export interface JsonLdEntity {
  /**
   * @context
   * JSON-LD context defining the meaning of terms
   */
  "@context"?: object;
  /**
   * @type
   * JSON-LD type identifier
   */
  "@type": string;
  /**
   * @id
   * JSON-LD identifier (IRI)
   */
  "@id"?: string;
}

/**
 * JSON-LD Entity: Person * @jsonld JSON-LD Entity
 */
export interface Person extends JsonLdEntity {
  /**
   * name
   * Person's name
   */
  name: string;
  /**
   * email
   * Person's email
   * @format email
   */
  email?: string;
  /**
   * birthDate
   * Person's birth date
   * @format date
   */
  birthDate?: string;
}

/**
 * JSON-LD Entity: Organization * @jsonld JSON-LD Entity
 */
export interface Organization extends JsonLdEntity {
  /**
   * name
   * Property: name
   */
  name: string;
  /**
   * url
   * Property: url
   * @format uri
   */
  url?: string;
  /**
   * employees
   * Property: employees
   */
  employees?: Person[];
}

/**
 * JSON-LD Entity: JsonLdEntity * @jsonld JSON-LD Entity
 */
export interface JsonLdEntity extends JsonLdEntity {
  /**
   * @context
   * JSON-LD context defining the meaning of terms
   */
  "@context"?: object | null;
  /**
   * @type
   * JSON-LD type identifier
   */
  "@type": string;
  /**
   * @id
   * JSON-LD identifier (IRI)
   */
  "@id"?: string | null;
}

/**
 * JSON-LD Utility Types and Interfaces
 * Generated by swagger-typescript-api
 */

/**
 * Base interface for JSON-LD entities
 */
export interface JsonLdEntity {
  /** JSON-LD context defining the meaning of terms */
  "@context"?: JsonLdContext;
  /** JSON-LD type identifier */
  "@type"?: string | string[];
  /** JSON-LD identifier (IRI) */
  "@id"?: string;
}

/**
 * JSON-LD Context type
 * Can be a string (URI), object (term mappings), or array of contexts
 */
export type JsonLdContext =
  | string
  | JsonLdContextObject
  | (string | JsonLdContextObject)[];

/**
 * JSON-LD Context object with term mappings
 */
export interface JsonLdContextObject {
  [term: string]: string | JsonLdTermDefinition;
}

/**
 * JSON-LD Term Definition
 */
export interface JsonLdTermDefinition {
  /** IRI associated with the term */
  "@id": string;
  /** Type coercion for the term */
  "@type"?: string;
  /** Container specification */
  "@container"?: "@list" | "@set" | "@language" | "@index" | "@id" | "@type";
}

/**
 * JSON-LD Graph structure
 */
export interface JsonLdGraph {
  "@context"?: JsonLdContext;
  "@graph": JsonLdEntity[];
}

/**
 * JSON-LD Node reference
 */
export interface JsonLdNodeReference {
  "@id": string;
}

/**
 * JSON-LD Value object
 */
export interface JsonLdValue {
  "@value": any;
  "@type"?: string;
  "@language"?: string;
}

/**
 * Utility type to extract JSON-LD properties
 */
export type JsonLdProperties<T extends JsonLdEntity> = {
  [K in keyof T]: K extends "@context" | "@type" | "@id" ? never : T[K];
};

/**
 * Utility type to make a type compatible with JSON-LD
 */
export type WithJsonLd<T> = T & JsonLdEntity;
",
    "fileExtension": ".ts",
    "fileName": "Api",
  },
]
`;

exports[`JSON-LD basic test > should generate JSON-LD types with strict typing 1`] = `
[
  {
    "fileContent": "/** JSON-LD Entity: Person */
export interface Person {
  /**
   * name
   * Person's name
   */
  name: string;
  /**
   * email
   * Person's email
   * @format email
   */
  email?: string;
  /**
   * birthDate
   * Person's birth date
   * @format date
   */
  birthDate?: string;
}

/** JSON-LD Entity: Organization */
export interface Organization {
  /**
   * name
   * Property: name
   */
  name: string;
  /**
   * url
   * Property: url
   * @format uri
   */
  url?: string;
  /**
   * employees
   * Property: employees
   */
  employees?: Person[];
}

/** JSON-LD Entity: JsonLdEntity */
export interface JsonLdEntity {
  /**
   * @context
   * JSON-LD context defining the meaning of terms
   */
  "@context"?: object;
  /**
   * @type
   * JSON-LD type identifier
   */
  "@type": string;
  /**
   * @id
   * JSON-LD identifier (IRI)
   */
  "@id"?: string;
}

/**
 * JSON-LD Entity: Person * @jsonld JSON-LD Entity
 */
export interface Person extends JsonLdEntity {
  /**
   * name
   * Person's name
   */
  name: string;
  /**
   * email
   * Person's email
   * @format email
   */
  email?: string;
  /**
   * birthDate
   * Person's birth date
   * @format date
   */
  birthDate?: string;
}

/**
 * JSON-LD Entity: Organization * @jsonld JSON-LD Entity
 */
export interface Organization extends JsonLdEntity {
  /**
   * name
   * Property: name
   */
  name: string;
  /**
   * url
   * Property: url
   * @format uri
   */
  url?: string;
  /**
   * employees
   * Property: employees
   */
  employees?: Person[];
}

/**
 * JSON-LD Entity: JsonLdEntity * @jsonld JSON-LD Entity
 */
export interface JsonLdEntity extends JsonLdEntity {
  /**
   * @context
   * JSON-LD context defining the meaning of terms
   */
  "@context"?: object | null;
  /**
   * @type
   * JSON-LD type identifier
   */
  "@type": string;
  /**
   * @id
   * JSON-LD identifier (IRI)
   */
  "@id"?: string | null;
}

/**
 * JSON-LD Utility Types and Interfaces
 * Generated by swagger-typescript-api
 */

/**
 * Base interface for JSON-LD entities
 */
export interface JsonLdEntity {
  /** JSON-LD context defining the meaning of terms */
  "@context"?: JsonLdContext;
  /** JSON-LD type identifier */
  "@type"?: string | string[];
  /** JSON-LD identifier (IRI) */
  "@id"?: string;
}

/**
 * JSON-LD Context type
 * Can be a string (URI), object (term mappings), or array of contexts
 */
export type JsonLdContext =
  | string
  | JsonLdContextObject
  | (string | JsonLdContextObject)[];

/**
 * JSON-LD Context object with term mappings
 */
export interface JsonLdContextObject {
  [term: string]: string | JsonLdTermDefinition;
}

/**
 * JSON-LD Term Definition
 */
export interface JsonLdTermDefinition {
  /** IRI associated with the term */
  "@id": string;
  /** Type coercion for the term */
  "@type"?: string;
  /** Container specification */
  "@container"?: "@list" | "@set" | "@language" | "@index" | "@id" | "@type";
}

/**
 * JSON-LD Graph structure
 */
export interface JsonLdGraph {
  "@context"?: JsonLdContext;
  "@graph": JsonLdEntity[];
}

/**
 * JSON-LD Node reference
 */
export interface JsonLdNodeReference {
  "@id": string;
}

/**
 * JSON-LD Value object
 */
export interface JsonLdValue {
  "@value": any;
  "@type"?: string;
  "@language"?: string;
}

/**
 * Utility type to extract JSON-LD properties
 */
export type JsonLdProperties<T extends JsonLdEntity> = {
  [K in keyof T]: K extends "@context" | "@type" | "@id" ? never : T[K];
};

/**
 * Utility type to make a type compatible with JSON-LD
 */
export type WithJsonLd<T> = T & JsonLdEntity;
",
    "fileExtension": ".ts",
    "fileName": "Api",
  },
]
`;

exports[`JSON-LD basic test > should handle JSON-LD entities with context 1`] = `
[
  {
    "fileContent": "/** JSON-LD Entity: Person */
export interface Person {
  /**
   * name
   * Person's name
   */
  name: string;
  /**
   * email
   * Person's email
   * @format email
   */
  email?: string;
  /**
   * birthDate
   * Person's birth date
   * @format date
   */
  birthDate?: string;
}

/** JSON-LD Entity: Organization */
export interface Organization {
  /**
   * name
   * Property: name
   */
  name: string;
  /**
   * url
   * Property: url
   * @format uri
   */
  url?: string;
  /**
   * employees
   * Property: employees
   */
  employees?: Person[];
}

/** JSON-LD Entity: JsonLdEntity */
export interface JsonLdEntity {
  /**
   * @context
   * JSON-LD context defining the meaning of terms
   */
  "@context"?: object;
  /**
   * @type
   * JSON-LD type identifier
   */
  "@type": string;
  /**
   * @id
   * JSON-LD identifier (IRI)
   */
  "@id"?: string;
}

/**
 * JSON-LD Entity: Person * @jsonld JSON-LD Entity
 */
export interface Person extends JsonLdEntity {
  /**
   * name
   * Person's name
   */
  name: string;
  /**
   * email
   * Person's email
   * @format email
   */
  email?: string;
  /**
   * birthDate
   * Person's birth date
   * @format date
   */
  birthDate?: string;
}

/**
 * JSON-LD Entity: Organization * @jsonld JSON-LD Entity
 */
export interface Organization extends JsonLdEntity {
  /**
   * name
   * Property: name
   */
  name: string;
  /**
   * url
   * Property: url
   * @format uri
   */
  url?: string;
  /**
   * employees
   * Property: employees
   */
  employees?: Person[];
}

/**
 * JSON-LD Entity: JsonLdEntity * @jsonld JSON-LD Entity
 */
export interface JsonLdEntity extends JsonLdEntity {
  /**
   * @context
   * JSON-LD context defining the meaning of terms
   */
  "@context"?: object | null;
  /**
   * @type
   * JSON-LD type identifier
   */
  "@type": string;
  /**
   * @id
   * JSON-LD identifier (IRI)
   */
  "@id"?: string | null;
}

/**
 * JSON-LD Utility Types and Interfaces
 * Generated by swagger-typescript-api
 */

/**
 * Base interface for JSON-LD entities
 */
export interface JsonLdEntity {
  /** JSON-LD context defining the meaning of terms */
  "@context"?: JsonLdContext;
  /** JSON-LD type identifier */
  "@type"?: string | string[];
  /** JSON-LD identifier (IRI) */
  "@id"?: string;
}

/**
 * JSON-LD Context type
 * Can be a string (URI), object (term mappings), or array of contexts
 */
export type JsonLdContext =
  | string
  | JsonLdContextObject
  | (string | JsonLdContextObject)[];

/**
 * JSON-LD Context object with term mappings
 */
export interface JsonLdContextObject {
  [term: string]: string | JsonLdTermDefinition;
}

/**
 * JSON-LD Term Definition
 */
export interface JsonLdTermDefinition {
  /** IRI associated with the term */
  "@id": string;
  /** Type coercion for the term */
  "@type"?: string;
  /** Container specification */
  "@container"?: "@list" | "@set" | "@language" | "@index" | "@id" | "@type";
}

/**
 * JSON-LD Graph structure
 */
export interface JsonLdGraph {
  "@context"?: JsonLdContext;
  "@graph": JsonLdEntity[];
}

/**
 * JSON-LD Node reference
 */
export interface JsonLdNodeReference {
  "@id": string;
}

/**
 * JSON-LD Value object
 */
export interface JsonLdValue {
  "@value": any;
  "@type"?: string;
  "@language"?: string;
}

/**
 * Utility type to extract JSON-LD properties
 */
export type JsonLdProperties<T extends JsonLdEntity> = {
  [K in keyof T]: K extends "@context" | "@type" | "@id" ? never : T[K];
};

/**
 * Utility type to make a type compatible with JSON-LD
 */
export type WithJsonLd<T> = T & JsonLdEntity;
",
    "fileExtension": ".ts",
    "fileName": "Api",
  },
]
`;
