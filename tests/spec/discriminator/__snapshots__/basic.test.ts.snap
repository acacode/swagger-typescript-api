// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`basic > discriminator 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export enum PetEnum {
  Dog = "dog",
  Lizard = "lizard",
  Cat = "cat",
}

export enum BlockDTOEnum {
  Csv = "csv",
  File = "file",
  Kek = "kek",
}

/** kek pek */
export type Variant =
  | ({
      type: "update";
    } & VariantUpdate)
  | ({
      type: "undo";
    } & VariantUndo)
  | ({
      type: "rollback";
    } & VariantRollback)
  | ({
      type: "scale";
    } & VariantScale)
  | ({
      type: "resources";
    } & VariantResources)
  | ({
      type: "firewall";
    } & VariantFirewall)
  | ({
      type: "gateway";
    } & VariantGateway);

export type InvalidDiscriminatorPropertyName =
  BaseInvalidDiscriminatorPropertyName &
    (
      | BaseInvalidDiscriminatorPropertyNameTypeMapping<"num", number>
      | BaseInvalidDiscriminatorPropertyNameTypeMapping<"str", string>
    );

export type PetWithEnum = BasePetWithEnum &
  (
    | BasePetWithEnumPetTypeMapping<PetEnum.Dog, DogWithEnum>
    | BasePetWithEnumPetTypeMapping<PetEnum.Cat, CatWithEnum>
    | BasePetWithEnumPetTypeMapping<PetEnum.Lizard, LizardWithEnum>
  );

export type PetOnlyDiscriminator =
  | ({
      pet_type: "dog";
    } & Dog)
  | ({
      pet_type: "cat";
    } & Cat)
  | ({
      pet_type: "lizard";
    } & Lizard);

export type Pet = BasePet &
  (
    | BasePetPetTypeMapping<"dog", Dog>
    | BasePetPetTypeMapping<"cat", Cat>
    | BasePetPetTypeMapping<"lizard", Lizard>
  );

export type BlockDTO = BaseBlockDto &
  (
    | BaseBlockDtoTypeMapping<"csv", CsvBlockDTO>
    | BaseBlockDtoTypeMapping<"file", FileBlockDTO>
  );

export type BlockDTOWithEnum = BaseBlockDtoWithEnum &
  (
    | BaseBlockDtoWithEnumTypeMapping<BlockDTOEnum.Csv, CsvBlockWithEnumDTO>
    | BaseBlockDtoWithEnumTypeMapping<BlockDTOEnum.File, FileBlockWithEnumDTO>
  );

export type SimpleDiscriminator = SimpleObject | ComplexObject;

export interface SimpleObject {
  objectType: string;
}

export interface ComplexObject {
  objectType: string;
}

export type CsvBlockWithEnumDTO = BaseBlockDtoWithEnum & {
  type: BlockDTOEnum.Csv;
  text: string;
};

export type FileBlockWithEnumDTO = BaseBlockDtoWithEnum & {
  type: BlockDTOEnum.File;
  fileId: string;
};

export type CsvBlockDTO = BaseBlockDto & {
  /** @default "csv" */
  type: "csv";
  text: string;
};

export type FileBlockDTO = BaseBlockDto & {
  /** @default "file" */
  type: "file";
  fileId: string;
};

export type Cat = BasePet & {
  name?: string;
};

export type Dog = BasePet & {
  bark?: string;
};

export type Lizard = BasePet & {
  lovesRocks?: boolean;
};

export type CatWithEnum = BasePetWithEnum & {
  name?: string;
};

export type DogWithEnum = BasePetWithEnum & {
  bark?: string;
};

export type LizardWithEnum = BasePetWithEnum & {
  lovesRocks?: boolean;
};

/** Proposal to change firewall rules for deployment. */
export interface VariantFirewall {
  /** asdasdasdasdasdsad added to deployment. If not set, no rules are added. */
  rules_added?: string[];
  /** asdasdasdasdasdsad removed from deployment. If not set, no rules were removed. */
  rules_removed?: string[];
}

/** asdasdasdasdasd */
export interface VariantScale {
  /**
   * asdasdasdasdasdsad
   * @example 3
   */
  replicas: number;
}

/** asdasdasdasdasd */
export interface VariantResources {
  resources: string;
}

/** asdasdasdasdasd */
export interface VariantGateway {
  /** asdasdasdasdasdsad */
  port?: string;
  /** asdasdasdasdasdsad */
  name?: string;
  /** asdasdasdasdasdsad */
  domain?: string;
}

/** Pasdasdasdasdasd. */
export type VariantUpdate = object;

/** asdasdasdasdasd */
export interface VariantRollback {
  /**
   * asdasdasdasdasdsad
   * @example 42
   */
  revision_id: number;
}

/** asdasdasdasdasdn */
export type VariantUndo = object;

type BaseInvalidDiscriminatorPropertyName = object;

type BaseInvalidDiscriminatorPropertyNameTypeMapping<Key, Type> = {
  "@type": Key;
} & Type;

interface BasePetWithEnum {
  pet_type: PetEnum;
}

type BasePetWithEnumPetTypeMapping<Key, Type> = {
  pet_type: Key;
} & Type;

interface BasePet {
  pet_type: string;
}

type BasePetPetTypeMapping<Key, Type> = {
  pet_type: Key;
} & Type;

interface BaseBlockDto {
  title: string;
}

type BaseBlockDtoTypeMapping<Key, Type> = {
  type: Key;
} & Type;

interface BaseBlockDtoWithEnum {
  title: string;
  type: BlockDTOEnum;
}

type BaseBlockDtoWithEnumTypeMapping<Key, Type> = {
  type: Key;
} & Type;
"
`;

exports[`basic > discriminator with union enums 1`] = `
"/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export type PetEnum = "dog" | "lizard" | "cat";

export type BlockDTOEnum = "csv" | "file" | "kek";

/** kek pek */
export type Variant =
  | ({
      type: "update";
    } & VariantUpdate)
  | ({
      type: "undo";
    } & VariantUndo)
  | ({
      type: "rollback";
    } & VariantRollback)
  | ({
      type: "scale";
    } & VariantScale)
  | ({
      type: "resources";
    } & VariantResources)
  | ({
      type: "firewall";
    } & VariantFirewall)
  | ({
      type: "gateway";
    } & VariantGateway);

export type InvalidDiscriminatorPropertyName =
  BaseInvalidDiscriminatorPropertyName &
    (
      | BaseInvalidDiscriminatorPropertyNameTypeMapping<"num", number>
      | BaseInvalidDiscriminatorPropertyNameTypeMapping<"str", string>
    );

export type PetWithEnum = BasePetWithEnum &
  (
    | BasePetWithEnumPetTypeMapping<"dog", DogWithEnum>
    | BasePetWithEnumPetTypeMapping<"cat", CatWithEnum>
    | BasePetWithEnumPetTypeMapping<"lizard", LizardWithEnum>
  );

export type PetOnlyDiscriminator =
  | ({
      pet_type: "dog";
    } & Dog)
  | ({
      pet_type: "cat";
    } & Cat)
  | ({
      pet_type: "lizard";
    } & Lizard);

export type Pet = BasePet &
  (
    | BasePetPetTypeMapping<"dog", Dog>
    | BasePetPetTypeMapping<"cat", Cat>
    | BasePetPetTypeMapping<"lizard", Lizard>
  );

export type BlockDTO = BaseBlockDto &
  (
    | BaseBlockDtoTypeMapping<"csv", CsvBlockDTO>
    | BaseBlockDtoTypeMapping<"file", FileBlockDTO>
  );

export type BlockDTOWithEnum = BaseBlockDtoWithEnum &
  (
    | BaseBlockDtoWithEnumTypeMapping<"csv", CsvBlockWithEnumDTO>
    | BaseBlockDtoWithEnumTypeMapping<"file", FileBlockWithEnumDTO>
  );

export type SimpleDiscriminator = SimpleObject | ComplexObject;

export interface SimpleObject {
  objectType: string;
}

export interface ComplexObject {
  objectType: string;
}

export type CsvBlockWithEnumDTO = BaseBlockDtoWithEnum & {
  type: "csv";
  text: string;
};

export type FileBlockWithEnumDTO = BaseBlockDtoWithEnum & {
  type: "file";
  fileId: string;
};

export type CsvBlockDTO = BaseBlockDto & {
  /** @default "csv" */
  type: "csv";
  text: string;
};

export type FileBlockDTO = BaseBlockDto & {
  /** @default "file" */
  type: "file";
  fileId: string;
};

export type Cat = BasePet & {
  name?: string;
};

export type Dog = BasePet & {
  bark?: string;
};

export type Lizard = BasePet & {
  lovesRocks?: boolean;
};

export type CatWithEnum = BasePetWithEnum & {
  name?: string;
};

export type DogWithEnum = BasePetWithEnum & {
  bark?: string;
};

export type LizardWithEnum = BasePetWithEnum & {
  lovesRocks?: boolean;
};

/** Proposal to change firewall rules for deployment. */
export interface VariantFirewall {
  /** asdasdasdasdasdsad added to deployment. If not set, no rules are added. */
  rules_added?: string[];
  /** asdasdasdasdasdsad removed from deployment. If not set, no rules were removed. */
  rules_removed?: string[];
}

/** asdasdasdasdasd */
export interface VariantScale {
  /**
   * asdasdasdasdasdsad
   * @example 3
   */
  replicas: number;
}

/** asdasdasdasdasd */
export interface VariantResources {
  resources: string;
}

/** asdasdasdasdasd */
export interface VariantGateway {
  /** asdasdasdasdasdsad */
  port?: string;
  /** asdasdasdasdasdsad */
  name?: string;
  /** asdasdasdasdasdsad */
  domain?: string;
}

/** Pasdasdasdasdasd. */
export type VariantUpdate = object;

/** asdasdasdasdasd */
export interface VariantRollback {
  /**
   * asdasdasdasdasdsad
   * @example 42
   */
  revision_id: number;
}

/** asdasdasdasdasdn */
export type VariantUndo = object;

type BaseInvalidDiscriminatorPropertyName = object;

type BaseInvalidDiscriminatorPropertyNameTypeMapping<Key, Type> = {
  "@type": Key;
} & Type;

interface BasePetWithEnum {
  pet_type: PetEnum;
}

type BasePetWithEnumPetTypeMapping<Key, Type> = {
  pet_type: Key;
} & Type;

interface BasePet {
  pet_type: string;
}

type BasePetPetTypeMapping<Key, Type> = {
  pet_type: Key;
} & Type;

interface BaseBlockDto {
  title: string;
}

type BaseBlockDtoTypeMapping<Key, Type> = {
  type: Key;
} & Type;

interface BaseBlockDtoWithEnum {
  title: string;
  type: BlockDTOEnum;
}

type BaseBlockDtoWithEnumTypeMapping<Key, Type> = {
  type: Key;
} & Type;
"
`;
